  1. 1 Introduction
    1. Mechanism privacy:
    2. Mechanism utility:
    3. Matrix factorization:
    4. Streaming setting:
    5. 1.1 Our Contributions
      1. Practical algorithms:
      2. Lower bounds:
    6. 1.2 Our Algorithms & Techniques
      1. BLTs: Buffered Linear Toeplitz Matrices (Â§3):
      2. Designing BLTs via rational function approximation (Â§4):
      3. Designing BLTs via direct optimization (Â§5):
      4. Generalizations of the binary tree mechanism (Â§6):
    7. 1.3 An Empirical Comparison of Mechanisms
  2. 2 Background
    1. 2.1 Prior Work on Matrix Factorizations for Continual Counting
    2. 2.2 Lower Triangular Toeplitz Factorizations versus General Factorizations
      1. Reformulation as a quadratically constrained quadratic program:
      2. Lagrangian relaxation:
      3. Construction of primal-dual optimal solution:
    3. 2.3 Applications of Matrix Factorizations in Machine Learning
    4. 2.4 Other Related Work
      1. Beyond additive noise:
      2. Offline setting:
      3. Pure differential privacy:
      4. Factoring other matrices:
  3. 3 Efficiently-Sampleable Factorization via Rational Generating Functions
    1. 3.1 Sequences, Lower Triangular Toeplitz Matrices, & Generating Functions
    2. 3.2 Rational Generating Functions and Constant-Recurrent Sequences
    3. 3.3 Efficient Sampling via BLT Multiplication
  4. 4 Factorizations via Rational Function Approximation
    1. 4.1 Reduction to Approximating the Square Root
    2. 4.2 Rational Approximation of xğ‘¥\sqrt{x}square-root start_ARG italic_x end_ARG
    3. 4.3 Putting Everything Together
  5. 5 Factorizations via Direct Optimization
    1. 5.1 Fast and Exact Error Computation
    2. 5.2 Direct Optimization of BLTs
    3. 5.3 Derivation of the Inverse BLT Parameterization
  6. 6 Generalizing the Binary Tree Approach
    1. 6.1 Recursive Matrix Factorization
    2. 6.2 Recursive Algorithm
    3. 6.3 Combining Recursion with BLTs
  7. 7 Numerical Lower Bound on Optimal Performance
  8. 8 BLT with d=1ğ‘‘1d=1italic_d = 1 Buffers
  9. 9 Conjecture
  10. Acknowledgements

\addbibresource

reference.bib

00footnotetext: Alphabetical author order.

# Efficient and Near-Optimal Noise Generation  
for Streaming Differential Privacy

Krishnamurthy (Dj) Dvijotham Google DeepMind dvij@google.com â€ƒâ€ƒ H.Â
Brendan McMahan Google Research mcmahan@google.com â€ƒâ€ƒ Krishna Pillutla IIT
Madras. Work done at Google. pillutla@cs.washington.edu â€ƒâ€ƒ Thomas Steinke
Google DeepMind steinke@google.com â€ƒâ€ƒ Abhradeep Thakurta Google DeepMind
athakurta@google.com

###### Abstract

In the task of differentially private (DP) continual counting, we receive a
stream of increments and our goal is to output an approximate running total of
these increments, without revealing too much about any specific increment.
Despite its simplicity, differentially private continual counting has
attracted significant attention both in theory and in practice. Existing
algorithms for differentially private continual counting are either
inefficient in terms of their space usage or add an excessive amount of noise,
inducing suboptimal utility.

The most practical DP continual counting algorithms add carefully correlated
Gaussian noise to the values. The task of choosing the covariance for this
noise can be expressed in terms of factoring the lower-triangular matrix of
ones (which computes prefix sums). We present two approaches from this class
(for different parameter regimes) that achieve near-optimal utility for DP
continual counting and only require logarithmic or polylogarithmic space (and
time).

Our first approach is based on a space-efficient streaming matrix
multiplication algorithm for a class of Toeplitz matrices. We show that to
instantiate this algorithm for DP continual counting, it is sufficient to find
a low-degree rational function that approximates the square root on a circle
in the complex plane. We then apply and extend tools from approximation theory
to achieve this. We also derive efficient closed-forms for the objective
function for arbitrarily many steps, and show direct numerical optimization
yields a highly practical solution to the problem. Our second approach
combines our first approach with a recursive construction similar to the
binary tree mechanism.

###### Contents

  1. 1 Introduction
    1. 1.1 Our Contributions
    2. 1.2 Our Algorithms & Techniques
    3. 1.3 An Empirical Comparison of Mechanisms
  2. 2 Background
    1. 2.1 Prior Work on Matrix Factorizations for Continual Counting
    2. 2.2 Lower Triangular Toeplitz Factorizations versus General Factorizations
    3. 2.3 Applications of Matrix Factorizations in Machine Learning
    4. 2.4 Other Related Work
  3. 3 Efficiently-Sampleable Factorization via Rational Generating Functions
    1. 3.1 Sequences, Lower Triangular Toeplitz Matrices, & Generating Functions
    2. 3.2 Rational Generating Functions and Constant-Recurrent Sequences
    3. 3.3 Efficient Sampling via BLT Multiplication
  4. 4 Factorizations via Rational Function Approximation
    1. 4.1 Reduction to Approximating the Square Root
    2. 4.2 Rational Approximation of xğ‘¥\sqrt{x}square-root start_ARG italic_x end_ARG
    3. 4.3 Putting Everything Together
  5. 5 Factorizations via Direct Optimization
    1. 5.1 Fast and Exact Error Computation
    2. 5.2 Direct Optimization of BLTs
    3. 5.3 Derivation of the Inverse BLT Parameterization
  6. 6 Generalizing the Binary Tree Approach
    1. 6.1 Recursive Matrix Factorization
    2. 6.2 Recursive Algorithm
    3. 6.3 Combining Recursion with BLTs
  7. 7 Numerical Lower Bound on Optimal Performance
  8. 8 BLT with d=1ğ‘‘1d=1italic_d = 1 Buffers
  9. 9 Conjecture
  10. Acknowledgements

##  1 Introduction

The simplest task in differentially private data analysis is _counting_. This
task has an equally simple (and optimal) algorithm: we simply add Laplace or
Gaussian noise to the final count [DMNS].

_Continual counting_ [Dwork-continual, CSS11-continual] asks that we not only
release the final count, but that we provide a running total, i.e., we release
all the partial sums. This task and its variants have proved to be a
surprisingly complex problem in the theory of differential privacy
[beimel2013private, bun2015differentially, bun2018composable, alon2019private,
kaplan2020privately, gillenwater2021differentially, cohen2023optimal].

Continual counting is also critically important in practice. State-of-the-art
methods for differentially private machine learning rely on (high-dimensional
extensions of) continual counting algorithms to maintain their state in a
differentially private manner [kairouz2021practical, Cutosky21,
kairouz2021practical, denisov22matfact, choquette22multiepoch,
choquette2024amplified, xu2023federated]. (See SectionÂ 2.3 for discussion of
this application.) This has motivated significant work on making
differentially private continual counting as accurate as possible
[mathias1993hadamard, matouvsek2020factorization, fichtenberger2022constant,
henzinger2023almost, henzinger2024unifying, andersson2024smooth].

Practical algorithms for continual counting add Gaussian noise to the partial
sums. However, this noise is not independent: it must be carefully correlated
across steps, as we will see. Choosing an appropriate multivariate Gaussian
can be formulated as a _matrix factorization_ problem, as we now describe.

To convey the key ideas in this introduction, we consider summing
nğ‘›nitalic_n scalars; this discussion readily extends to summing vectors. Let
xâˆˆâ„nğ‘¥superscriptâ„ğ‘›x\in\mathbb{R}^{n}italic_x âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT contain the nğ‘›nitalic_n
terms we wish to sum (over nğ‘›nitalic_n iterations or steps). Let
Aâˆˆ{0,1}nÃ—nğ´superscript01ğ‘›ğ‘›A\in\\{0,1\\}^{n\times n}italic_A âˆˆ { 0 ,
1 } start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT be the
lower-triangular all-ones matrix so that Aâ¢xğ´ğ‘¥Axitalic_A italic_x is the
vector of partial sums â€“ i.e.,
(Aâ¢x)k=âˆ‘iâ‰¤kxisubscriptğ´ğ‘¥ğ‘˜subscriptğ‘–ğ‘˜subscriptğ‘¥ğ‘–(Ax)_{k}=\sum_{i\leq
k}x_{i}( italic_A italic_x ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT =
âˆ‘ start_POSTSUBSCRIPT italic_i â‰¤ italic_k end_POSTSUBSCRIPT italic_x
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT for each kğ‘˜kitalic_k. We
factor A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C, where
B,CTâˆˆâ„nÃ—nâ€²ğµsuperscriptğ¶ğ‘‡superscriptâ„ğ‘›superscriptğ‘›â€²B,C^{T}\in\mathbb{R}^{n\times
n^{\prime}}italic_B , italic_C start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT.
The corresponding differentially private continual counting algorithm
â„³â„³\mathcal{M}caligraphic_M is given by

| â„³â¢(x)â‰”Bâ¢(Câ¢x+z)=Aâ¢x+Bâ¢z=Aâ¢(x+Câ€ â¢z),â‰”â„³ğ‘¥ğµğ¶ğ‘¥ğ‘§ğ´ğ‘¥ğµğ‘§ğ´ğ‘¥superscriptğ¶â€ ğ‘§\mathcal{M}(x)\coloneqq B(Cx+z)=Ax+Bz=A(x+C^{\dagger}z),caligraphic_M ( italic_x ) â‰” italic_B ( italic_C italic_x + italic_z ) = italic_A italic_x + italic_B italic_z = italic_A ( italic_x + italic_C start_POSTSUPERSCRIPT â€ end_POSTSUPERSCRIPT italic_z ) , |  | (1.1)  
---|---|---|---  
  
where
zâ†ğ’©â¢(0,Ïƒ2â¢I)â†ğ‘§ğ’©0superscriptğœ2ğ¼z\leftarrow\mathcal{N}(0,\sigma^{2}I)italic_z
â† caligraphic_N ( 0 , italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
italic_I ) is a vector of independent Gaussian noise.111Câ€
=Aâˆ’1â¢Bsuperscriptğ¶â€ superscriptğ´1ğµC^{\dagger}=A^{-1}Bitalic_C
start_POSTSUPERSCRIPT â€ end_POSTSUPERSCRIPT = italic_A start_POSTSUPERSCRIPT
- 1 end_POSTSUPERSCRIPT italic_B is the inverse of Cğ¶Citalic_C whenever
Cğ¶Citalic_C is a square matrix. However, we will also consider settings where
Cğ¶Citalic_C is not a square matrix and so Câ€ superscriptğ¶â€
C^{\dagger}italic_C start_POSTSUPERSCRIPT â€ end_POSTSUPERSCRIPT is a suitable
pseudo-inverse. Equivalently, the output of the mechanism can be written as
â„³â¢(x)=Aâ¢x+z^â„³ğ‘¥ğ´ğ‘¥^ğ‘§\mathcal{M}(x)=Ax+\widehat{z}caligraphic_M (
italic_x ) = italic_A italic_x + over^ start_ARG italic_z end_ARG where
z^â†ğ’©â¢(0,Î£)â†^ğ‘§ğ’©0Î£\widehat{z}\leftarrow\mathcal{N}(0,\Sigma)over^
start_ARG italic_z end_ARG â† caligraphic_N ( 0 , roman_Î£ ) with
Î£=Ïƒ2â¢Bâ¢BTÎ£superscriptğœ2ğµsuperscriptğµğ‘‡\Sigma=\sigma^{2}BB^{T}roman_Î£
= italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_B italic_B
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT.

#### Mechanism privacy:

We assume that one person can change only one entry of the input xğ‘¥xitalic_x
by at most 1111, which means Câ¢xğ¶ğ‘¥Cxitalic_C italic_x can change by at
most the maximum column norm of Cğ¶Citalic_C, denoted

| â€–Câ€–1â†’2â‰”maxjâ¡âˆ‘iCi,j2.â‰”subscriptnormğ¶â†’12subscriptğ‘—subscriptğ‘–superscriptsubscriptğ¶ğ‘–ğ‘—2\|C\|_{1\to 2}\coloneqq\max_{j}\sqrt{\sum_{i}C_{i,j}^{2}}.âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰” roman_max start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT square-root start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG . |   
---|---|---  
  
This is the L2subscriptğ¿2L_{2}italic_L start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT sensitivity of Câ¢xğ¶ğ‘¥Cxitalic_C italic_x. Then, following
the standard privacy analysis of Gaussian noise addition
\parencitedwork2014algorithmic,steinke2022composition, to ensure that
Câ¢x+zğ¶ğ‘¥ğ‘§Cx+zitalic_C italic_x + italic_z is
(Îµ,Î´)ğœ€ğ›¿(\varepsilon,\delta)( italic_Îµ , italic_Î´ )-differentially
private, we scale the noise
zâ†ğ’©â¢(0,Ïƒ2â¢I)â†ğ‘§ğ’©0superscriptğœ2ğ¼z\leftarrow\mathcal{N}(0,\sigma^{2}I)italic_z
â† caligraphic_N ( 0 , italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
italic_I ) to have standard deviation
Ïƒ=Î¶â¢â€–Câ€–1â†’2ğœğœsubscriptnormğ¶â†’12\sigma=\zeta\|C\|_{1\to 2}italic_Ïƒ
= italic_Î¶ âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT,
where
Î¶=Oâ¢(1Îµâ¢logâ¡(1/Î´))ğœğ‘‚1ğœ€1ğ›¿\zeta=O(\frac{1}{\varepsilon}\sqrt{\log(1/\delta)})italic_Î¶
= italic_O ( divide start_ARG 1 end_ARG start_ARG italic_Îµ end_ARG square-
root start_ARG roman_log ( 1 / italic_Î´ ) end_ARG ) is a noise multiplier
depending only on the privacy parameters (Îµ,Î´)ğœ€ğ›¿(\varepsilon,\delta)(
italic_Îµ , italic_Î´ ).222Importantly, particularly for machine learning
applications, this privacy analysis can be extended to the case where each
xksubscriptğ‘¥ğ‘˜x_{k}italic_x start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT
is adaptively chosen depending on the prefix sums
0,â€¦,kâˆ’10â€¦ğ‘˜10,\dots,k-10 , â€¦ , italic_k - 1 already released by the
mechanism \parencitedenisov22matfact. By postprocessing, this implies
â„³â¢(x)=Bâ¢(Câ¢x+z)â„³ğ‘¥ğµğ¶ğ‘¥ğ‘§\mathcal{M}(x)=B(Cx+z)caligraphic_M (
italic_x ) = italic_B ( italic_C italic_x + italic_z ) is
(Îµ,Î´)ğœ€ğ›¿(\varepsilon,\delta)( italic_Îµ , italic_Î´ )-differentially
private.

#### Mechanism utility:

The error of the mechanism â„³â„³\mathcal{M}caligraphic_M is given by
â„³â¢(x)âˆ’Aâ¢x=Bâ¢zâ„³ğ‘¥ğ´ğ‘¥ğµğ‘§\mathcal{M}(x)-Ax=Bzcaligraphic_M (
italic_x ) - italic_A italic_x = italic_B italic_z. Thus, the root mean
squared error of the iğ‘–iitalic_ith partial sum can be calculated as

| ğ”¼â„³â¢(â„³â¢(x)âˆ’Aâ¢x)i2=ğ”¼zâ¢[(Bâ¢z)i2]=Ïƒ2â¢âˆ‘jBi,j2,subscriptğ”¼â„³superscriptsubscriptâ„³ğ‘¥ğ´ğ‘¥ğ‘–2subscriptğ”¼ğ‘§delimited-[]superscriptsubscriptğµğ‘§ğ‘–2superscriptğœ2subscriptğ‘—superscriptsubscriptğµğ‘–ğ‘—2\displaystyle\sqrt{\mathbb{E}_{\mathcal{M}}{(\mathcal{M}(x)-Ax)_{i}^{2}}}=% \sqrt{\mathbb{E}_{z}\left[(Bz)_{i}^{2}\right]}=\sqrt{\sigma^{2}\sum_{j}B_{i,j}% ^{2}},square-root start_ARG blackboard_E start_POSTSUBSCRIPT caligraphic_M end_POSTSUBSCRIPT ( caligraphic_M ( italic_x ) - italic_A italic_x ) start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG = square-root start_ARG blackboard_E start_POSTSUBSCRIPT italic_z end_POSTSUBSCRIPT [ ( italic_B italic_z ) start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ] end_ARG = square-root start_ARG italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_B start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG , |   
---|---|---  
  
which scales with the norm of the corresponding row of BğµBitalic_B. We take
our notion of utility to be the maximum333We can also consider other measures
of error such as sum of variances (rather than the max). This corresponds to a
different norm:
ğ”¼â¢[â€–Bâ¢zâ€–22]=â€–Bâ€–F2â‹…Ïƒ2ğ”¼delimited-[]superscriptsubscriptnormğµğ‘§22â‹…superscriptsubscriptnormğµğ¹2superscriptğœ2{\mathbb{E}\left[\|Bz\|_{2}^{2}\right]}=\left\|B\right\|_{F}^{2}\cdot\sigma^{2}blackboard_E
[ âˆ¥ italic_B italic_z âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ] = âˆ¥ italic_B âˆ¥
start_POSTSUBSCRIPT italic_F end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT â‹… italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT.
such error over all nğ‘›nitalic_n partial sums released, which scales with the
maximum row norm

| â€–Bâ€–2â†’âˆâ‰”maxiâ¡âˆ‘jBi,j2.â‰”subscriptnormğµâ†’2subscriptğ‘–subscriptğ‘—superscriptsubscriptğµğ‘–ğ‘—2\|B\|_{2\to\infty}\coloneqq\max_{i}\sqrt{\sum_{j}B_{i,j}^{2}}.âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‰” roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT square-root start_ARG âˆ‘ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_B start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG . |   
---|---|---  
  
Thus, the maximum root mean squared error of the mechanismâ€™s answers is

| maxiâ¡ğ”¼â„³â¢[(â„³â¢(x)âˆ’Aâ¢x)i2]subscriptğ‘–â„³ğ”¼delimited-[]superscriptsubscriptâ„³ğ‘¥ğ´ğ‘¥ğ‘–2\displaystyle\max_{i}\sqrt{{\underset{\mathcal{M}}{\mathbb{E}}\left[(\mathcal{% M}(x)-Ax)_{i}^{2}\right]}}roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT square-root start_ARG undercaligraphic_M start_ARG blackboard_E end_ARG [ ( caligraphic_M ( italic_x ) - italic_A italic_x ) start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ] end_ARG | =maxiâ¡ğ”¼zâ†ğ’©â¢(0,Ïƒ2â¢I)â¢[(Bâ¢z)i2]=maxiâ¡Ïƒ2â¢âˆ‘jBi,j2absentsubscriptğ‘–â†ğ‘§ğ’©0superscriptğœ2ğ¼ğ”¼delimited-[]superscriptsubscriptğµğ‘§ğ‘–2subscriptğ‘–superscriptğœ2subscriptğ‘—superscriptsubscriptğµğ‘–ğ‘—2\displaystyle=\max_{i}\sqrt{{\underset{z\leftarrow\mathcal{N}(0,\sigma^{2}I)}{% \mathbb{E}}\left[(Bz)_{i}^{2}\right]}}=\max_{i}\sqrt{\sigma^{2}\sum_{j}B_{i,j}% ^{2}}= roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT square-root start_ARG start_UNDERACCENT italic_z â† caligraphic_N ( 0 , italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_I ) end_UNDERACCENT start_ARG blackboard_E end_ARG [ ( italic_B italic_z ) start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ] end_ARG = roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT square-root start_ARG italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_B start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG |   
---|---|---|---  
|  | =Ïƒâˆ¥Bâˆ¥2â†’âˆ=Î¶âˆ¥Bâˆ¥2â†’âˆâˆ¥Câˆ¥1â†’2=:Î¶MaxErr(B,C),\displaystyle=\sigma\|B\|_{2\to\infty}=\zeta\|B\|_{2\to\infty}\|C\|_{1\to 2}=:% \zeta\operatorname{MaxErr}(B,C),= italic_Ïƒ âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT = italic_Î¶ âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = : italic_Î¶ roman_MaxErr ( italic_B , italic_C ) , |  | (1.2)  
  
where we define

| MaxErrâ¡(B,C)â‰”â€–Bâ€–2â†’âˆâ¢â€–Câ€–1â†’2=maxiâ¢âˆ‘jBi,j2â¢maxjâ¢âˆ‘iCi,j2.â‰”MaxErrğµğ¶subscriptnormğµâ†’2subscriptnormğ¶â†’12subscriptğ‘–subscriptğ‘—superscriptsubscriptğµğ‘–ğ‘—2subscriptğ‘—subscriptğ‘–superscriptsubscriptğ¶ğ‘–ğ‘—2\operatorname{MaxErr}(B,C)\coloneqq\|B\|_{2\to\infty}\|C\|_{1\to 2}=\sqrt{\max% _{i}\sum_{j}B_{i,j}^{2}}\sqrt{\max_{j}\sum_{i}C_{i,j}^{2}}.roman_MaxErr ( italic_B , italic_C ) â‰” âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = square-root start_ARG roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_B start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG square-root start_ARG roman_max start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG . |  | (1.3)  
---|---|---|---  
  
Since the error in SectionÂ 1 can be written as a product of the noise
multiplier Î¶ğœ\zetaitalic_Î¶ (which does not depend on the factorization
B,Cğµğ¶B,Citalic_B , italic_C) and
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) (which does not depend on the differential privacy parameters), the
same factorization will minimize error for all settings of the privacy
parameters. Thus, we suppress Î¶ğœ\zetaitalic_Î¶ for the remainder of this
paper.

#### Matrix factorization:

To summarize, our goal is to solve the matrix factorization problem

| minimizeB,Câ¢MaxErrâ¡(B,C)Â subject toÂ â¢Bâ¢C=A.subscriptminimizeğµğ¶MaxErrğµğ¶Â subject toÂ ğµğ¶ğ´\text{minimize}_{B,C}~{}\operatorname{MaxErr}(B,C)~{}~{}~{}~{}~{}\text{ % subject to }BC=A.minimize start_POSTSUBSCRIPT italic_B , italic_C end_POSTSUBSCRIPT roman_MaxErr ( italic_B , italic_C ) subject to italic_B italic_C = italic_A . |  | (1.4)  
---|---|---|---  
  
The optimal value of this objective is denoted
Î³2â¢(A)subscriptğ›¾2ğ´\gamma_{2}(A)italic_Î³ start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT ( italic_A ) and is known as the _gamma-two factorization
norm_ of Ağ´Aitalic_A [[, e.g.,]]matouvsek2020factorization. Prior work has
obtained near-optimal factorizations of Ağ´Aitalic_A (and related matrices).
The optimal value is

| Î³2â¢(A)â‰”inf{MaxErrâ¡(B,C):B,Câˆˆâ„nÃ—n,Bâ¢C=A}=logâ¡(n)Ï€Â±Oâ¢(1).â‰”subscriptğ›¾2ğ´infimumconditional-setMaxErrğµğ¶formulae-sequenceğµğ¶superscriptâ„ğ‘›ğ‘›ğµğ¶ğ´plus-or-minusğ‘›ğœ‹ğ‘‚1\gamma_{2}(A)\coloneqq\inf\big{\\{}\operatorname{MaxErr}(B,C):B,C\in\mathbb{R}^% {n\times n},BC=A\big{\\}}=\frac{\log(n)}{\pi}\pm O(1).italic_Î³ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A ) â‰” roman_inf { roman_MaxErr ( italic_B , italic_C ) : italic_B , italic_C âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT , italic_B italic_C = italic_A } = divide start_ARG roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG Â± italic_O ( 1 ) . |  | (1.5)  
---|---|---|---  
  
However, the existing factorizations are either far from optimal or do not
readily yield practical algorithms because generating the noise
Bâ¢zğµğ‘§Bzitalic_B italic_z is not sufficiently computationally efficient.
That is the problem we address in this paper. The main computational challenge
is that our algorithm cannot store xğ‘¥xitalic_x or zğ‘§zitalic_z (or even
BğµBitalic_B or Cğ¶Citalic_C) in memory; this would require memory that is
linear in the number of steps nğ‘›nitalic_n.

_We provide a matrix factorization mechanism for differentially private
continual counting attaining near-optimal error with only polylogarithmic
memory overhead._

To give a sense of scale, in private machine learning applications, we often
need to compute n>106ğ‘›superscript106n>10^{6}italic_n > 10
start_POSTSUPERSCRIPT 6 end_POSTSUPERSCRIPT partial sums (each coming from an
iteration of stochastic gradient descent or a related algorithm), over
m>1010ğ‘šsuperscript1010m>10^{10}italic_m > 10 start_POSTSUPERSCRIPT 10
end_POSTSUPERSCRIPT dimensions (the size of the model and its gradients).444In
this introductory discussion, we have considered sums over m=1ğ‘š1m=1italic_m
= 1 dimension. Extending to m>1ğ‘š1m>1italic_m > 1 is essentially a matter of
running mğ‘šmitalic_m parallel copies of the algorithm. In our technical
sections, we take xğ‘¥xitalic_x to be a matrix whose rows we wish to sum,
rather than a vector. Thus we need to be able to compute
Mâ¢(x)ğ‘€ğ‘¥M(x)italic_M ( italic_x ) without storing all of the data or noise
in memory, as this would take nâ¢m>1016ğ‘›ğ‘šsuperscript1016nm>10^{16}italic_n
italic_m > 10 start_POSTSUPERSCRIPT 16 end_POSTSUPERSCRIPT units of memory â€“
i.e., over 40 petabytes if we use 32-bit floating point numbers.555Throughout
this paper we treat real computation as atomic; e.g., a real number takes up
one unit of memory. In practice, floating point implementations can compromise
privacy [mironov2012significance], but techniques exist to ensure differential
privacy in discrete settings [canonne2020discrete, kairouz2021distributed].

#### Streaming setting:

Our algorithm receives the coordinates of the input xğ‘¥xitalic_x and noise
zğ‘§zitalic_z one at a time and outputs the approximate partial sums
â„³â¢(x)â„³ğ‘¥\mathcal{M}(x)caligraphic_M ( italic_x ) one at a time. In
particular, we must output each partial sum
(â„³â¢(x))kâ‰ˆâˆ‘iâ‰¤kxisubscriptâ„³ğ‘¥ğ‘˜subscriptğ‘–ğ‘˜subscriptğ‘¥ğ‘–\left({\mathcal{M}(x)}\right)_{k}\approx\sum_{i\leq
k}x_{i}( caligraphic_M ( italic_x ) ) start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT â‰ˆ âˆ‘ start_POSTSUBSCRIPT italic_i â‰¤ italic_k
end_POSTSUBSCRIPT italic_x start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT
before receiving the next input xk+1subscriptğ‘¥ğ‘˜1x_{k+1}italic_x
start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT.

Ideally, the memory usage should not grow with the stream length nğ‘›nitalic_n
at all. If we use the trivial factorization given by B=Iğµğ¼B=Iitalic_B =
italic_I and C=Ağ¶ğ´C=Aitalic_C = italic_A, then this corresponds to adding
independent noise to each output. This would only require constant memory and
constant time per output, but the noise scale
MaxErrâ¡(B,C)=nMaxErrğµğ¶ğ‘›\operatorname{MaxErr}(B,C)=\sqrt{n}roman_MaxErr (
italic_B , italic_C ) = square-root start_ARG italic_n end_ARG is far from
optimal. Thus the challenge is to simultaneously obtain near-optimal error and
computational efficiency.

To overcome this challenge we must impose some structure on the factors
BğµBitalic_B and Cğ¶Citalic_C that allows efficient noise generation without
significantly increasing the matrix factorization objective
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ). The three structures that have been considered in the literature
are (i) lower triangular matrices, (ii) sparse matrices, and (iii) Toeplitz
matrices â€“ i.e., constant diagonals, âˆ€i,jâ¢Ci,j=ciâˆ’jfor-
allğ‘–ğ‘—subscriptğ¶ğ‘–ğ‘—subscriptğ‘ğ‘–ğ‘—\forall i,j~{}~{}C_{i,j}=c_{i-j}âˆ€
italic_i , italic_j italic_C start_POSTSUBSCRIPT italic_i , italic_j
end_POSTSUBSCRIPT = italic_c start_POSTSUBSCRIPT italic_i - italic_j
end_POSTSUBSCRIPT for some vector cğ‘citalic_c â€“ and combinations of these
structures. We focus primarily on lower triangular Toeplitz matrices. The
streaming setting naturally corresponds to lower triangular matrices, as it
ensures that the kğ‘˜kitalic_k-th output is only a function of the first
kğ‘˜kitalic_k inputs. Adding the Toeplitz constraint has a minimal impact on
the matrix factorization objective (1.4). Furthermore, Toeplitz matrices (and
certain specializations we consider) have convenient mathematical and
algorithmic properties. See FigureÂ 2 and SectionÂ 2.2 for further discussion
about lower triangular Toeplitz factorizations versus other factorizations. We
also leverage the sparsity in the BğµBitalic_B and Cğ¶Citalic_C matrices
derived from generalizations of the binary tree aggregation mechanism to show
additional results.

###  1.1 Our Contributions

Our main theoretical result is a lower triangular Toeplitz matrix
factorization that is nearly optimal accompanied by an efficient streaming
algorithm for generating the corresponding noise.

######  Theorem 1.1 (Main Result â€“ Informal version of TheoremÂ 4.6).

For all nâ‰¥1ğ‘›1n\geq 1italic_n â‰¥ 1 and all
Î¼âˆˆ(0,1)ğœ‡01\mu\in(0,1)italic_Î¼ âˆˆ ( 0 , 1 ), there exists a lower
triangular Toeplitz matrix factorization
B,Câˆˆâ„nÃ—nğµğ¶superscriptâ„ğ‘›ğ‘›B,C\in\mathbb{R}^{n\times n}italic_B ,
italic_C âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n
end_POSTSUPERSCRIPT with the following properties.

  * â€¢

Validity: Bâ¢C=Ağµğ¶ğ´BC=Aitalic_B italic_C = italic_A, where Ağ´Aitalic_A is
the nÃ—nğ‘›ğ‘›n\times nitalic_n Ã— italic_n lower-triangular all-ones matrix.

  * â€¢

Near-optimality:
MaxErrâ¡(B,C)â‰¤ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)+Î¼,MaxErrğµğ¶ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›ğœ‡\operatorname{MaxErr}(B,C)\leq\mathsf{OptLTToe}(n)+\mu,roman_MaxErr
( italic_B , italic_C ) â‰¤ sansserif_OptLTToe ( italic_n ) + italic_Î¼ ,
where

| ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)=1+âˆ‘k=1nâˆ’1(2âˆ’2â¢kâ¢(2â¢kk))2â‰¤1+0.57722+logâ¡(n)Ï€ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›1superscriptsubscriptğ‘˜1ğ‘›1superscriptsuperscript22ğ‘˜binomial2ğ‘˜ğ‘˜210.57722ğ‘›ğœ‹\mathsf{OptLTToe}(n)=1+\sum_{k=1}^{n-1}\left(2^{-2k}{2k\choose k}\right)^{2}% \leq 1+\frac{0.57722+\log(n)}{\pi}sansserif_OptLTToe ( italic_n ) = 1 + âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( 2 start_POSTSUPERSCRIPT - 2 italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ 1 + divide start_ARG 0.57722 + roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG |   
---|---|---  
  
is the optimal value of
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) over all lower triangular Toeplitz factorizations
A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C.

  * â€¢

Efficiency: There exists a streaming algorithm that at each step kğ‘˜kitalic_k
takes as input zksubscriptğ‘§ğ‘˜z_{k}italic_z start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT and outputs (Bâ¢z)ksubscriptğµğ‘§ğ‘˜(Bz)_{k}( italic_B
italic_z ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT (or, equivalently,
(Câˆ’1â¢z)ksubscriptsuperscriptğ¶1ğ‘§ğ‘˜(C^{-1}z)_{k}( italic_C
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_z ) start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT) and runs in time and space
Oâ¢(log2â¡(n/Î¼))ğ‘‚superscript2ğ‘›ğœ‡O(\log^{2}(n/\mu))italic_O ( roman_log
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_n / italic_Î¼ ) ).

In order to ensure that the error term Î¼ğœ‡\muitalic_Î¼ in our result is
oâ¢(1)ğ‘œ1o(1)italic_o ( 1 ), we have space and time complexity
d=Î˜â¢(log2â¡n)ğ‘‘Î˜superscript2ğ‘›d=\Theta(\log^{2}n)italic_d = roman_Î˜ (
roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_n ). It is
natural to wonder whether this computational complexity can be improved. We
show that it can be improved to O~â¢(logâ¡n)~ğ‘‚ğ‘›\widetilde{O}(\log n)over~
start_ARG italic_O end_ARG ( roman_log italic_n ) at the expense of a weaker
multiplicative near-optimality guarantee for the matrix factorization
objective.

######  Theorem 1.2 (Secondary Result â€“ Informal version of TheoremÂ 6.6).

For all nâ‰¥1ğ‘›1n\geq 1italic_n â‰¥ 1, there exists a matrix factorization
B,CTâˆˆâ„nÃ—nâ€²ğµsuperscriptğ¶ğ‘‡superscriptâ„ğ‘›superscriptğ‘›â€²B,C^{T}\in\mathbb{R}^{n\times
n^{\prime}}italic_B , italic_C start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT
with nâ€²=Oâ¢(n)superscriptğ‘›â€²ğ‘‚ğ‘›n^{\prime}=O(n)italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = italic_O ( italic_n ) and the
following properties.

  * â€¢

Validity: Bâ¢C=Ağµğ¶ğ´BC=Aitalic_B italic_C = italic_A, where Ağ´Aitalic_A is
the nÃ—nğ‘›ğ‘›n\times nitalic_n Ã— italic_n lower-triangular all-ones matrix.

  * â€¢

Near-optimality:
MaxErrâ¡(B,C)â‰¤(1+oâ¢(1))â‹…ğ–®ğ—‰ğ—â¢(n),MaxErrğµğ¶â‹…1ğ‘œ1ğ–®ğ—‰ğ—ğ‘›\operatorname{MaxErr}(B,C)\leq(1+o(1))\cdot\mathsf{Opt}(n),roman_MaxErr
( italic_B , italic_C ) â‰¤ ( 1 + italic_o ( 1 ) ) â‹… sansserif_Opt (
italic_n ) , where ğ–®ğ—‰ğ—â¢(n)=logâ¡(n)Ï€Â±Oâ¢(1)ğ–®ğ—‰ğ—ğ‘›plus-or-
minusğ‘›ğœ‹ğ‘‚1\mathsf{Opt}(n)=\frac{\log(n)}{\pi}\pm O(1)sansserif_Opt (
italic_n ) = divide start_ARG roman_log ( italic_n ) end_ARG start_ARG
italic_Ï€ end_ARG Â± italic_O ( 1 ) is the optimal value of
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) over all factorizations.

  * â€¢

Efficiency: There exists a streaming algorithm that at each step kğ‘˜kitalic_k
takes as input some coordinates of zğ‘§zitalic_z (but never reads the same
coordinate more than once) and outputs (Bâ¢z)ksubscriptğµğ‘§ğ‘˜(Bz)_{k}(
italic_B italic_z ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT and runs in
space (and amortized time per iteration) O~â¢(logâ¡n)~ğ‘‚ğ‘›\widetilde{O}(\log
n)over~ start_ARG italic_O end_ARG ( roman_log italic_n ).

More generally, we can smoothly trade off between the matrix factorization
objective and computational efficiency. That is, we can interpolate between
TheoremsÂ 1.1 andÂ 1.2; see PropositionÂ 6.5 for a general statement.

TheoremÂ 1.2 does not generate a lower triangular Toeplitz factorization; in
fact it does not even produce a square factorization. It also gives a weaker
near-optimality guarantee. We leave it as an interesting open problem whether
it is possible to improve on log2â¡nsuperscript2ğ‘›\log^{2}nroman_log
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_n space complexity with a
Toeplitz factorization or with
MaxErrâ¡(B,C)â‰¤ğ–®ğ—‰ğ—â¢(n)+Oâ¢(1)MaxErrğµğ¶ğ–®ğ—‰ğ—ğ‘›ğ‘‚1\operatorname{MaxErr}(B,C)\leq\mathsf{Opt}(n)+O(1)roman_MaxErr
( italic_B , italic_C ) â‰¤ sansserif_Opt ( italic_n ) + italic_O ( 1 ).

![Refer to caption]() Figure 1:  Ratio of
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) of our RA-BLT and Opt-BLT mechanisms for different numbers of steps
nğ‘›nitalic_n and degrees dğ‘‘ditalic_d (which corresponds directly to the
space complexity) over that of the optimal Toeplitz mechanism of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant.
This illustrates that even with modest degree dğ‘‘ditalic_d, we obtain very
good MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B
, italic_C ) even for large numbers of steps nğ‘›nitalic_n. For example, Opt-
BLT with d=5ğ‘‘5d=5italic_d = 5 is within 1%percent11\%1 % of optimal for
n=107ğ‘›superscript107n=10^{7}italic_n = 10 start_POSTSUPERSCRIPT 7
end_POSTSUPERSCRIPT (we do not plot Opt-BLT for d=9ğ‘‘9d=9italic_d = 9).

#### Practical algorithms:

Since our work is directly motivated by practical considerations, we also
study the problem numerically. Specifically, we show that the method behind
TheoremÂ 1.1 yields a factorization that is indistinguishable from optimal
Toeplitz mechanism for practical purposes, but which has a highly efficient
procedure for generating the noise. FigureÂ 1 shows the ratio of
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) for our algorithm over the optimal
ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›\mathsf{OptLTToe}(n)sansserif_OptLTToe
( italic_n ).

To prove TheoremÂ 1.1 we provide closed-form parameters for the matrix
factorization. This is already reasonably practical, but we further optimize
the parameters numerically to obtain even better algorithms. In order to
optimize the matrix factorization we (i) choose an appropriate
parameterization for the class of factorizations B,Cğµğ¶B,Citalic_B , italic_C
that we consider, (ii) give an efficiently computable expression for the
objective MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr (
italic_B , italic_C ) in terms of this parameterization, and (iii) show that
this expression is differentiable. This allows us to numerically optimize our
factorization. While we do not prove that this optimization procedure
converges, in practice it yields significantly better solutions than the
closed-form parameters of TheoremÂ 1.1

To show the power of our approach, in SectionÂ 8, we show that even with
d=1ğ‘‘1d=1italic_d = 1 buffer, we can asymptotically attain
MaxErrâ¡(B,C)=Oâ¢(n1/6)MaxErrğµğ¶ğ‘‚superscriptğ‘›16\operatorname{MaxErr}(B,C)=O(n^{1/6})roman_MaxErr
( italic_B , italic_C ) = italic_O ( italic_n start_POSTSUPERSCRIPT 1 / 6
end_POSTSUPERSCRIPT ).

#### Lower bounds:

In SectionÂ 2.2 we prove a lower bound that exactly characterizes
ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›\mathsf{OptLTToe}(n)sansserif_OptLTToe
( italic_n ). Specifically, we show that the lower triangular Toeplitz
factorization of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant
is precisely optimal for this class.

Further, in SectionÂ 7, we develop _numerical_ lower bounds on the objective
of any matrix factorization for various classes of matrices for any fixed size
nğ‘›nitalic_n. In particular, we give lower bounds for arbitrary lower
triangular matrices, arbitrary Toeplitz matrices, and Toeplitz matrices that
are realized from constant degree BLTs.

###  1.2 Our Algorithms & Techniques

####  BLTs: Buffered Linear Toeplitz Matrices (Â§3):

The starting point for our main result is the lower triangular Toeplitz
factorization of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant,
which we show is in fact optimal in SectionÂ 2.2. This factorization is given
by
Bi,j=Ci,j=fiâˆ’jsubscriptğµğ‘–ğ‘—subscriptğ¶ğ‘–ğ‘—subscriptğ‘“ğ‘–ğ‘—B_{i,j}=C_{i,j}=f_{i-j}italic_B
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = italic_C
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = italic_f
start_POSTSUBSCRIPT italic_i - italic_j end_POSTSUBSCRIPT where the sequence
f0,f1,â‹¯subscriptğ‘“0subscriptğ‘“1â‹¯f_{0},f_{1},\cdotsitalic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_f start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT , â‹¯ is the coefficients of a Taylor series:

| 11âˆ’x=f0+f1â¢x+f2â¢x2+f3â¢x3+â‹¯.11ğ‘¥subscriptğ‘“0subscriptğ‘“1ğ‘¥subscriptğ‘“2superscriptğ‘¥2subscriptğ‘“3superscriptğ‘¥3â‹¯\frac{1}{\sqrt{1-x}}=f_{0}+f_{1}x+f_{2}x^{2}+f_{3}x^{3}+\cdots.divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x end_ARG end_ARG = italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT + italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_x + italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + italic_f start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT 3 end_POSTSUPERSCRIPT + â‹¯ . |  | (1.6)  
---|---|---|---  
  
This sequence satisfies the recurrence
fk=(1âˆ’1/2â¢k)â‹…fkâˆ’1subscriptğ‘“ğ‘˜â‹…112ğ‘˜subscriptğ‘“ğ‘˜1f_{k}=(1-1/2k)\cdot
f_{k-1}italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = ( 1 - 1 / 2
italic_k ) â‹… italic_f start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT for
kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1 with f0=1subscriptğ‘“01f_{0}=1italic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = 1. Our task is to compute
(Bâ¢z)k=âˆ‘j=0kBk,jâ‹…zj=âˆ‘j=0kfkâˆ’jâ‹…zjsubscriptğµğ‘§ğ‘˜superscriptsubscriptğ‘—0ğ‘˜â‹…subscriptğµğ‘˜ğ‘—subscriptğ‘§ğ‘—superscriptsubscriptğ‘—0ğ‘˜â‹…subscriptğ‘“ğ‘˜ğ‘—subscriptğ‘§ğ‘—(Bz)_{k}=\sum_{j=0}^{k}B_{k,j}\cdot
z_{j}=\sum_{j=0}^{k}f_{k-j}\cdot z_{j}( italic_B italic_z )
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT
italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT italic_k , italic_j
end_POSTSUBSCRIPT â‹… italic_z start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT
= âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_k end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k - italic_j
end_POSTSUBSCRIPT â‹… italic_z start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT
in a streaming fashion for
kâˆˆ[n]â‰”{0,1,â‹¯,nâˆ’1}ğ‘˜delimited-[]ğ‘›â‰”01â‹¯ğ‘›1k\in[n]\coloneqq\\{0,1,\cdots,n-1\\}italic_k
âˆˆ [ italic_n ] â‰” { 0 , 1 , â‹¯ , italic_n - 1 }.666We zero-index
sequences, vectors, and matrices throughout. See TableÂ 1 for a summary of
symbols and notation. Unfortunately, the factorization of Eq.Â 1.6 does not
seem to admit an efficient sampling procedure.

Suppose the sequence instead satisfied a linear recurrence
fk=qâ‹…fkâˆ’1subscriptğ‘“ğ‘˜â‹…ğ‘subscriptğ‘“ğ‘˜1f_{k}=q\cdot f_{k-1}italic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_q â‹… italic_f
start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT for all kâ‰¥1ğ‘˜1k\geq
1italic_k â‰¥ 1. Then

| (Bâ¢z)k=âˆ‘j=0kfkâˆ’jâ‹…zj=f0â‹…zk+âˆ‘j=0kâˆ’1(qâ‹…fkâˆ’jâˆ’1)â‹…zj=f0â‹…zk+qâ‹…(Bâ¢z)kâˆ’1.subscriptğµğ‘§ğ‘˜superscriptsubscriptğ‘—0ğ‘˜â‹…subscriptğ‘“ğ‘˜ğ‘—subscriptğ‘§ğ‘—â‹…subscriptğ‘“0subscriptğ‘§ğ‘˜superscriptsubscriptğ‘—0ğ‘˜1â‹…â‹…ğ‘subscriptğ‘“ğ‘˜ğ‘—1subscriptğ‘§ğ‘—â‹…subscriptğ‘“0subscriptğ‘§ğ‘˜â‹…ğ‘subscriptğµğ‘§ğ‘˜1(Bz)_{k}=\sum_{j=0}^{k}f_{k-j}\cdot z_{j}=f_{0}\cdot z_{k}+\sum_{j=0}^{k-1}(q% \cdot f_{k-j-1})\cdot z_{j}=f_{0}\cdot z_{k}+q\cdot(Bz)_{k-1}.( italic_B italic_z ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k - italic_j end_POSTSUBSCRIPT â‹… italic_z start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT â‹… italic_z start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT ( italic_q â‹… italic_f start_POSTSUBSCRIPT italic_k - italic_j - 1 end_POSTSUBSCRIPT ) â‹… italic_z start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT â‹… italic_z start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT + italic_q â‹… ( italic_B italic_z ) start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT . |  | (1.7)  
---|---|---|---  
  
This equation gives us an efficient algorithm: Given the previous output
(Bâ¢z)kâˆ’1subscriptğµğ‘§ğ‘˜1(Bz)_{k-1}( italic_B italic_z )
start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT and the current input
zksubscriptğ‘§ğ‘˜z_{k}italic_z start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT,
we can compute the current output (Bâ¢z)ksubscriptğµğ‘§ğ‘˜(Bz)_{k}( italic_B
italic_z ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT. The memory
requirement of this algorithm is simply to store the previous output in a
single memory buffer.

Next suppose the sequence instead satisfied a linear recurrence of the form

| fk=q1â‹…fkâˆ’1+q2â‹…fkâˆ’2+â‹¯+qdâ‹…fkâˆ’d.subscriptğ‘“ğ‘˜â‹…subscriptğ‘1subscriptğ‘“ğ‘˜1â‹…subscriptğ‘2subscriptğ‘“ğ‘˜2â‹¯â‹…subscriptğ‘ğ‘‘subscriptğ‘“ğ‘˜ğ‘‘f_{k}=q_{1}\cdot f_{k-1}+q_{2}\cdot f_{k-2}+\cdots+q_{d}\cdot f_{k-d}.italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â‹… italic_f start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT + italic_q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT â‹… italic_f start_POSTSUBSCRIPT italic_k - 2 end_POSTSUBSCRIPT + â‹¯ + italic_q start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT â‹… italic_f start_POSTSUBSCRIPT italic_k - italic_d end_POSTSUBSCRIPT . |  | (1.8)  
---|---|---|---  
  
As we explain next, this recurrence gives an algorithm where the memory
requirement is to only store dğ‘‘ditalic_d memory buffers.

The recurrence
fk=qâ¢fkâˆ’1subscriptğ‘“ğ‘˜ğ‘subscriptğ‘“ğ‘˜1f_{k}=qf_{k-1}italic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_q italic_f
start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT implies the closed form
fk=qkâ¢f0subscriptğ‘“ğ‘˜superscriptğ‘ğ‘˜subscriptğ‘“0f_{k}=q^{k}f_{0}italic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_q
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT. Similarly, the recurrence in
EquationÂ 1.8 implies a closed form expression
fk=uTâ¢Wkâ¢vsubscriptğ‘“ğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£f_{k}=u^{T}W^{k}vitalic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v where
Wâˆˆâ„dÃ—dğ‘Šsuperscriptâ„ğ‘‘ğ‘‘W\in\mathbb{R}^{d\times d}italic_W âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_d end_POSTSUPERSCRIPT is
a matrix and u,vâˆˆâ„dğ‘¢ğ‘£superscriptâ„ğ‘‘u,v\in\mathbb{R}^{d}italic_u ,
italic_v âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT
are vectors. This closed form is what we use in SectionÂ 3.3 for our
AlgorithmÂ 1. Specifically, we can extend EquationÂ 1.7 to this matrix-power
closed form

| (Bâ¢z)ksubscriptğµğ‘§ğ‘˜\displaystyle(Bz)_{k}( italic_B italic_z ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | =âˆ‘j=0kfkâˆ’jâ‹…zj=âˆ‘j=0kuTâ¢Wkâˆ’jâ¢vâ‹…zj=uTâ¢Sk+1absentsuperscriptsubscriptğ‘—0ğ‘˜â‹…subscriptğ‘“ğ‘˜ğ‘—subscriptğ‘§ğ‘—superscriptsubscriptğ‘—0ğ‘˜â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘—ğ‘£subscriptğ‘§ğ‘—superscriptğ‘¢ğ‘‡subscriptğ‘†ğ‘˜1\displaystyle=\sum_{j=0}^{k}f_{k-j}\cdot z_{j}=\sum_{j=0}^{k}u^{T}W^{k-j}v% \cdot z_{j}=u^{T}S_{k+1}= âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k - italic_j end_POSTSUBSCRIPT â‹… italic_z start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k - italic_j end_POSTSUPERSCRIPT italic_v â‹… italic_z start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_S start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT |   
---|---|---|---  
  
for a suitable state vector
Skâˆˆâ„dsubscriptğ‘†ğ‘˜superscriptâ„ğ‘‘S_{k}\in\mathbb{R}^{d}italic_S
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT, stored in memory. Namely,
we initialize S0=0subscriptğ‘†00S_{0}=0italic_S start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT = 0 and, at each iteration, our algorithm updates

| Sk+1=vâ‹…zk+Wâ¢Sksubscriptğ‘†ğ‘˜1â‹…ğ‘£subscriptğ‘§ğ‘˜ğ‘Šsubscriptğ‘†ğ‘˜S_{k+1}=v\cdot z_{k}+WS_{k}italic_S start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT = italic_v â‹… italic_z start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT + italic_W italic_S start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT |   
---|---|---  
  
and then outputs
(Bâ¢z)k=uTâ¢Sk+1subscriptğµğ‘§ğ‘˜superscriptğ‘¢ğ‘‡subscriptğ‘†ğ‘˜1(Bz)_{k}=u^{T}S_{k+1}(
italic_B italic_z ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_S
start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT. We refer to the entries of
Sksubscriptğ‘†ğ‘˜S_{k}italic_S start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT
as the dğ‘‘ditalic_d _buffers_ of our algorithm.777Recall that while we treat
these as scalars here, in practical ML applications for example, each of these
has size equal to the number of parameters of the model being trained, e.g.
possibly m>109ğ‘šsuperscript109m>10^{9}italic_m > 10 start_POSTSUPERSCRIPT 9
end_POSTSUPERSCRIPT, so keeping dğ‘‘ditalic_d to a small constant is critical.
The updates to the buffers on each step are an arbitrary linear function of
the previous stepâ€™s buffers (Wâ¢Skğ‘Šsubscriptğ‘†ğ‘˜WS_{k}italic_W italic_S
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT) and the current input
(vâ¢zkğ‘£subscriptğ‘§ğ‘˜vz_{k}italic_v italic_z start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT), and the output on each step is an arbitrary linear
combination of the buffers
(uTâ¢Sk+1superscriptğ‘¢ğ‘‡subscriptğ‘†ğ‘˜1u^{T}S_{k+1}italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_S
start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT). Hence, we term this class
â€œBuffered Linear Toeplitz matricesâ€ (BLTs). We overload the acronym and
write BLTs as a shorthand encompassing matrices, factorizations, and
mechanisms.

Unfortunately, the optimal factorization [fichtenberger2022constant] does
_not_ satisfy a recurrence like Eq.Â 1.8 and cannot be expressed as a BLT.
Hence, our approach is to _approximate_ the optimal factorization using BLTs.

#### Designing BLTs via rational function approximation (Â§4):

If we view the Toeplitz sequence
f0,f1,â€¦subscriptğ‘“0subscriptğ‘“1â€¦f_{0},f_{1},\dotsitalic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_f start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT , â€¦ as being defined by an ordinary generating
function888We use the terms generating function, ordinary generating function,
and Taylor series interchangeably; the generating function view of
fğ‘“fitalic_f emphasizes the sequence being generated and requires (only) a
formal power series, while the Taylor series view emphasizes fğ‘“fitalic_f is
a real or complex function. As long as fğ‘“fitalic_f is analytic in a non-
empty open neighborhood of zero, no ambiguity is introduced by these two
views, see e.g. Thm. 2.8 (Transfer principle) of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitekauers11concrete.
fğ‘“fitalic_f as in EquationÂ 1.6, it turns out that satisfying a linear
recurrence as in EquationÂ 1.8 is equivalent to the function being rational
(i.e., fâ¢(x)=pâ¢(x)/qâ¢(x)ğ‘“ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥f(x)=p(x)/q(x)italic_f ( italic_x )
= italic_p ( italic_x ) / italic_q ( italic_x ) for polynomials pğ‘pitalic_p
and qğ‘qitalic_q) of degree â‰¤dabsentğ‘‘\leq dâ‰¤ italic_d. (This equivalence
is analogous to the fact that a real number is rational if and only if its
decimal representation is repeating.)

This equivalence also suggests our first approach to designing BLTs: we need a
low-degree rational approximation to the function
fâ¢(x)=1/1âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)={1}/{\sqrt{1-x}}italic_f ( italic_x ) = 1 /
square-root start_ARG 1 - italic_x end_ARG.

We appeal to known results in approximation theory. Specifically, it is known that the function xâ†¦1âˆ’xmaps-toğ‘¥1ğ‘¥x\mapsto\sqrt{1-x}italic_x â†¦ square-root start_ARG 1 - italic_x end_ARG can be uniformly approximated on the unit complex disc {xâˆˆâ„‚:|x|â‰¤1}conditional-setğ‘¥â„‚ğ‘¥1\\{x\in\mathbb{C}:|x|\leq 1\\}{ italic_x âˆˆ blackboard_C : | italic_x | â‰¤ 1 } with error Î·>0ğœ‚0\eta>0italic_Î· > 0 by a rational function of degree d=Oâ¢(log2â¡(1/Î·))ğ‘‘ğ‘‚superscript21ğœ‚d=O(\log^{2}(1/\eta))italic_d = italic_O ( roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( 1 / italic_Î· ) )Â [Newman64, GopalT19]. That is, there exists a rational function rğ‘Ÿritalic_r of degree â‰¤dabsentğ‘‘\leq dâ‰¤ italic_d, such that |râ¢(x)âˆ’1âˆ’x|â‰¤Î·ğ‘Ÿğ‘¥1ğ‘¥ğœ‚|r(x)-\sqrt{1-x}|\leq\eta| italic_r ( italic_x ) - square-root start_ARG 1 - italic_x end_ARG | â‰¤ italic_Î· for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1.

It â€œonlyâ€ remains to translate this approximation guarantee back to the
matrix factorization objective. Parsevalâ€™s identity allows us to bound the
difference between the sequences of Taylor coefficients in terms of an
integral: Suppose
fâ¢(x)=âˆ‘k=0âˆfkâ¢xkğ‘“ğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘“ğ‘˜superscriptğ‘¥ğ‘˜f(x)=\sum_{k=0}^{\infty}f_{k}x^{k}italic_f
( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT and
f~â¢(x)=âˆ‘k=0âˆf~kâ¢xk~ğ‘“ğ‘¥superscriptsubscriptğ‘˜0subscript~ğ‘“ğ‘˜superscriptğ‘¥ğ‘˜\widetilde{f}(x)=\sum_{k=0}^{\infty}\widetilde{f}_{k}x^{k}over~
start_ARG italic_f end_ARG ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT over~ start_ARG
italic_f end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT. Then

| âˆ‘k=0âˆ|fkâˆ’f~k|2=12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|fâ¢(xâ¢(Î¸))âˆ’f~â¢(xâ¢(Î¸))|2â¢dÎ¸â¢Â whereÂ â¢xâ¢(Î¸)=expâ¡(âˆ’1â¢Î¸).superscriptsubscriptğ‘˜0superscriptsubscriptğ‘“ğ‘˜subscript~ğ‘“ğ‘˜212ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘“ğ‘¥ğœƒ~ğ‘“ğ‘¥ğœƒ2differential-dğœƒÂ whereÂ ğ‘¥ğœƒ1ğœƒ\sum_{k=0}^{\infty}|f_{k}-\widetilde{f}_{k}|^{2}=\frac{1}{2\pi}\int_{-\pi}^{% \pi}\left|f(x(\theta))-\widetilde{f}(x(\theta))\right|^{2}\,\mathrm{d}\theta\,% ~{}\text{ where }~{}x(\theta)=\exp(\sqrt{-1}\theta).âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - over~ start_ARG italic_f end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | italic_f ( italic_x ( italic_Î¸ ) ) - over~ start_ARG italic_f end_ARG ( italic_x ( italic_Î¸ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ where italic_x ( italic_Î¸ ) = roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ ) . |  | (1.9)  
---|---|---|---  
  
In our case, fâ¢(x)=1/1âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)={1}/{\sqrt{1-x}}italic_f ( italic_x ) = 1 / square-root start_ARG 1 - italic_x end_ARG corresponds to the optimal lower triangular Toeplitz factorization while f~â¢(x)~ğ‘“ğ‘¥\widetilde{f}(x)over~ start_ARG italic_f end_ARG ( italic_x ) is our rational approximation â€“ either f~â¢(x)=1/râ¢(x)~ğ‘“ğ‘¥1ğ‘Ÿğ‘¥\widetilde{f}(x)=1/r(x)over~ start_ARG italic_f end_ARG ( italic_x ) = 1 / italic_r ( italic_x ) or f~â¢(x)=râ¢(x)/(1âˆ’x)~ğ‘“ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥\widetilde{f}(x)=r(x)/(1-x)over~ start_ARG italic_f end_ARG ( italic_x ) = italic_r ( italic_x ) / ( 1 - italic_x ), where râ¢(x)â‰ˆ1âˆ’xğ‘Ÿğ‘¥1ğ‘¥r(x)\approx\sqrt{1-x}italic_r ( italic_x ) â‰ˆ square-root start_ARG 1 - italic_x end_ARG. We are interested in a finite sum âˆ‘k=0nâˆ’1|fkâˆ’f~k|2superscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘“ğ‘˜subscript~ğ‘“ğ‘˜2\sum_{k=0}^{n-1}|f_{k}-\widetilde{f}_{k}|^{2}âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT | italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - over~ start_ARG italic_f end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT, rather than the infinite sum in EquationÂ 1.9 (which does not converge in our setting). Thus we consider a weighted version of Parsevalâ€™s identity where the integral goes around a circle in the complex plane centered at 00 with radius eâˆ’1/2â¢nsuperscriptğ‘’12ğ‘›e^{-1/2n}italic_e start_POSTSUPERSCRIPT - 1 / 2 italic_n end_POSTSUPERSCRIPT. Note that we require the approximation guarantee to hold on the complex plane, not just the real line. Once we have this bound on âˆ‘k=0nâˆ’1|fkâˆ’f~k|2superscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘“ğ‘˜subscript~ğ‘“ğ‘˜2\sum_{k=0}^{n-1}|f_{k}-\widetilde{f}_{k}|^{2}âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT | italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - over~ start_ARG italic_f end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT, the near optimality guarantee of TheoremÂ 1.1 follows from the triangle inequality.

The time and space requirement of TheoremÂ 1.1 is
Oâ¢(log2â¡n)ğ‘‚superscript2ğ‘›O(\log^{2}n)italic_O ( roman_log
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_n ). This dependence arises
from the degree of the rational approximation. A degree at least
Î©â¢(log2â¡(1/Î·))Î©superscript21ğœ‚\Omega(\log^{2}(1/\eta))roman_Î© (
roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( 1 / italic_Î· ) ) is
necessary for approximating 1âˆ’x1ğ‘¥\sqrt{1-x}square-root start_ARG 1 -
italic_x end_ARG with error â‰¤Î·absentğœ‚\leq\etaâ‰¤ italic_Î· even for real
values xâˆˆ[âˆ’1,1]ğ‘¥11x\in[-1,1]italic_x âˆˆ [ - 1 , 1 ] [Newman64]. Thus,
unless we can exploit some slack in our analysis, it seems we require
different techniques to bring the space down to Oâ¢(logâ¡n)ğ‘‚ğ‘›O(\log
n)italic_O ( roman_log italic_n ).

The proof of TheoremÂ 1.1 gives an explicit rational function approximation,
which we can directly convert into a matrix factorization and feed into our
algorithm. We term the BLTs coming from this approach RA-BLTs, with each
choice of the degree dğ‘‘ditalic_d leading to a different (and successively
better) approximation to the optimal Toeplitz factorization.

#### Designing BLTs via direct optimization (Â§5):

Recall that our goal is to minimize
MaxErrâ¡(B,C)=MaxErrâ¡(Aâ¢Câˆ’1,C)MaxErrğµğ¶MaxErrğ´superscriptğ¶1ğ¶\operatorname{MaxErr}(B,C)=\operatorname{MaxErr}(AC^{-1},C)roman_MaxErr
( italic_B , italic_C ) = roman_MaxErr ( italic_A italic_C
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT , italic_C ). In order to ensure
computational efficiency, we restrict Cğ¶Citalic_C to the class of BLTs. Using
approximation theory we can directly construct a near-optimal Cğ¶Citalic_C.
However, we can also approach this as an optimization problem and optimize the
BLT parameters that define Cğ¶Citalic_C numerically.

This optimization is far from straightforward. The class of BLT matrices can
be parameterized in multiple ways. Converting the parameters for Cğ¶Citalic_C
into
MaxErrâ¡(Aâ¢Câˆ’1,C)MaxErrğ´superscriptğ¶1ğ¶\operatorname{MaxErr}(AC^{-1},C)roman_MaxErr
( italic_A italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT , italic_C )
is nontrivial to compute â€“ much less optimize â€“ when the size
nğ‘›nitalic_n is large. Nevertheless, the class of BLTs is algebraically
closed under multiplication and addition, and this structure combined with the
connection to rational generating functions, provides powerful tools for
reasoning about them.

We give a parameterization for the class of BLTs that allows us to efficiently
compute MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr in time practically
independent of the size nğ‘›nitalic_n, specifically
ğ’ªâ¢(polyâ¡(d)â¢logâ¡n)ğ’ªpolyğ‘‘ğ‘›\mathcal{O}(\operatorname{poly}(d)\log
n)caligraphic_O ( roman_poly ( italic_d ) roman_log italic_n ), and also to
compute gradients. Being able to compute gradients allows us to optimize
MaxErrâ¡(Aâ¢Câˆ’1,C)MaxErrğ´superscriptğ¶1ğ¶\operatorname{MaxErr}(AC^{-1},C)roman_MaxErr
( italic_A italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT , italic_C )
numerically.

The first challenge is that we need to be able to effectively parameterize
both Cğ¶Citalic_C and Aâ¢Câˆ’1ğ´superscriptğ¶1AC^{-1}italic_A italic_C
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT. If Cğ¶Citalic_C is a BLT, then,
as discussed above, its Toeplitz coefficients are given by the Taylor series
for a rational generating function
câ¢(x)=pâ¢(x)/qâ¢(x)ğ‘ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥c(x)=p(x)/q(x)italic_c ( italic_x ) =
italic_p ( italic_x ) / italic_q ( italic_x ) for polynomials pğ‘pitalic_p and
qğ‘qitalic_q. Further, these coefficients have a simple closed-form expression
given by LemmaÂ 3.2 (see also Eq.Â 5.2). Of course
1/câ¢(x)=qâ¢(x)/pâ¢(x)1ğ‘ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥1/c(x)=q(x)/p(x)1 / italic_c ( italic_x
) = italic_q ( italic_x ) / italic_p ( italic_x ) is also a rational function,
and it in fact generates the Toeplitz coefficients of
Câˆ’1superscriptğ¶1C^{-1}italic_C start_POSTSUPERSCRIPT - 1
end_POSTSUPERSCRIPT (LemmaÂ 3.1), and so Câˆ’1superscriptğ¶1C^{-1}italic_C
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT is also a BLT. The lower-
triangular matrix of ones, Ağ´Aitalic_A, is trivially a BLT, and so LemmaÂ 3.1
also implies B=Aâ¢Câˆ’1ğµğ´superscriptğ¶1B=AC^{-1}italic_B = italic_A italic_C
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT is a BLT.

In SectionÂ 5, LemmaÂ 5.2 shows that given a BLT Cğ¶Citalic_C, we can
(explicitly and in closed-form) derive the BLT parameters of
Câˆ’1superscriptğ¶1C^{-1}italic_C start_POSTSUPERSCRIPT - 1
end_POSTSUPERSCRIPT, and hence a closed form for its Toeplitz
coefficients.999More precisely, LemmaÂ 5.2 uses a parameterization of
pğ‘pitalic_p and qğ‘qitalic_q which leads to closed forms for both
Cğ¶Citalic_C and Câˆ’1superscriptğ¶1C^{-1}italic_C start_POSTSUPERSCRIPT - 1
end_POSTSUPERSCRIPT. Using these closed-form expressions for the Toeplitz
coefficients enables us to directly compute
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) for B,Câˆˆâ„nÃ—nğµğ¶superscriptâ„ğ‘›ğ‘›B,C\in\mathbb{R}^{n\times
n}italic_B , italic_C âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_n end_POSTSUPERSCRIPT in time
ğ’ªâ¢(polyâ¡(d)â¢logâ¡n)ğ’ªpolyğ‘‘ğ‘›\mathcal{O}(\operatorname{poly}(d)\log
n)caligraphic_O ( roman_poly ( italic_d ) roman_log italic_n ), see LemmasÂ
5.3 andÂ 5.4.

This is immediately useful, for example in FigureÂ 2 allowing us to plot the
performance of our mechanisms for nğ‘›nitalic_n up to
108superscript10810^{8}10 start_POSTSUPERSCRIPT 8 end_POSTSUPERSCRIPT using
only a few seconds of computer time.101010We could have in fact scaled the
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr calculations for our mechanisms
to arbitrary nğ‘›nitalic_n; the bottleneck is in the computation of the exact
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr for
\parencitefichtenberger2022constant, which requires time
ğ’ªâ¢(n)ğ’ªğ‘›\mathcal{O}(n)caligraphic_O ( italic_n ).

More importantly, however, SectionÂ 5 shows computing
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) is a differentiable function of the parameters of the BLTs
BğµBitalic_B and Cğ¶Citalic_C, and hence we can use a gradient-based
optimization method such as L-BFGS to directly minimize
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr targeting a specific number of
steps nğ‘›nitalic_n, where BğµBitalic_B and Cğ¶Citalic_C are BLTâ¢sBLTğ‘
{\texttt{BLT}}sBLT italic_s with dğ‘‘ditalic_d buffers defined by 2â¢d2ğ‘‘2d2
italic_d parameters. We term these Opt-BLT mechanisms, and they perform
extremely well in practice. For example, for
n=107ğ‘›superscript107n=10^{7}italic_n = 10 start_POSTSUPERSCRIPT 7
end_POSTSUPERSCRIPT, a Opt-BLTâ¢(d=4)Opt-BLTğ‘‘4\text{{Opt-
BLT}}(d\\!=\\!4)Opt-BLT ( italic_d = 4 ) has
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr that is
1.032Ã—1.032\\!\times1.032 Ã— that of the optimal Toeplitz factorization
\parencitefichtenberger2022constant, and Opt-BLTâ¢(d=7)Opt-BLTğ‘‘7\text{{Opt-
BLT}}(d\\!=\\!7)Opt-BLT ( italic_d = 7 ) is 1.001Ã—1.001\\!\times1.001 Ã—
optimal; for smaller nğ‘›nitalic_n the results are even better, for example
for n=104ğ‘›superscript104n=10^{4}italic_n = 10 start_POSTSUPERSCRIPT 4
end_POSTSUPERSCRIPT, Opt-BLTâ¢(d=4)Opt-BLTğ‘‘4\text{{Opt-BLT}}(d\\!=\\!4)Opt-
BLT ( italic_d = 4 ) achieves 1.001Ã—1.001\\!\times1.001 Ã— optimal. FigureÂ 2
gives more complete results.

#### Generalizations of the binary tree mechanism (Â§6):

The starting point for TheoremÂ 1.2 is the binary tree mechanism of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textciteDwork-
continual,CSS11-continual. The binary tree mechanism can be viewed as a
recursive construction of a matrix factorization. A recursion of depth
â„“â„“\ellroman_â„“ yields a matrix factorization of size
n=2â„“ğ‘›superscript2â„“n=2^{\ell}italic_n = 2 start_POSTSUPERSCRIPT roman_â„“
end_POSTSUPERSCRIPT and an algorithm running in time and space
Oâ¢(â„“)ğ‘‚â„“O(\ell)italic_O ( roman_â„“ ). The binary tree mechanism does
not produce a Toeplitz or square matrix factorization; the structure that it
relies on for computational efficiency is sparsity. The matrix factorization
objective MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr (
italic_B , italic_C ) for this construction is Oâ¢(logâ¡n)ğ‘‚ğ‘›O(\log
n)italic_O ( roman_log italic_n ) â€“ that is, it is within a constant factor
of optimal. Specifically, the binary tree mechanism is asymptotically a factor
of Ï€logâ¡2â‰ˆ4.5ğœ‹24.5\frac{\pi}{\log 2}\approx 4.5divide start_ARG
italic_Ï€ end_ARG start_ARG roman_log 2 end_ARG â‰ˆ 4.5 from optimal. This
factor is significant in practice, as shown in FigureÂ 2.

We combine the binary tree mechanismâ€™s recursive approach with TheoremÂ 1.1
to get the best of both worlds â€“ near-optimal constants and
O~â¢(logâ¡n)~ğ‘‚ğ‘›\widetilde{O}(\log n)over~ start_ARG italic_O end_ARG (
roman_log italic_n ) space. This proves TheoremÂ 1.2.

We illustrate one step of the recursive construction using the following
example for size n=6ğ‘›6n=6italic_n = 6. We can decompose the 6Ã—6666\times 66
Ã— 6 all-ones lower triangular matrix A(6)superscriptğ´6A^{(6)}italic_A
start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT into a sum of expressions
involving a 2Ã—2222\times 22 Ã— 2 all-ones lower triangular matrix
A(2)superscriptğ´2A^{(2)}italic_A start_POSTSUPERSCRIPT ( 2 )
end_POSTSUPERSCRIPT and a 3Ã—3333\times 33 Ã— 3 all-ones lower triangular
matrix A(3)superscriptğ´3A^{(3)}italic_A start_POSTSUPERSCRIPT ( 3 )
end_POSTSUPERSCRIPT:

| A(6)=(100000110000111000111100111110111111)superscriptğ´6100000110000111000111100111110111111\displaystyle A^{(6)}=\left(\begin{array}[]{cccccc}1&0&0&0&0&0\\\ 1&1&0&0&0&0\\\ 1&1&1&0&0&0\\\ 1&1&1&1&0&0\\\ 1&1&1&1&1&0\\\ 1&1&1&1&1&1\end{array}\right)italic_A start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) | =(100000110000001000001100000010000011)+(000000000000110000110000111100111100)absent100000110000001000001100000010000011000000000000110000110000111100111100\displaystyle=\left(\begin{array}[]{cccccc}1&0&0&0&0&0\\\ 1&1&0&0&0&0\\\ 0&0&1&0&0&0\\\ 0&0&1&1&0&0\\\ 0&0&0&0&1&0\\\ 0&0&0&0&1&1\end{array}\right)+\left(\begin{array}[]{cccccc}0&0&0&0&0&0\\\ 0&0&0&0&0&0\\\ 1&1&0&0&0&0\\\ 1&1&0&0&0&0\\\ 1&1&1&1&0&0\\\ 1&1&1&1&0&0\\\ \end{array}\right)= ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) + ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) |  | (1.28)  
---|---|---|---|---  
|  | =(100010001)âŠ—(1011)+(000100110)âŠ—(1111)absenttensor-product1000100011011tensor-product0001001101111\displaystyle=\left(\begin{array}[]{ccc}1&0&0\\\ 0&1&0\\\ 0&0&1\end{array}\right)\otimes\left(\begin{array}[]{cc}1&0\\\ 1&1\end{array}\right)+\left(\begin{array}[]{ccc}0&0&0\\\ 1&0&0\\\ 1&1&0\end{array}\right)\otimes\left(\begin{array}[]{cc}1&1\\\ 1&1\end{array}\right)= ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) âŠ— ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) + ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) âŠ— ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) |  | (1.39)  
|  | =IâŠ—A(2)+(S(3)â¢A(3))âŠ—(ğŸğŸT),absenttensor-productğ¼superscriptğ´2tensor-productsuperscriptğ‘†3superscriptğ´3superscript11ğ‘‡\displaystyle=I\otimes A^{(2)}+\left(S^{(3)}A^{(3)}\right)\otimes\left(\mathbf% {1}\mathbf{1}^{T}\right),= italic_I âŠ— italic_A start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT + ( italic_S start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT italic_A start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT ) âŠ— ( bold_11 start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) , |   
  
where âŠ—tensor-product\otimesâŠ— denotes the Kronecker product,111111A key
property of the Kronecker product is that
(Aâ‹…B)âŠ—(Câ‹…D)=(AâŠ—C)â‹…(BâŠ—D)tensor-productâ‹…ğ´ğµâ‹…ğ¶ğ·â‹…tensor-
productğ´ğ¶tensor-productğµğ·(A\cdot B)\otimes(C\cdot D)=(A\otimes
C)\cdot(B\otimes D)( italic_A â‹… italic_B ) âŠ— ( italic_C â‹… italic_D ) = (
italic_A âŠ— italic_C ) â‹… ( italic_B âŠ— italic_D ). Iğ¼Iitalic_I is the
identity matrix, ğŸ1\mathbf{1}bold_1 is the all-ones vector, and
S(3)=(000100010)superscriptğ‘†3000100010S^{(3)}=\left(\begin{array}[]{ccc}0&0&0\\\
1&0&0\\\ 0&1&0\end{array}\right)italic_S start_POSTSUPERSCRIPT ( 3 )
end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL
0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL
start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0
end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) is a
non-cyclic shift matrix. EquationÂ 1.28 can be used to take factorizations of
size 2222 and 3333 and combine them into a factorization of size 6666. Namely,
if
A(2)=B(2)â¢C(2)superscriptğ´2superscriptğµ2superscriptğ¶2A^{(2)}=B^{(2)}C^{(2)}italic_A
start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT = italic_B
start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT italic_C start_POSTSUPERSCRIPT
( 2 ) end_POSTSUPERSCRIPT and
A(3)=B(3)â¢C(3)superscriptğ´3superscriptğµ3superscriptğ¶3A^{(3)}=B^{(3)}C^{(3)}italic_A
start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT = italic_B
start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT italic_C start_POSTSUPERSCRIPT
( 3 ) end_POSTSUPERSCRIPT, then

| A(6)superscriptğ´6\displaystyle A^{(6)}italic_A start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT | =IâŠ—A(2)+(S(3)â¢A(3))âŠ—(ğŸğŸT)absenttensor-productğ¼superscriptğ´2tensor-productsuperscriptğ‘†3superscriptğ´3superscript11ğ‘‡\displaystyle=I\otimes A^{(2)}+\left(S^{(3)}A^{(3)}\right)\otimes\left(\mathbf% {1}\mathbf{1}^{T}\right)= italic_I âŠ— italic_A start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT + ( italic_S start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT italic_A start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT ) âŠ— ( bold_11 start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) |  | (Eq.Â 1.28)  
---|---|---|---|---  
|  | =(Iâ‹…I)âŠ—(B(2)â‹…C(2))+(S(3)â¢B(3)â‹…C(3))âŠ—(ğŸâ‹…ğŸT)absenttensor-productâ‹…ğ¼ğ¼â‹…superscriptğµ2superscriptğ¶2tensor-productâ‹…superscriptğ‘†3superscriptğµ3superscriptğ¶3â‹…1superscript1ğ‘‡\displaystyle=(I\cdot I)\otimes(B^{(2)}\cdot C^{(2)})+\left(S^{(3)}B^{(3)}% \cdot C^{(3)}\right)\otimes\left(\mathbf{1}\cdot\mathbf{1}^{T}\right)= ( italic_I â‹… italic_I ) âŠ— ( italic_B start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT â‹… italic_C start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT ) + ( italic_S start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT italic_B start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT â‹… italic_C start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT ) âŠ— ( bold_1 â‹… bold_1 start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) |   
|  | =(IâŠ—B(2))â‹…(IâŠ—C(2))+(S(3)â¢B(3)âŠ—ğŸ)â‹…(C(3)âŠ—ğŸT)absentâ‹…tensor-productğ¼superscriptğµ2tensor-productğ¼superscriptğ¶2â‹…tensor-productsuperscriptğ‘†3superscriptğµ31tensor-productsuperscriptğ¶3superscript1ğ‘‡\displaystyle=(I\otimes B^{(2)})\cdot(I\otimes C^{(2)})+\left(S^{(3)}B^{(3)}% \otimes\mathbf{1}\right)\cdot\left(C^{(3)}\otimes\mathbf{1}^{T}\right)= ( italic_I âŠ— italic_B start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT ) â‹… ( italic_I âŠ— italic_C start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT ) + ( italic_S start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT italic_B start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT âŠ— bold_1 ) â‹… ( italic_C start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) |   
|  | =(IâŠ—B(2)âˆ£S(3)â¢B(3)âŠ—ğŸ)âŸ=B(6)â‹…(IâŠ—C(2)C(3)âŠ—ğŸT)âŸ=C(6).absentâ‹…subscriptâŸconditionaltensor-productğ¼superscriptğµ2tensor-productsuperscriptğ‘†3superscriptğµ31absentsuperscriptğµ6subscriptâŸtensor-productğ¼superscriptğ¶2tensor-productsuperscriptğ¶3superscript1ğ‘‡absentsuperscriptğ¶6\displaystyle=\underbrace{\left(I\otimes B^{(2)}~{}\mid~{}S^{(3)}B^{(3)}% \otimes\mathbf{1}\right)}_{=B^{(6)}}\cdot\underbrace{\left(\begin{array}[]{c}I% \otimes C^{(2)}\\\ C^{(3)}\otimes\mathbf{1}^{T}\end{array}\right)}_{=C^{(6)}}.= underâŸ start_ARG ( italic_I âŠ— italic_B start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT âˆ£ italic_S start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT italic_B start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT âŠ— bold_1 ) end_ARG start_POSTSUBSCRIPT = italic_B start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT â‹… underâŸ start_ARG ( start_ARRAY start_ROW start_CELL italic_I âŠ— italic_C start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL italic_C start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) end_ARG start_POSTSUBSCRIPT = italic_C start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT . |  | (1.42)  
  
The factors B(6)superscriptğµ6B^{(6)}italic_B start_POSTSUPERSCRIPT ( 6 )
end_POSTSUPERSCRIPT and C(6)superscriptğ¶6C^{(6)}italic_C
start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT are non-square matrices
represented as block matrices. The reason we move to non-square matrices is
that EquationÂ 1.28 decomposes A(6)superscriptğ´6A^{(6)}italic_A
start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT as a _sum_ of two matrix
products and we must re-express this as a single matrix product.

Roughly speaking, the binary tree mechanism corresponds to starting with a
factorization of size 2222 and applying a recursive step similar to the above
â„“âˆ’1â„“1\ell-1roman_â„“ - 1 times to obtain a factorization of size
2â„“superscript2â„“2^{\ell}2 start_POSTSUPERSCRIPT roman_â„“
end_POSTSUPERSCRIPT. Rather than starting with a factorization of size 2222,
we can start with a larger factorization of size n1subscriptğ‘›1n_{1}italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT given by TheoremÂ 1.1 and then repeat
the recursive step above â„“âˆ’1â„“1\ell-1roman_â„“ - 1 times to obtain a
factorization of size n1â„“superscriptsubscriptğ‘›1â„“n_{1}^{\ell}italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“
end_POSTSUPERSCRIPT. Intuitively, by picking a larger factorization as the
starting point we get closer to the optimal constant. With careful analysis
and the right choice of parameters, this yields TheoremÂ 1.2.

This recursive construction attains excellent asymptotics, but, for practical
parameter regimes, we find that the BLT approach is so good that we do not
need the recursion.

###  1.3 An Empirical Comparison of Mechanisms

In this section, we provide an empirical comparison of the primary DP
mechanisms discussed, demonstrating their effectiveness in practical regimes.

FigureÂ 2 compares mechanisms (and lower bounds) in terms of
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr from n=1ğ‘›1n=1italic_n = 1 to
n=106ğ‘›superscript106n=10^{6}italic_n = 10 start_POSTSUPERSCRIPT 6
end_POSTSUPERSCRIPT iterations. The sub-optimality of the binary tree
mechanism is immediately clear. This plot also shows that little is lost by
the restriction from general matrix mechanisms to Toeplitz mechanisms, where
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant
provide the optimal (but inefficient) construction. Our BLT mechanisms
essentially match this performance, while requiring time and memory
ğ’ª~â¢(1)~ğ’ª1\widetilde{\mathcal{O}}(1)over~ start_ARG caligraphic_O end_ARG
( 1 ) instead of ğ’ªâ¢(n)ğ’ªğ‘›\mathcal{O}(n)caligraphic_O ( italic_n ).

FigureÂ 1 provides a detailed comparison of our BLT mechanisms and the optimal
Toeplitz mechanism. Several important conclusions can immediately be drawn:
(1) For both RA-BLT and Opt-BLT, increasing the degree (number of allowed
memory buffers) increases performance. (2) A larger number of steps
nğ‘›nitalic_n requires a higher number of buffers dğ‘‘ditalic_d for both of
our approaches; this is expected and necessary, as shown by our theory, see
5.5. (3) A key point to emphasize is that each blue line for RA-BLT
corresponds to a single mechanism (a fixed rational approximation); for Opt-
BLT, we compute an optimized matrix factorization of the given degree for each
different nğ‘›nitalic_n. This specialization of the mechanism to the specific
anticipated number of steps nğ‘›nitalic_n is critical to the advantage enjoyed
by this approach. For example, we see Opt-BLT with only 5 buffers outperforms
RA-BLT with 9 buffers across the full range of nğ‘›nitalic_n.

It is of course possible to run Opt-BLT mechanisms for a different number of
steps than the optimization targeted. FigureÂ 3 (Left column) explores this.
We construct three fixed Opt-BLT factorizations, optimized for
nâˆˆ{100,1000,10000}ğ‘›100100010000n\in\\{100,1000,10000\\}italic_n âˆˆ { 100
, 1000 , 10000 }, and compare their performance (in terms of
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr relative to the optimal Toeplitz
mechanism) across a range of steps, from 101superscript10110^{1}10
start_POSTSUPERSCRIPT 1 end_POSTSUPERSCRIPT to 105superscript10510^{5}10
start_POSTSUPERSCRIPT 5 end_POSTSUPERSCRIPT. As expected, the mechanisms work
best for the nğ‘›nitalic_ns for which they were optimized; however, the excess
error is highly asymetric; a mechanism optimized for
nâˆ—superscriptğ‘›n^{*}italic_n start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT
will generally perform well for n<nâˆ—ğ‘›superscriptğ‘›n<n^{*}italic_n <
italic_n start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT steps, but can quickly
perform very badly when n>nâˆ—ğ‘›superscriptğ‘›n>n^{*}italic_n > italic_n
start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT. This is expected when one
considers that Opt-BLT should intuitively be ensuring a good approximation of
the optimal Toeplitz coefficients
r0,â€¦,rnâˆ—âˆ’1subscriptğ‘Ÿ0â€¦subscriptğ‘Ÿsuperscriptğ‘›1r_{0},\dots,r_{n^{*}-1}italic_r
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â€¦ , italic_r start_POSTSUBSCRIPT
italic_n start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT - 1 end_POSTSUBSCRIPT,
but the approximation of the optimal Toeplitz coefficients for larger
nğ‘›nitalic_n can become arbitrarily bad. We see this in FigureÂ 3 (Middle
column), where we compare the Toeplitz coefficients defining Cğ¶Citalic_C and
BğµBitalic_B to the optimal coefficients corresponding to the generating
function 1/1âˆ’x11ğ‘¥1/\sqrt{1-x}1 / square-root start_ARG 1 - italic_x
end_ARG. To emphasize this issue, we optimize for
nâˆ—=100superscriptğ‘›100n^{*}=100italic_n start_POSTSUPERSCRIPT âˆ—
end_POSTSUPERSCRIPT = 100, and consider degree d=2ğ‘‘2d=2italic_d = 2. The
Opt-BLT factorization provides a better approximation to the optimal
coefficients for nğ‘›nitalic_n up to 100 compared to RA-BLTâ¢(d=2)RA-
BLTğ‘‘2\text{{RA-BLT}}(d\\!=\\!2)RA-BLT ( italic_d = 2 ) (which does not
depend on nğ‘›nitalic_n), and a generally worse approximation beyond that.
FigureÂ 3 (Right column) shows that while both Opt-BLT and RA-BLT correspond
to â€œreasonableâ€ approximations to 1âˆ’x1ğ‘¥\sqrt{1-x}square-root start_ARG
1 - italic_x end_ARG (top), they distribute their errors in the approximation
very differently (bottom).

![Refer to caption]()

![Refer to caption]()

Figure 2:  Comparison of known upper and lower bounds for factorizations
A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C of the all-ones lower triangular
matrix
Ai,j=ğ•€â¢[iâ‰¥j]subscriptğ´ğ‘–ğ‘—ğ•€delimited-[]ğ‘–ğ‘—A_{i,j}=\mathbb{I}[i\geq
j]italic_A start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT =
blackboard_I [ italic_i â‰¥ italic_j ]. Note that this includes non-Toeplitz
factorizations. This illustrates that there is a small gap between lower
triangular Toeplitz factorizations and general factorizations; furthermore
this gap is asymptotically constant. Left: Vertical axis is
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ). Right: Vertical axis is
MaxErrâ¡(B,C)âˆ’ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)MaxErrğµğ¶ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›\operatorname{MaxErr}(B,C)-\mathsf{OptLTToe}(n)roman_MaxErr
( italic_B , italic_C ) - sansserif_OptLTToe ( italic_n ).  ![Refer to
caption]() Figure 3: (Left column) Comparison of three fixed Opt-BLT
mechanisms across a range of nğ‘›nitalic_n (extending beyond the optimization
targets). (Center) Comparing the first 200 Toeplitz coefficients defining the
Cğ¶Citalic_C and BğµBitalic_B matrices for Opt-BLT and RA-BLT for degree
d=2ğ‘‘2d=2italic_d = 2, with the Opt-BLT mechanism optimized for
nâˆ—=100superscriptğ‘›100n^{*}=100italic_n start_POSTSUPERSCRIPT âˆ—
end_POSTSUPERSCRIPT = 100. (Right) Differences in the generating functions for
the Opt-BLT and RA-BLT factorizations of the middle column.

##  2 Background

Fix a dimension nâˆˆâ„•ğ‘›â„•n\in\mathbb{N}italic_n âˆˆ blackboard_N and let

| A=A(n)â‰”(100â‹¯0110â‹¯0111â‹¯0â‹®â‹®â‹®â‹±â‹®111â‹¯1)âˆˆ{0,1}nÃ—nğ´superscriptğ´ğ‘›â‰”100â‹¯0110â‹¯0111â‹¯0â‹®â‹®â‹®â‹±â‹®111â‹¯1superscript01ğ‘›ğ‘›A=A^{(n)}\coloneqq\left(\begin{array}[]{ccccc}1&0&0&\cdots&0\\\ 1&1&0&\cdots&0\\\ 1&1&1&\cdots&0\\\ \vdots&\vdots&\vdots&\ddots&\vdots\\\ 1&1&1&\cdots&1\end{array}\right)\in\\{0,1\\}^{n\times n}italic_A = italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT â‰” ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹± end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL â‹¯ end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) âˆˆ { 0 , 1 } start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT |  | (2.1)  
---|---|---|---  
  
be the all-ones lower triangular matrix given by
Ai,j(n)=1â‡”iâ‰¥jiffsubscriptsuperscriptğ´ğ‘›ğ‘–ğ‘—1ğ‘–ğ‘—A^{(n)}_{i,j}=1\iff
i\geq jitalic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = 1 â‡” italic_i â‰¥
italic_j and Ai,j=0â‡”i<jiffsubscriptğ´ğ‘–ğ‘—0ğ‘–ğ‘—A_{i,j}=0\iff i<jitalic_A
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = 0 â‡” italic_i <
italic_j for all i,jâˆˆ[n]ğ‘–ğ‘—delimited-[]ğ‘›i,j\in[n]italic_i , italic_j
âˆˆ [ italic_n ]. Note that Ağ´Aitalic_A is invertible and its inverse is a
lower triangular bi-diagonal matrix:

| Aâˆ’1=(100â‹¯0âˆ’110â‹¯00âˆ’11â‹¯0â‹®â‹±â‹±â‹±â‹®0â‹¯0âˆ’11)âˆˆ{âˆ’1,0,1}nÃ—n.superscriptğ´1100â‹¯0110â‹¯0011â‹¯0â‹®â‹±â‹±â‹±â‹®0â‹¯011superscript101ğ‘›ğ‘›A^{-1}=\left(\begin{array}[]{ccccc}1&0&0&\cdots&0\\\ -1&1&0&\cdots&0\\\ 0&-1&1&\cdots&0\\\ \vdots&\ddots&\ddots&\ddots&\vdots\\\ 0&\cdots&0&-1&1\end{array}\right)\in\\{-1,0,1\\}^{n\times n}.italic_A start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL - 1 end_CELL start_CELL 1 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹± end_CELL start_CELL â‹± end_CELL start_CELL â‹± end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL start_CELL - 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) âˆˆ { - 1 , 0 , 1 } start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT . |  | (2.2)  
---|---|---|---  
  
Our goal is to compute a matrix factorization A=Bâ¢Cğ´ğµğ¶A=BCitalic_A =
italic_B italic_C where
B,CTâˆˆâ„nÃ—nâ€²ğµsuperscriptğ¶ğ‘‡superscriptâ„ğ‘›superscriptğ‘›â€²B,C^{T}\in\mathbb{R}^{n\times
n^{\prime}}italic_B , italic_C start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT
that minimizes

| MaxErrâ¡(B,C)â‰”â€–Bâ€–2â†’âˆâ‹…â€–Câ€–1â†’2â‰”maxiâˆˆ[n]â¢âˆ‘jâˆˆ[nâ€²]Bi,j2â‹…maxjâˆˆ[n]â¢âˆ‘iâˆˆ[nâ€²]Ci,j2.â‰”MaxErrğµğ¶â‹…subscriptnormğµâ†’2subscriptnormğ¶â†’12â‰”â‹…subscriptğ‘–delimited-[]ğ‘›subscriptğ‘—delimited-[]superscriptğ‘›â€²superscriptsubscriptğµğ‘–ğ‘—2subscriptğ‘—delimited-[]ğ‘›subscriptğ‘–delimited-[]superscriptğ‘›â€²superscriptsubscriptğ¶ğ‘–ğ‘—2\operatorname{MaxErr}(B,C)\coloneqq\|B\|_{2\to\infty}\cdot\|C\|_{1\to 2}% \coloneqq\sqrt{\max_{i\in[n]}\sum_{j\in[n^{\prime}]}B_{i,j}^{2}}\cdot\sqrt{% \max_{j\in[n]}\sum_{i\in[n^{\prime}]}C_{i,j}^{2}}.roman_MaxErr ( italic_B , italic_C ) â‰” âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‹… âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰” square-root start_ARG roman_max start_POSTSUBSCRIPT italic_i âˆˆ [ italic_n ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT italic_B start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG â‹… square-root start_ARG roman_max start_POSTSUBSCRIPT italic_j âˆˆ [ italic_n ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG . |  | (2.3)  
---|---|---|---  
  
Simultaneously we want computational efficiency in the following sense. We
need to generate samples from
Bâ¢Zâˆˆâ„nÃ—mğµğ‘superscriptâ„ğ‘›ğ‘šBZ\in\mathbb{R}^{n\times m}italic_B
italic_Z âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_m
end_POSTSUPERSCRIPT where
Zâˆˆâ„nâ€²Ã—mğ‘superscriptâ„superscriptğ‘›â€²ğ‘šZ\in\mathbb{R}^{n^{\prime}\times
m}italic_Z âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT Ã— italic_m end_POSTSUPERSCRIPT
is a matrix with independent standard Gaussian entries. We want to do this in
a streaming setting where we output one row at a time and the memory is
limited. Ideally the memory should be linear in mğ‘šmitalic_m and constant or
logarithmic in nğ‘›nitalic_n.

We do not restrict BğµBitalic_B and Cğ¶Citalic_C to be square matrices. Non-
square factorizations may be advantageous from a computational perspective.
However, computational efficiency aside, we can assume without loss of
generality that they are square (i.e.,
nâ€²=nsuperscriptğ‘›â€²ğ‘›n^{\prime}=nitalic_n start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT = italic_n) by taking a singular value decomposition (SVD)
of the factors and discarding the rows/columns that do not correspond to a
non-zero singular value.

It is also natural to restrict BğµBitalic_B and Cğ¶Citalic_C to be lower
triangular matrices, like Ağ´Aitalic_A. Lower triangular structure implies
each intermediate output (Câ¢x)ksubscriptğ¶ğ‘¥ğ‘˜(Cx)_{k}( italic_C italic_x )
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT is only a function of the
inputs seen so far
x0,x1,â‹¯,xksubscriptğ‘¥0subscriptğ‘¥1â‹¯subscriptğ‘¥ğ‘˜x_{0},x_{1},\cdots,x_{k}italic_x
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_x start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT , â‹¯ , italic_x start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT and not future inputs
xk+1,â‹¯,xnâˆ’1subscriptğ‘¥ğ‘˜1â‹¯subscriptğ‘¥ğ‘›1x_{k+1},\cdots,x_{n-1}italic_x
start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT , â‹¯ , italic_x
start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT. This is particularly
valuable for the privacy analysis in the case where the input stream
x1,â‹¯,xksubscriptğ‘¥1â‹¯subscriptğ‘¥ğ‘˜x_{1},\cdots,x_{k}italic_x
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , â‹¯ , italic_x start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT is chosen adaptively, such as in machine learning
applications. In the adaptive setting, each input
xksubscriptğ‘¥ğ‘˜x_{k}italic_x start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT
may depend on the previous intermediate outputs
(Câ¢x)0,(Câ¢x)1,â‹¯,(Câ¢x)kâˆ’1subscriptğ¶ğ‘¥0subscriptğ¶ğ‘¥1â‹¯subscriptğ¶ğ‘¥ğ‘˜1(Cx)_{0},(Cx)_{1},\cdots,(Cx)_{k-1}(
italic_C italic_x ) start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , ( italic_C
italic_x ) start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , â‹¯ , ( italic_C italic_x
) start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT. Lower triangular
structure prevents a cyclic dependency. Fortunately, we can assume the factors
are lower triangular without loss of generality, see for example Prop 2.2 of
\parencitedenisov22matfact.

###  2.1 Prior Work on Matrix Factorizations for Continual Counting

There has been a _lot_ of work on factorizing the all-ones lower triangular
matrix. However, most of that work optimizes the matrix factorization
objective MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr (
italic_B , italic_C ) with little regard for the computational efficiency of
sampling Bâ¢zğµğ‘§Bzitalic_B italic_z for
zâ†ğ’©â¢(0,Ïƒ2â¢I)â†ğ‘§ğ’©0superscriptğœ2ğ¼z\leftarrow\mathcal{N}(0,\sigma^{2}I)italic_z
â† caligraphic_N ( 0 , italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
italic_I ).

The binary tree mechanism [Dwork-continual, CSS11-continual] gives a
factorization which optimizes
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) up to constant factors and is efficiently computable. Prior to our
work, this is the only known approach offering both efficient computation and
some form of near-optimality. The binary tree factorization can be expressed
recursively as
B(1)=C(1)=(1)superscriptğµ1superscriptğ¶11B^{(1)}=C^{(1)}=(1)italic_B
start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT = italic_C
start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT = ( 1 ) and

| B(2â¢n)=(B(n)000B(n)1â†’)âˆˆ{0,1}2â¢nÃ—(4â¢nâˆ’1)â¢Â andÂ â¢C(2â¢n)=(C(n)00C(n)1â†’T0)âˆˆ{0,1}(4â¢nâˆ’1)Ã—2â¢n.superscriptğµ2ğ‘›superscriptğµğ‘›000superscriptğµğ‘›â†’1superscript012ğ‘›4ğ‘›1Â andÂ superscriptğ¶2ğ‘›superscriptğ¶ğ‘›00superscriptğ¶ğ‘›superscriptâ†’1ğ‘‡0superscript014ğ‘›12ğ‘›B^{(2n)}=\left(\begin{array}[]{ccc}B^{(n)}&0&0\\\ 0&B^{(n)}&\vec{1}\end{array}\right)\in\\{0,1\\}^{2n\times(4n-1)}~{}~{}\text{ and% }~{}~{}C^{(2n)}=\left(\begin{array}[]{cc}C^{(n)}&0\\\ 0&C^{(n)}\\\ \vec{1}^{T}&0\end{array}\right)\in\\{0,1\\}^{(4n-1)\times 2n}.italic_B start_POSTSUPERSCRIPT ( 2 italic_n ) end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_B start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL italic_B start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT end_CELL start_CELL overâ†’ start_ARG 1 end_ARG end_CELL end_ROW end_ARRAY ) âˆˆ { 0 , 1 } start_POSTSUPERSCRIPT 2 italic_n Ã— ( 4 italic_n - 1 ) end_POSTSUPERSCRIPT and italic_C start_POSTSUPERSCRIPT ( 2 italic_n ) end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_C start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL italic_C start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL overâ†’ start_ARG 1 end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) âˆˆ { 0 , 1 } start_POSTSUPERSCRIPT ( 4 italic_n - 1 ) Ã— 2 italic_n end_POSTSUPERSCRIPT . |  | (2.4)  
---|---|---|---  
  
Note that this only gives a factorization of
A(n)superscriptğ´ğ‘›A^{(n)}italic_A start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT when nğ‘›nitalic_n is a power of 2222. By discarding
rows/columns we can extend this to any nğ‘›nitalic_n. The objective value is
given by

| MaxErrâ¡(B,C)=â€–B(2â„“)â€–2â†’âˆ2=â€–C(2â„“)â€–1â†’22=â„“+1=âŒˆlogâ¡nlogâ¡2âŒ‰+1.MaxErrğµğ¶superscriptsubscriptnormsuperscriptğµsuperscript2â„“â†’22superscriptsubscriptnormsuperscriptğ¶superscript2â„“â†’122â„“1ğ‘›21\operatorname{MaxErr}(B,C)=\|B^{(2^{\ell})}\|_{2\to\infty}^{2}=\|C^{(2^{\ell})% }\|_{1\to 2}^{2}=\ell+1=\left\lceil\frac{\log n}{\log 2}\right\rceil+1.roman_MaxErr ( italic_B , italic_C ) = âˆ¥ italic_B start_POSTSUPERSCRIPT ( 2 start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT ) end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = âˆ¥ italic_C start_POSTSUPERSCRIPT ( 2 start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT ) end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_â„“ + 1 = âŒˆ divide start_ARG roman_log italic_n end_ARG start_ARG roman_log 2 end_ARG âŒ‰ + 1 . |  | (2.5)  
---|---|---|---  
  
The recursive formulation naturally leads to an efficient sampling algorithm
using Oâ¢(â„“)ğ‘‚â„“O(\ell)italic_O ( roman_â„“ ) space. Subsequent work has
attempted to improve the constants [qardaji2013understanding,
honaker2015efficient, andersson2024smooth].

Observe that the binary tree factorization produces sparse matrices.
Specifically, each row of B(n)superscriptğµğ‘›B^{(n)}italic_B
start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT and column of
C(n)superscriptğ¶ğ‘›C^{(n)}italic_C start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT only has Oâ¢(logâ¡n)ğ‘‚ğ‘›O(\log n)italic_O ( roman_log
italic_n ) nonzero entries. Intuitively, this sparsity is what enables
efficient computation; that is, (Bâ¢z)ksubscriptğµğ‘§ğ‘˜(Bz)_{k}( italic_B
italic_z ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT only depends on
logarithmically many elements of zğ‘§zitalic_z. However, our experience
suggests that sparsity requires non-square matrices and cannot produce near-
optimal factorizations like BLTs.

\AtNextCite\AtEachCitekey\@nocounterr

maxnames\textcitefichtenberger2022constant give the following elegant explicit
lower triangular Toeplitz factorization. Let f0=1subscriptğ‘“01f_{0}=1italic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = 1 and, for
kâˆˆâ„¤â‰¥1ğ‘˜subscriptâ„¤absent1k\in\mathbb{Z}_{\geq 1}italic_k âˆˆ
blackboard_Z start_POSTSUBSCRIPT â‰¥ 1 end_POSTSUBSCRIPT, let
fk=fkâˆ’1â‹…(1âˆ’1/2â¢k)subscriptğ‘“ğ‘˜â‹…subscriptğ‘“ğ‘˜1112ğ‘˜f_{k}=f_{k-1}\cdot(1-1/2k)italic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_f start_POSTSUBSCRIPT
italic_k - 1 end_POSTSUBSCRIPT â‹… ( 1 - 1 / 2 italic_k ) and
fâˆ’k=0subscriptğ‘“ğ‘˜0f_{-k}=0italic_f start_POSTSUBSCRIPT - italic_k
end_POSTSUBSCRIPT = 0. Equivalently,
fk=4âˆ’kâ¢(2â¢kk)â‰¤1Ï€â¢ksubscriptğ‘“ğ‘˜superscript4ğ‘˜binomial2ğ‘˜ğ‘˜1ğœ‹ğ‘˜f_{k}=4^{-k}{2k\choose
k}\leq\frac{1}{\sqrt{\pi k}}italic_f start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT = 4 start_POSTSUPERSCRIPT - italic_k end_POSTSUPERSCRIPT (
binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) â‰¤ divide
start_ARG 1 end_ARG start_ARG square-root start_ARG italic_Ï€ italic_k end_ARG
end_ARG for kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1 [CentralBinomialCoefficient].
Define B,Câˆˆâ„nÃ—nğµğ¶superscriptâ„ğ‘›ğ‘›B,C\in\mathbb{R}^{n\times n}italic_B
, italic_C âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n
end_POSTSUPERSCRIPT by
Bi,j=Ci,j=fiâˆ’jsubscriptğµğ‘–ğ‘—subscriptğ¶ğ‘–ğ‘—subscriptğ‘“ğ‘–ğ‘—B_{i,j}=C_{i,j}=f_{i-j}italic_B
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = italic_C
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = italic_f
start_POSTSUBSCRIPT italic_i - italic_j end_POSTSUBSCRIPT for all
i,jâˆˆ[n]ğ‘–ğ‘—delimited-[]ğ‘›i,j\in[n]italic_i , italic_j âˆˆ [ italic_n ],
which we denote
B=C=Mâ¡((fi)i=0nâˆ’1)ğµğ¶Msuperscriptsubscriptsubscriptğ‘“ğ‘–ğ‘–0ğ‘›1B=C=\operatorname{M}((f_{i})_{i=0}^{n-1})italic_B
= italic_C = roman_M ( ( italic_f start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ) or simply
Mâ¡(f,n)Mğ‘“ğ‘›\operatorname{M}(f,n)roman_M ( italic_f , italic_n ). Then
A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C and121212Unfortunately there
appears to be an off-by-one error in the proof of the bound given by Theorem 1
of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant;
this has since been corrected.

| MaxErrâ¡(B,C)=â€–Bâ€–2â†’âˆ2=â€–Câ€–1â†’22=âˆ‘k=0nâˆ’1fk2â‰¤1+logâ¡(n)+Î³Ï€,MaxErrğµğ¶superscriptsubscriptnormğµâ†’22superscriptsubscriptnormğ¶â†’122superscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘“ğ‘˜21ğ‘›ğ›¾ğœ‹\operatorname{MaxErr}(B,C)=\|B\|_{2\to\infty}^{2}=\|C\|_{1\to 2}^{2}=\sum_{k=0% }^{n-1}f_{k}^{2}\leq 1+\frac{\log(n)+\gamma}{\pi},roman_MaxErr ( italic_B , italic_C ) = âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ 1 + divide start_ARG roman_log ( italic_n ) + italic_Î³ end_ARG start_ARG italic_Ï€ end_ARG , |  | (2.6)  
---|---|---|---  
  
where Î³â‰¤0.57722ğ›¾0.57722\gamma\leq 0.57722italic_Î³ â‰¤ 0.57722 is the
Euler-Mascheroni constant [EulerMascheroniConstant]. This factorization turns
out to be optimal among the class of lower triangular Toeplitz factorizations;
we prove this in PropositionÂ 2.2.

However, unlike the binary tree mechanism, these Toeplitz matrices are dense
and we do not know how to efficiently generate noise according to this
factorization in the streaming setting.

The Î³2subscriptğ›¾2\gamma_{2}italic_Î³ start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT factorization norm is in fact a norm, i.e., it satisfies the
triangle inequality [tomczak1989banach]. Furthermore, there is a dual
characterization of the Î³2subscriptğ›¾2\gamma_{2}italic_Î³
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT factorization norm [lee2008direct,
Theorem 9].

| Î³2â¢(A)subscriptğ›¾2ğ´\displaystyle\gamma_{2}(A)italic_Î³ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A ) | â‰”inf{MaxErrâ¡(B,C):B,Câˆˆâ„nÃ—n,A=Bâ¢C}â‰”absentinfimumconditional-setMaxErrğµğ¶formulae-sequenceğµğ¶superscriptâ„ğ‘›ğ‘›ğ´ğµğ¶\displaystyle\coloneqq\inf\\{\operatorname{MaxErr}(B,C):B,C\in\mathbb{R}^{n% \times n},A=BC\\}â‰” roman_inf { roman_MaxErr ( italic_B , italic_C ) : italic_B , italic_C âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT , italic_A = italic_B italic_C } |   
---|---|---|---  
|  | =sup{âˆ¥P1/2â‹…Aâ‹…Q1/2âˆ¥trace:P,Qâ¢Â non-negative diagonal matricesÂ withÂ â¢ğ—ğ—‹ğ–ºğ–¼ğ–¾â¢(P)=ğ—ğ—‹ğ–ºğ–¼ğ–¾â¢(Q)=1},\displaystyle=\sup\left\\{\|P^{1/2}\cdot A\cdot Q^{1/2}\|_{\text{trace}}:\begin% {aligned} P,Q\text{ non-negative diagonal matrices}\\\ \text{ with }\mathsf{trace}(P)=\mathsf{trace}(Q)=1\end{aligned}\right\\},= roman_sup { âˆ¥ italic_P start_POSTSUPERSCRIPT 1 / 2 end_POSTSUPERSCRIPT â‹… italic_A â‹… italic_Q start_POSTSUPERSCRIPT 1 / 2 end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT trace end_POSTSUBSCRIPT : start_ROW start_CELL italic_P , italic_Q non-negative diagonal matrices end_CELL end_ROW start_ROW start_CELL with sansserif_trace ( italic_P ) = sansserif_trace ( italic_Q ) = 1 end_CELL end_ROW } , |  | (2.7)  
  
where
â€–Mâ€–trace=ğ—ğ—‹ğ–ºğ–¼ğ–¾â¢(MTâ¢M)subscriptnormğ‘€traceğ—ğ—‹ğ–ºğ–¼ğ–¾superscriptğ‘€ğ‘‡ğ‘€\|M\|_{\text{trace}}=\mathsf{trace}(\sqrt{M^{T}M})âˆ¥
italic_M âˆ¥ start_POSTSUBSCRIPT trace end_POSTSUBSCRIPT = sansserif_trace (
square-root start_ARG italic_M start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT italic_M end_ARG ) is the sum of the absolute singular
values.

Using the triangle inequality, Mathias [mathias1993hadamard, Corollary 3.5]
gives a non-constructive upper bound

| Î³2â¢(A)â‰¤12+12â¢nâ¢âˆ‘j=1n1sinâ¡(Ï€â¢2â¢jâˆ’12â¢n)â‰¤1+logâ¡(n)Ï€.subscriptğ›¾2ğ´1212ğ‘›superscriptsubscriptğ‘—1ğ‘›1ğœ‹2ğ‘—12ğ‘›1ğ‘›ğœ‹\gamma_{2}(A)\leq\frac{1}{2}+\frac{1}{2n}\sum_{j=1}^{n}\frac{1}{\sin\left(\pi% \frac{2j-1}{2n}\right)}\leq 1+\frac{\log(n)}{\pi}.italic_Î³ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A ) â‰¤ divide start_ARG 1 end_ARG start_ARG 2 end_ARG + divide start_ARG 1 end_ARG start_ARG 2 italic_n end_ARG âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG roman_sin ( italic_Ï€ divide start_ARG 2 italic_j - 1 end_ARG start_ARG 2 italic_n end_ARG ) end_ARG â‰¤ 1 + divide start_ARG roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG . |  | (2.8)  
---|---|---|---  
  
On the other hand, using the dual characterization (Eq.Â 2.7 with
P=Q=1nâ¢Iğ‘ƒğ‘„1ğ‘›ğ¼P=Q=\tfrac{1}{n}Iitalic_P = italic_Q = divide start_ARG 1
end_ARG start_ARG italic_n end_ARG italic_I),
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitematouvsek2020factorization
give a lower bound131313Proposition 4.1 of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitematouvsek2020factorization
simply states an Î©â¢(logâ¡n)Î©ğ‘›\Omega(\log n)roman_Î© ( roman_log italic_n
) lower bound, but these sharper expressions can easily be extracted from the
proof.
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitemathias1993hadamard also
gives a lower bound which differs from the upper bound in Eq.Â 2.8 by less
than an additive 1212\frac{1}{2}divide start_ARG 1 end_ARG start_ARG 2
end_ARG, but this seems slightly weaker than Equation 2.9.

| Î³2â¢(A)â‰¥12â¢nâ¢âˆ‘j=1n1sinâ¡(Ï€â¢2â¢jâˆ’14â¢n+2)â‰¥logâ¡(2â¢n+1)Ï€.subscriptğ›¾2ğ´12ğ‘›superscriptsubscriptğ‘—1ğ‘›1ğœ‹2ğ‘—14ğ‘›22ğ‘›1ğœ‹\gamma_{2}(A)\geq\frac{1}{2n}\sum_{j=1}^{n}\frac{1}{\sin\left(\pi\frac{2j-1}{4% n+2}\right)}\geq\frac{\log(2n+1)}{\pi}.italic_Î³ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A ) â‰¥ divide start_ARG 1 end_ARG start_ARG 2 italic_n end_ARG âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG roman_sin ( italic_Ï€ divide start_ARG 2 italic_j - 1 end_ARG start_ARG 4 italic_n + 2 end_ARG ) end_ARG â‰¥ divide start_ARG roman_log ( 2 italic_n + 1 ) end_ARG start_ARG italic_Ï€ end_ARG . |  | (2.9)  
---|---|---|---  
  
The upper bound in Eq.Â 2.6 or Eq.Â 2.8 and the lower bound in Eq.Â 2.9 match
up to a small _additive_ constant. Thus the optimal value of the matrix
factorization objective is
Î³2â¢(A)=logâ¡nÏ€Â±ğ–¼ğ—ˆğ—‡ğ—Œğ—ğ–ºğ—‡ğ—subscriptğ›¾2ğ´plus-or-
minusğ‘›ğœ‹ğ–¼ğ—ˆğ—‡ğ—Œğ—ğ–ºğ—‡ğ—\gamma_{2}(A)=\frac{\log
n}{\pi}\pm\mathsf{constant}italic_Î³ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT (
italic_A ) = divide start_ARG roman_log italic_n end_ARG start_ARG italic_Ï€
end_ARG Â± sansserif_constant. Numerically, the maximum gap between the
Toeplitz upper bound in Eq.Â 2.6 and the lower bound in Eq.Â 2.9 is less than
0.3650.3650.3650.365.

Figure 2 shows how these upper and lower bounds compare. The binary tree
mechanism has the advantage of computational efficiency, but as we can see, it
is far from optimal for the objective. The leading term for the binary tree is
logâ¡nlogâ¡2ğ‘›2\frac{\log n}{\log 2}divide start_ARG roman_log italic_n
end_ARG start_ARG roman_log 2 end_ARG, while the optimal leading term is
logâ¡nÏ€ğ‘›ğœ‹\frac{\log n}{\pi}divide start_ARG roman_log italic_n end_ARG
start_ARG italic_Ï€ end_ARG. Thus the binary tree is asymptotically suboptimal
by a multiplicative factor of Ï€/logâ¡2â‰ˆ4.5ğœ‹24.5\pi/\log 2\approx
4.5italic_Ï€ / roman_log 2 â‰ˆ 4.5.

###  2.2 Lower Triangular Toeplitz Factorizations versus General
Factorizations

Our work focuses on lower triangular Toeplitz factorizations. In particular,
TheoremÂ 1.1 gives such a factorization and proves near-optimality with
respect to this class. (Although we consider non-square factorizations in
SectionÂ 6, where we prove TheoremÂ 1.2.) This structure is essential to our
algorithms in SectionsÂ 3, 4 andÂ 5. However, it is natural to wonder how much
we lose in terms of the objective
MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) by restricting BğµBitalic_B and Cğ¶Citalic_C to be lower triangular
Toeplitz matrices.

In this subsection we discuss the gap between lower triangular Toeplitz
factorizations and general factorizations. We do not have an explicit
construction for the optimal general matrix factorization or even a formula
for optimal value Î³2â¢(A)subscriptğ›¾2ğ´\gamma_{2}(A)italic_Î³
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A ). For lower triangular
Toeplitz matrix factorizations the best factorization we have is that of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant.
We show that this is in fact optimal among the class of lower triangular
Toeplitz factorizations. This is â€“ to the best of our knowledge â€“ a novel
result which may be of independent interest.

We begin with a lemma stating some basic properties of the factorization of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant
and we give a proof for completeness.

######  Lemma 2.1.

Define a sequence
f0,f1,â‹¯subscriptğ‘“0subscriptğ‘“1â‹¯f_{0},f_{1},\cdotsitalic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_f start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT , â‹¯ by f0=1subscriptğ‘“01f_{0}=1italic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = 1 and
fk=(1âˆ’1/2â¢k)â¢fkâˆ’1subscriptğ‘“ğ‘˜112ğ‘˜subscriptğ‘“ğ‘˜1f_{k}=(1-1/2k)f_{k-1}italic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = ( 1 - 1 / 2 italic_k )
italic_f start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT for all
kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1. Then, for all kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1,
we have

| fk=4âˆ’kâ¢(2â¢kk)âˆˆ[1Ï€â¢(k+1),1Ï€â¢k].subscriptğ‘“ğ‘˜superscript4ğ‘˜binomial2ğ‘˜ğ‘˜1ğœ‹ğ‘˜11ğœ‹ğ‘˜f_{k}=4^{-k}{2k\choose k}\in\left[\frac{1}{\sqrt{\pi(k+1)}},\frac{1}{\sqrt{\pi k% }}\right].italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = 4 start_POSTSUPERSCRIPT - italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) âˆˆ [ divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_Ï€ ( italic_k + 1 ) end_ARG end_ARG , divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_Ï€ italic_k end_ARG end_ARG ] . |  | (2.10)  
---|---|---|---  
  
For all integers nâ‰¥0ğ‘›0n\geq 0italic_n â‰¥ 0, we have

| âˆ‘k=0nfkâ¢fnâˆ’k=1superscriptsubscriptğ‘˜0ğ‘›subscriptğ‘“ğ‘˜subscriptğ‘“ğ‘›ğ‘˜1\sum_{k=0}^{n}f_{k}f_{n-k}=1âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_f start_POSTSUBSCRIPT italic_n - italic_k end_POSTSUBSCRIPT = 1 |  | (2.11)  
---|---|---|---  
  
and

| Î³+logâ¡(n)âˆ’1Ï€â‰¤âˆ‘k=1âˆfk2â‰¤Î³+logâ¡(n)Ï€,ğ›¾ğ‘›1ğœ‹superscriptsubscriptğ‘˜1superscriptsubscriptğ‘“ğ‘˜2ğ›¾ğ‘›ğœ‹\frac{\gamma+\log(n)-1}{\pi}\leq\sum_{k=1}^{\infty}f_{k}^{2}\leq\frac{\gamma+% \log(n)}{\pi},divide start_ARG italic_Î³ + roman_log ( italic_n ) - 1 end_ARG start_ARG italic_Ï€ end_ARG â‰¤ âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ divide start_ARG italic_Î³ + roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG , |  | (2.12)  
---|---|---|---  
  
where 0.57721â‰¤Î³â‰¤0.577220.57721ğ›¾0.577220.57721\leq\gamma\leq 0.577220.57721 â‰¤ italic_Î³ â‰¤ 0.57722 is the Euler-Mascheroni constant. Furthermore, for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|<1ğ‘¥1|x|<1| italic_x | < 1, we have

| âˆ‘k=0âˆfkâ¢xk=11âˆ’x.superscriptsubscriptğ‘˜0subscriptğ‘“ğ‘˜superscriptğ‘¥ğ‘˜11ğ‘¥\sum_{k=0}^{\infty}f_{k}x^{k}=\frac{1}{\sqrt{1-x}}.âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT = divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x end_ARG end_ARG . |  | (2.13)  
---|---|---|---  
  
###### Proof.

The first part of Eq.Â 2.10 can be shown by induction: For kâ‰¥1ğ‘˜1k\geq
1italic_k â‰¥ 1,

| 4âˆ’kâ¢(2â¢kk)=14â‹…4âˆ’(kâˆ’1)â¢(2â¢kâˆ’2kâˆ’1)â¢2â¢kâ¢(2â¢kâˆ’1)k2=2â¢kâ¢(2â¢kâˆ’1)4â¢k2â¢fkâˆ’1=(1âˆ’12â¢k)â¢fkâˆ’1=fk.superscript4ğ‘˜binomial2ğ‘˜ğ‘˜â‹…14superscript4ğ‘˜1binomial2ğ‘˜2ğ‘˜12ğ‘˜2ğ‘˜1superscriptğ‘˜22ğ‘˜2ğ‘˜14superscriptğ‘˜2subscriptğ‘“ğ‘˜1112ğ‘˜subscriptğ‘“ğ‘˜1subscriptğ‘“ğ‘˜4^{-k}{2k\choose k}=\frac{1}{4}\cdot 4^{-(k-1)}{2k-2\choose k-1}\frac{2k(2k-1)% }{k^{2}}=\frac{2k(2k-1)}{4k^{2}}f_{k-1}=\left(1-\frac{1}{2k}\right)f_{k-1}=f_{% k}.4 start_POSTSUPERSCRIPT - italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) = divide start_ARG 1 end_ARG start_ARG 4 end_ARG â‹… 4 start_POSTSUPERSCRIPT - ( italic_k - 1 ) end_POSTSUPERSCRIPT ( binomial start_ARG 2 italic_k - 2 end_ARG start_ARG italic_k - 1 end_ARG ) divide start_ARG 2 italic_k ( 2 italic_k - 1 ) end_ARG start_ARG italic_k start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG = divide start_ARG 2 italic_k ( 2 italic_k - 1 ) end_ARG start_ARG 4 italic_k start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG italic_f start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT = ( 1 - divide start_ARG 1 end_ARG start_ARG 2 italic_k end_ARG ) italic_f start_POSTSUBSCRIPT italic_k - 1 end_POSTSUBSCRIPT = italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT . |   
---|---|---  
  
Next consider the derivatives of
fâ¢(x)â‰”11âˆ’xâ‰”ğ‘“ğ‘¥11ğ‘¥f(x)\coloneqq\frac{1}{\sqrt{1-x}}italic_f (
italic_x ) â‰” divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 -
italic_x end_ARG end_ARG: For kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1, we have

| f(k)â¢(x)=(1âˆ’x)âˆ’kâˆ’1/2â¢âˆâ„“=0kâˆ’1(â„“+12).superscriptğ‘“ğ‘˜ğ‘¥superscript1ğ‘¥ğ‘˜12superscriptsubscriptproductâ„“0ğ‘˜1â„“12f^{(k)}(x)=(1-x)^{-k-1/2}\prod_{\ell=0}^{k-1}\left(\ell+\frac{1}{2}\right).italic_f start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT ( italic_x ) = ( 1 - italic_x ) start_POSTSUPERSCRIPT - italic_k - 1 / 2 end_POSTSUPERSCRIPT âˆ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT ( roman_â„“ + divide start_ARG 1 end_ARG start_ARG 2 end_ARG ) . |  | (2.14)  
---|---|---|---  
  
Thus

| f(k)â¢(0)k!=âˆâ„“=0kâˆ’11â„“+1â¢(â„“+12)=âˆâ„“=0kâˆ’1(2â¢â„“+1)2â¢(â„“+1)â¢(2â¢â„“+2)2â¢(â„“+1)=(2â¢k)!(k!)2â¢22â¢k=4âˆ’kâ¢(2â¢kk)=fk.superscriptğ‘“ğ‘˜0ğ‘˜superscriptsubscriptproductâ„“0ğ‘˜11â„“1â„“12superscriptsubscriptproductâ„“0ğ‘˜12â„“12â„“12â„“22â„“12ğ‘˜superscriptğ‘˜2superscript22ğ‘˜superscript4ğ‘˜binomial2ğ‘˜ğ‘˜subscriptğ‘“ğ‘˜\frac{f^{(k)}(0)}{k!}=\prod_{\ell=0}^{k-1}\frac{1}{\ell+1}\left(\ell+\frac{1}{% 2}\right)=\prod_{\ell=0}^{k-1}\frac{(2\ell+1)}{2(\ell+1)}\frac{(2\ell+2)}{2(% \ell+1)}=\frac{(2k)!}{(k!)^{2}2^{2k}}=4^{-k}{2k\choose k}=f_{k}.divide start_ARG italic_f start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG italic_k ! end_ARG = âˆ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG roman_â„“ + 1 end_ARG ( roman_â„“ + divide start_ARG 1 end_ARG start_ARG 2 end_ARG ) = âˆ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT divide start_ARG ( 2 roman_â„“ + 1 ) end_ARG start_ARG 2 ( roman_â„“ + 1 ) end_ARG divide start_ARG ( 2 roman_â„“ + 2 ) end_ARG start_ARG 2 ( roman_â„“ + 1 ) end_ARG = divide start_ARG ( 2 italic_k ) ! end_ARG start_ARG ( italic_k ! ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT 2 start_POSTSUPERSCRIPT 2 italic_k end_POSTSUPERSCRIPT end_ARG = 4 start_POSTSUPERSCRIPT - italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) = italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT . |   
---|---|---  
  
By Taylorâ€™s theorem, for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|<1ğ‘¥1|x|<1| italic_x | < 1,

| 11âˆ’x=fâ¢(x)=âˆ‘k=0âˆf(k)â¢(0)k!â¢xk=âˆ‘k=0âˆfkâ¢xk,11ğ‘¥ğ‘“ğ‘¥superscriptsubscriptğ‘˜0superscriptğ‘“ğ‘˜0ğ‘˜superscriptğ‘¥ğ‘˜superscriptsubscriptğ‘˜0subscriptğ‘“ğ‘˜superscriptğ‘¥ğ‘˜\frac{1}{\sqrt{1-x}}=f(x)=\sum_{k=0}^{\infty}\frac{f^{(k)}(0)}{k!}x^{k}=\sum_{% k=0}^{\infty}f_{k}x^{k},divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x end_ARG end_ARG = italic_f ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_f start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG italic_k ! end_ARG italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT , |   
---|---|---  
  
as required to prove Eq.Â 2.13. Furthermore, for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|<1ğ‘¥1|x|<1| italic_x | < 1, we have

| âˆ‘n=0âˆxn=11âˆ’x=fâ¢(x)2=(âˆ‘k=0âˆfkâ¢xk)2=âˆ‘n=0âˆxnâ¢âˆ‘k=0nfkâ¢fnâˆ’k.superscriptsubscriptğ‘›0superscriptğ‘¥ğ‘›11ğ‘¥ğ‘“superscriptğ‘¥2superscriptsuperscriptsubscriptğ‘˜0subscriptğ‘“ğ‘˜superscriptğ‘¥ğ‘˜2superscriptsubscriptğ‘›0superscriptğ‘¥ğ‘›superscriptsubscriptğ‘˜0ğ‘›subscriptğ‘“ğ‘˜subscriptğ‘“ğ‘›ğ‘˜\sum_{n=0}^{\infty}x^{n}=\frac{1}{1-x}=f(x)^{2}=\left(\sum_{k=0}^{\infty}f_{k}% x^{k}\right)^{2}=\sum_{n=0}^{\infty}x^{n}\sum_{k=0}^{n}f_{k}f_{n-k}.âˆ‘ start_POSTSUBSCRIPT italic_n = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT = divide start_ARG 1 end_ARG start_ARG 1 - italic_x end_ARG = italic_f ( italic_x ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = ( âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_n = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_f start_POSTSUBSCRIPT italic_n - italic_k end_POSTSUBSCRIPT . |   
---|---|---  
  
Matching coefficients proves Eq.Â 2.11

To prove the second part of Eq.Â 2.10, we use standard bounds on the central
binomial coefficient [CentralBinomialCoefficient, SpeyerMO]: For all integers
kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1,

| 4kÏ€â¢(k+1)â‰¤(2â¢kk)â‰¤4kÏ€â¢k,superscript4ğ‘˜ğœ‹ğ‘˜1binomial2ğ‘˜ğ‘˜superscript4ğ‘˜ğœ‹ğ‘˜\frac{4^{k}}{\sqrt{\pi(k+1)}}\leq{2k\choose k}\leq\frac{4^{k}}{\sqrt{\pi k}},divide start_ARG 4 start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_Ï€ ( italic_k + 1 ) end_ARG end_ARG â‰¤ ( binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) â‰¤ divide start_ARG 4 start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT end_ARG start_ARG square-root start_ARG italic_Ï€ italic_k end_ARG end_ARG , |  | (2.15)  
---|---|---|---  
  
whence
1Ï€â¢(k+1)â‰¤fkâ‰¤1Ï€â¢k1ğœ‹ğ‘˜1subscriptğ‘“ğ‘˜1ğœ‹ğ‘˜\frac{1}{\sqrt{\pi(k+1)}}\leq
f_{k}\leq\frac{1}{\sqrt{\pi k}}divide start_ARG 1 end_ARG start_ARG square-
root start_ARG italic_Ï€ ( italic_k + 1 ) end_ARG end_ARG â‰¤ italic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT â‰¤ divide start_ARG 1 end_ARG
start_ARG square-root start_ARG italic_Ï€ italic_k end_ARG end_ARG . Next we
use standard bounds on the harmonic numbers to prove Eq.Â 2.12: For all
integers nâ‰¥1ğ‘›1n\geq 1italic_n â‰¥ 1,

| logâ¡(n)+Î³+12â¢(n+1)â‰¤âˆ‘k=1n1kâ‰¤logâ¡(n)+Î³+12â¢nğ‘›ğ›¾12ğ‘›1superscriptsubscriptğ‘˜1ğ‘›1ğ‘˜ğ‘›ğ›¾12ğ‘›\log(n)+\gamma+\frac{1}{2(n+1)}\leq\sum_{k=1}^{n}\frac{1}{k}\leq\log(n)+\gamma% +\frac{1}{2n}roman_log ( italic_n ) + italic_Î³ + divide start_ARG 1 end_ARG start_ARG 2 ( italic_n + 1 ) end_ARG â‰¤ âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG italic_k end_ARG â‰¤ roman_log ( italic_n ) + italic_Î³ + divide start_ARG 1 end_ARG start_ARG 2 italic_n end_ARG |  | (2.16)  
---|---|---|---  
  
where 0.57721â‰¤Î³â‰¤0.577220.57721ğ›¾0.577220.57721\leq\gamma\leq
0.577220.57721 â‰¤ italic_Î³ â‰¤ 0.57722 is the Euler-Mascheroni constant
[EulerMascheroniConstant]. It follows that, for all nâ‰¥2ğ‘›2n\geq 2italic_n
â‰¥ 2,

| âˆ‘k=1nâˆ’1fk2â‰¤âˆ‘k=1nâˆ’11Ï€â¢kâ‰¤Î³+logâ¡(nâˆ’1)+1/2â¢(nâˆ’1)Ï€â‰¤Î³+logâ¡(n)Ï€.superscriptsubscriptğ‘˜1ğ‘›1superscriptsubscriptğ‘“ğ‘˜2superscriptsubscriptğ‘˜1ğ‘›11ğœ‹ğ‘˜ğ›¾ğ‘›112ğ‘›1ğœ‹ğ›¾ğ‘›ğœ‹\sum_{k=1}^{n-1}f_{k}^{2}\leq\sum_{k=1}^{n-1}\frac{1}{\pi k}\leq\frac{\gamma+% \log(n-1)+1/2(n-1)}{\pi}\leq\frac{\gamma+\log(n)}{\pi}.âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG italic_Ï€ italic_k end_ARG â‰¤ divide start_ARG italic_Î³ + roman_log ( italic_n - 1 ) + 1 / 2 ( italic_n - 1 ) end_ARG start_ARG italic_Ï€ end_ARG â‰¤ divide start_ARG italic_Î³ + roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG . |  | (2.17)  
---|---|---|---  
  
Similarly, for all nâ‰¥2ğ‘›2n\geq 2italic_n â‰¥ 2

| âˆ‘k=1nâˆ’1fk2â‰¥âˆ‘k=1nâˆ’11Ï€â¢(k+1)=âˆ‘k=2n1Ï€â¢kâ‰¥Î³+logâ¡(n)+1/(2â¢n+2)âˆ’1Ï€.superscriptsubscriptğ‘˜1ğ‘›1superscriptsubscriptğ‘“ğ‘˜2superscriptsubscriptğ‘˜1ğ‘›11ğœ‹ğ‘˜1superscriptsubscriptğ‘˜2ğ‘›1ğœ‹ğ‘˜ğ›¾ğ‘›12ğ‘›21ğœ‹\sum_{k=1}^{n-1}f_{k}^{2}\geq\sum_{k=1}^{n-1}\frac{1}{\pi(k+1)}=\sum_{k=2}^{n}% \frac{1}{\pi k}\geq\frac{\gamma+\log(n)+1/(2n+2)-1}{\pi}.âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¥ âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG italic_Ï€ ( italic_k + 1 ) end_ARG = âˆ‘ start_POSTSUBSCRIPT italic_k = 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG italic_Ï€ italic_k end_ARG â‰¥ divide start_ARG italic_Î³ + roman_log ( italic_n ) + 1 / ( 2 italic_n + 2 ) - 1 end_ARG start_ARG italic_Ï€ end_ARG . |  | (2.18)  
---|---|---|---  
  
âˆ

Most importantly, we show that the factorization of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant
is optimal among the class of lower triangular Toeplitz factorizations:

######  Proposition 2.2 (Optimal lower triangular Toeplitz factorization).

Let b,câˆˆâ„nğ‘ğ‘superscriptâ„ğ‘›{b},{c}\in\mathbb{R}^{n}italic_b , italic_c
âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT be any
pair of two vectors. Consider the following optimization problem:

| minb,câ€–bâ€–2â¢â€–câ€–2s.t.âˆ€k<nâ¢âˆ‘0â‰¤i,j<ni+j=kbiâ¢cj=1.subscriptğ‘ğ‘subscriptnormğ‘2subscriptnormğ‘2missing-subexpressionmissing-subexpressions.t.for-allğ‘˜ğ‘›subscriptformulae-sequence0ğ‘–ğ‘—ğ‘›ğ‘–ğ‘—ğ‘˜subscriptğ‘ğ‘–subscriptğ‘ğ‘—1missing-subexpressionmissing-subexpressionmissing-subexpressionmissing-subexpression\begin{array}[]{rrclcl}\displaystyle\min_{{b},{c}}&\lx@intercol\left\|{b}% \right\|_{2}\left\|{c}\right\|_{2}\hfil\lx@intercol\\\ \textrm{s.t.}&\forall k<n\sum\limits_{\begin{subarray}{c}0\leq i,j<n\\\ i+j=k\end{subarray}}b_{i}c_{j}=1.\\\ \end{array}start_ARRAY start_ROW start_CELL roman_min start_POSTSUBSCRIPT italic_b , italic_c end_POSTSUBSCRIPT end_CELL start_CELL âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL end_CELL start_CELL end_CELL end_ROW start_ROW start_CELL s.t. end_CELL start_CELL âˆ€ italic_k < italic_n âˆ‘ start_POSTSUBSCRIPT start_ARG start_ROW start_CELL 0 â‰¤ italic_i , italic_j < italic_n end_CELL end_ROW start_ROW start_CELL italic_i + italic_j = italic_k end_CELL end_ROW end_ARG end_POSTSUBSCRIPT italic_b start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = 1 . end_CELL start_CELL end_CELL start_CELL end_CELL start_CELL end_CELL start_CELL end_CELL end_ROW end_ARRAY |  | (2.19)  
---|---|---|---  
  
The minimum is achieved at b=c=fğ‘ğ‘ğ‘“{b}={c}=fitalic_b = italic_c =
italic_f, where fğ‘“fitalic_f constitute the coefficients derived in
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant,
i.e., the coefficients given by f0=1,fi=(1âˆ’12â¢i)â¢fiâˆ’1formulae-
sequencesubscriptğ‘“01subscriptğ‘“ğ‘–112ğ‘–subscriptğ‘“ğ‘–1f_{0}=1,f_{i}=\left({1-\frac{1}{2i}}\right)f_{i-1}italic_f
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = 1 , italic_f start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT = ( 1 - divide start_ARG 1 end_ARG start_ARG 2
italic_i end_ARG ) italic_f start_POSTSUBSCRIPT italic_i - 1 end_POSTSUBSCRIPT
for all iâ‰¥0ğ‘–0i\geq 0italic_i â‰¥ 0.

###### Proof.

The proof proceeds in 3 steps: We first reformulate the optimization as a
quadratically constrained quadratic program, then derive a natural Lagrangian
relaxation of it, and finally construct a primal dual solution to the
Lagrangian relaxation that is globally optimal with the primal solution
b=c=fğ‘ğ‘ğ‘“{b}={c}=fitalic_b = italic_c = italic_f.

We begin by noting the following properties of fğ‘“fitalic_f:

  * â€¢

fi>0âˆ€iâˆˆ{0,â€¦,nâˆ’1}formulae-sequencesubscriptğ‘“ğ‘–0for-
allğ‘–0â€¦ğ‘›1f_{i}>0\quad\forall i\in\\{0,\ldots,n-1\\}italic_f
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT > 0 âˆ€ italic_i âˆˆ { 0 , â€¦
, italic_n - 1 }.

  * â€¢

Let fğ‘“fitalic_f denote the lower triangular Toeplitz matrix with first
column equal to fğ‘“fitalic_f. Then we have fâ¢f=Ağ‘“ğ‘“ğ´ff=Aitalic_f
italic_f = italic_A.

  * â€¢

âˆ‘i=0inffiâ¢xi=11âˆ’xâˆ€xâˆˆ[0,1]formulae-
sequencesuperscriptsubscriptğ‘–0infimumsubscriptğ‘“ğ‘–subscriptğ‘¥ğ‘–11ğ‘¥for-
allğ‘¥01\sum_{i=0}^{\inf}f_{i}x_{i}=\frac{1}{\sqrt{1-x}}\quad\forall
x\in[0,1]âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT roman_inf end_POSTSUPERSCRIPT italic_f
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT = divide start_ARG 1 end_ARG start_ARG square-root
start_ARG 1 - italic_x end_ARG end_ARG âˆ€ italic_x âˆˆ [ 0 , 1 ].

These properties were established in
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant
and also are shown in LemmaÂ 2.1.

#### Reformulation as a quadratically constrained quadratic program:

We begin by observing that the optimization problem can be rewritten as a
quadratic optimization as follows:

| â€–bâ€–2â¢â€–câ€–2=minÎ½>0â¡Î½2â¢â€–bâ€–22+12â¢Î½â¢â€–câ€–22=minÎ½>0â¡12â¢â€–Î½â¢bâ€–22+12â¢â€–cÎ½â€–22.subscriptnormğ‘2subscriptnormğ‘2subscriptğœˆ0ğœˆ2superscriptsubscriptnormğ‘2212ğœˆsuperscriptsubscriptnormğ‘22subscriptğœˆ012superscriptsubscriptnormğœˆğ‘2212superscriptsubscriptnormğ‘ğœˆ22\displaystyle\left\|{b}\right\|_{2}\left\|{c}\right\|_{2}=\min_{\nu>0}\frac{% \nu}{2}\left\|b\right\|_{2}^{2}+\frac{1}{2\nu}\left\|c\right\|_{2}^{2}=\min_{% \nu>0}\frac{1}{2}\left\|\nu b\right\|_{2}^{2}+\frac{1}{2}\left\|\frac{c}{\nu}% \right\|_{2}^{2}.âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = roman_min start_POSTSUBSCRIPT italic_Î½ > 0 end_POSTSUBSCRIPT divide start_ARG italic_Î½ end_ARG start_ARG 2 end_ARG âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + divide start_ARG 1 end_ARG start_ARG 2 italic_Î½ end_ARG âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_min start_POSTSUBSCRIPT italic_Î½ > 0 end_POSTSUBSCRIPT divide start_ARG 1 end_ARG start_ARG 2 end_ARG âˆ¥ italic_Î½ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + divide start_ARG 1 end_ARG start_ARG 2 end_ARG âˆ¥ divide start_ARG italic_c end_ARG start_ARG italic_Î½ end_ARG âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT . |   
---|---|---  
  
Furthermore, for any b,cğ‘ğ‘b,citalic_b , italic_c that satisfy the
constraints of Eq.Â 2.19, Î½â¢b,cÎ½ğœˆğ‘ğ‘ğœˆ\nu b,\frac{c}{\nu}italic_Î½
italic_b , divide start_ARG italic_c end_ARG start_ARG italic_Î½ end_ARG also
satisfy the constraints (since the constraints only involve products of
coordinates of b,cğ‘ğ‘b,citalic_b , italic_c which remain preserved if
bğ‘bitalic_b is multiplied by Î½ğœˆ\nuitalic_Î½ and cğ‘citalic_c by
1Î½1ğœˆ\frac{1}{\nu}divide start_ARG 1 end_ARG start_ARG italic_Î½ end_ARG and
are hence feasible. If Sğ‘†Sitalic_S denotes the feasible set of Eq.Â 2.19, we
have

| minb,câˆˆSâ¡â€–bâ€–2â¢â€–câ€–2=minb,câˆˆSâ¡minÎ½>0â¡12â¢â€–Î½â¢bâ€–22+12â¢â€–cÎ½â€–22=minb,câˆˆSâ¡12â¢â€–bâ€–22+12â¢â€–câ€–22.subscriptğ‘ğ‘ğ‘†subscriptnormğ‘2subscriptnormğ‘2subscriptğ‘ğ‘ğ‘†subscriptğœˆ012superscriptsubscriptnormğœˆğ‘2212superscriptsubscriptnormğ‘ğœˆ22subscriptğ‘ğ‘ğ‘†12superscriptsubscriptnormğ‘2212superscriptsubscriptnormğ‘22\min_{{b},{c}\in S}\left\|{b}\right\|_{2}\left\|{c}\right\|_{2}=\min_{{b},{c}% \in S}\min_{\nu>0}\frac{1}{2}\left\|\nu b\right\|_{2}^{2}+\frac{1}{2}\left\|% \frac{c}{\nu}\right\|_{2}^{2}=\min_{{b},{c}\in S}\frac{1}{2}\left\|{b}\right\|% _{2}^{2}+\frac{1}{2}\left\|{c}\right\|_{2}^{2}.roman_min start_POSTSUBSCRIPT italic_b , italic_c âˆˆ italic_S end_POSTSUBSCRIPT âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = roman_min start_POSTSUBSCRIPT italic_b , italic_c âˆˆ italic_S end_POSTSUBSCRIPT roman_min start_POSTSUBSCRIPT italic_Î½ > 0 end_POSTSUBSCRIPT divide start_ARG 1 end_ARG start_ARG 2 end_ARG âˆ¥ italic_Î½ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + divide start_ARG 1 end_ARG start_ARG 2 end_ARG âˆ¥ divide start_ARG italic_c end_ARG start_ARG italic_Î½ end_ARG âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_min start_POSTSUBSCRIPT italic_b , italic_c âˆˆ italic_S end_POSTSUBSCRIPT divide start_ARG 1 end_ARG start_ARG 2 end_ARG âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + divide start_ARG 1 end_ARG start_ARG 2 end_ARG âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT . |   
---|---|---  
  
Thus, we can simply write the overall optimization problem as

| minb,c12â¢(â€–bâ€–22+â€–câ€–22)s.t.âˆ€k<nâ¢âˆ‘0â‰¤iâ‰¤kbiâ¢ckâˆ’i=1.subscriptğ‘ğ‘12superscriptsubscriptnormğ‘22superscriptsubscriptnormğ‘22missing-subexpressionmissing-subexpressions.t.for-allğ‘˜ğ‘›subscript0ğ‘–ğ‘˜subscriptğ‘ğ‘–subscriptğ‘ğ‘˜ğ‘–1missing-subexpressionmissing-subexpressionmissing-subexpressionmissing-subexpression\begin{array}[]{rrclcl}\displaystyle\min_{{b},{c}}&\lx@intercol\frac{1}{2}{% \left({\left\|{b}\right\|_{2}^{2}+\left\|{c}\right\|_{2}^{2}}\right)}\hfil% \lx@intercol\\\ \textrm{s.t.}&\forall k<n\sum\limits_{0\leq i\leq k}b_{i}c_{k-i}=1.\\\ \end{array}start_ARRAY start_ROW start_CELL roman_min start_POSTSUBSCRIPT italic_b , italic_c end_POSTSUBSCRIPT end_CELL start_CELL divide start_ARG 1 end_ARG start_ARG 2 end_ARG ( âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) end_CELL start_CELL end_CELL start_CELL end_CELL end_ROW start_ROW start_CELL s.t. end_CELL start_CELL âˆ€ italic_k < italic_n âˆ‘ start_POSTSUBSCRIPT 0 â‰¤ italic_i â‰¤ italic_k end_POSTSUBSCRIPT italic_b start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_k - italic_i end_POSTSUBSCRIPT = 1 . end_CELL start_CELL end_CELL start_CELL end_CELL start_CELL end_CELL start_CELL end_CELL end_ROW end_ARRAY |  | (2.20)  
---|---|---|---  
  
#### Lagrangian relaxation:

We write the Lagrangian relaxation of this optimization problem introducing
dual variables
Î»0,â‹¯,Î»nâˆ’1subscriptğœ†0â‹¯subscriptğœ†ğ‘›1\lambda_{0},\cdots,\lambda_{n-1}italic_Î»
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â‹¯ , italic_Î» start_POSTSUBSCRIPT
italic_n - 1 end_POSTSUBSCRIPT corresponding to the constraints:

| Lâ¢(b,c,Î»)=12â¢(â€–bâ€–22+â€–câ€–22)âˆ’âˆ‘k=0nâˆ’1Î»kâ¢(âˆ‘0â‰¤iâ‰¤kbiâ¢ckâˆ’iâˆ’1)ğ¿ğ‘ğ‘ğœ†12superscriptsubscriptnormğ‘22superscriptsubscriptnormğ‘22superscriptsubscriptğ‘˜0ğ‘›1subscriptğœ†ğ‘˜subscript0ğ‘–ğ‘˜subscriptğ‘ğ‘–subscriptğ‘ğ‘˜ğ‘–1\displaystyle L\left({b,c,\lambda}\right)=\frac{1}{2}\left({\left\|{b}\right\|% _{2}^{2}+\left\|{c}\right\|_{2}^{2}}\right)-\sum_{k=0}^{n-1}\lambda_{k}\left({% \sum\limits_{0\leq i\leq k}b_{i}c_{k-i}-1}\right)italic_L ( italic_b , italic_c , italic_Î» ) = divide start_ARG 1 end_ARG start_ARG 2 end_ARG ( âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) - âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Î» start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( âˆ‘ start_POSTSUBSCRIPT 0 â‰¤ italic_i â‰¤ italic_k end_POSTSUBSCRIPT italic_b start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_k - italic_i end_POSTSUBSCRIPT - 1 ) |   
---|---|---  
| =12â¢(â€–bâ€–22+â€–câ€–22)âˆ’bâŠ¤â¢Î“â¢(Î»)â¢c+ğŸâŠ¤â¢Î»absent12superscriptsubscriptnormğ‘22superscriptsubscriptnormğ‘22superscriptğ‘topÎ“ğœ†ğ‘superscript1topğœ†\displaystyle=\frac{1}{2}\left({\left\|{b}\right\|_{2}^{2}+\left\|{c}\right\|_% {2}^{2}}\right)-{{b}}^{\top}\Gamma\left({\lambda}\right){c}+{\mathbf{1}}^{\top}\lambda= divide start_ARG 1 end_ARG start_ARG 2 end_ARG ( âˆ¥ italic_b âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ¥ italic_c âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) - italic_b start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT roman_Î“ ( italic_Î» ) italic_c + bold_1 start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT italic_Î» |   
| =12â¢(bc)âŠ¤â¢(Iâˆ’Î“â¢(Î»)âˆ’Î“â¢(Î»)I)â¢(bc)+ğŸâŠ¤â¢Î»,absent12superscriptmatrixğ‘ğ‘topmatrixğ¼Î“ğœ†Î“ğœ†ğ¼matrixğ‘ğ‘superscript1topğœ†\displaystyle=\frac{1}{2}{\begin{pmatrix}b\\\ c\end{pmatrix}}^{\top}\begin{pmatrix}I&-\Gamma\left({\lambda}\right)\\\ -\Gamma\left({\lambda}\right)&I\end{pmatrix}\begin{pmatrix}b\\\ c\end{pmatrix}+{\mathbf{1}}^{\top}\lambda,= divide start_ARG 1 end_ARG start_ARG 2 end_ARG ( start_ARG start_ROW start_CELL italic_b end_CELL end_ROW start_ROW start_CELL italic_c end_CELL end_ROW end_ARG ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT ( start_ARG start_ROW start_CELL italic_I end_CELL start_CELL - roman_Î“ ( italic_Î» ) end_CELL end_ROW start_ROW start_CELL - roman_Î“ ( italic_Î» ) end_CELL start_CELL italic_I end_CELL end_ROW end_ARG ) ( start_ARG start_ROW start_CELL italic_b end_CELL end_ROW start_ROW start_CELL italic_c end_CELL end_ROW end_ARG ) + bold_1 start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT italic_Î» , |   
  
where Î“â¢(Î»)Î“ğœ†\Gamma\left({\lambda}\right)roman_Î“ ( italic_Î» ) is the
symmetric matrix

| Î“â¢(Î»)â‰”(Î»0Î»1Î»2â€¦Î»nâˆ’1Î»1Î»2Î»3â€¦0Î»2Î»3Î»4â€¦0â‹®â‹®â‹®â‹®â‹®Î»nâˆ’100â€¦0).â‰”Î“ğœ†matrixsubscriptğœ†0subscriptğœ†1subscriptğœ†2â€¦subscriptğœ†ğ‘›1subscriptğœ†1subscriptğœ†2subscriptğœ†3â€¦0subscriptğœ†2subscriptğœ†3subscriptğœ†4â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğœ†ğ‘›100â€¦0\Gamma\left({\lambda}\right)\coloneqq\begin{pmatrix}\lambda_{0}&\lambda_{1}&% \lambda_{2}&\ldots&\lambda_{n-1}\\\ \lambda_{1}&\lambda_{2}&\lambda_{3}&\ldots&0\\\ \lambda_{2}&\lambda_{3}&\lambda_{4}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ \lambda_{n-1}&0&0&\ldots&0\end{pmatrix}.roman_Î“ ( italic_Î» ) â‰” ( start_ARG start_ROW start_CELL italic_Î» start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_Î» start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUBSCRIPT 4 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW end_ARG ) . |   
---|---|---  
  
The constrained optimization problem in Eq.Â 2.20 is equivalent to the
unconstrained min-max problem
minb,câ¡maxÎ»â¡Lâ¢(b,c,Î»)subscriptğ‘ğ‘subscriptğœ†ğ¿ğ‘ğ‘ğœ†\min_{b,c}\max_{\lambda}L(b,c,\lambda)roman_min
start_POSTSUBSCRIPT italic_b , italic_c end_POSTSUBSCRIPT roman_max
start_POSTSUBSCRIPT italic_Î» end_POSTSUBSCRIPT italic_L ( italic_b , italic_c
, italic_Î» ). We will set b=c=fğ‘ğ‘ğ‘“b=c=fitalic_b = italic_c = italic_f and
exhibit a setting Î»=Î»âˆ—ğœ†superscriptğœ†\lambda=\lambda^{*}italic_Î» =
italic_Î» start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT such that
âˆ‡b,c,Î»Lâ¢(b,c,Î»)=0subscriptâˆ‡ğ‘ğ‘ğœ†ğ¿ğ‘ğ‘ğœ†0\nabla_{b,c,\lambda}L(b,c,\lambda)=0âˆ‡
start_POSTSUBSCRIPT italic_b , italic_c , italic_Î» end_POSTSUBSCRIPT italic_L
( italic_b , italic_c , italic_Î» ) = 0 and
Lâ¢(b,c,Î»)ğ¿ğ‘ğ‘ğœ†L(b,c,\lambda)italic_L ( italic_b , italic_c , italic_Î» )
is jointly convex in b,cğ‘ğ‘b,citalic_b , italic_c and concave in
Î»ğœ†\lambdaitalic_Î». It follows that b=c=fğ‘ğ‘ğ‘“b=c=fitalic_b = italic_c =
italic_f is the optimal solution to the original problem, as required. Since
b=c=fğ‘ğ‘ğ‘“b=c=fitalic_b = italic_c = italic_f is feasible,
âˆ‡Î»Lâ¢(b,c,Î»)=0subscriptâˆ‡ğœ†ğ¿ğ‘ğ‘ğœ†0\nabla_{\lambda}L(b,c,\lambda)=0âˆ‡
start_POSTSUBSCRIPT italic_Î» end_POSTSUBSCRIPT italic_L ( italic_b , italic_c
, italic_Î» ) = 0. The Lagrangian is linear in Î»ğœ†\lambdaitalic_Î» and hence
trivially concave. The Lagrangian is convex in
(b,c)ğ‘ğ‘\left({{b},{c}}\right)( italic_b , italic_c ) if and only if

| (Iâˆ’Î“â¢(Î»)âˆ’Î“â¢(Î»)I)âª°0succeeds-or-equalsmatrixğ¼Î“ğœ†Î“ğœ†ğ¼0\begin{pmatrix}I&-\Gamma\left({\lambda}\right)\\\ -\Gamma\left({\lambda}\right)&I\end{pmatrix}\succeq 0( start_ARG start_ROW start_CELL italic_I end_CELL start_CELL - roman_Î“ ( italic_Î» ) end_CELL end_ROW start_ROW start_CELL - roman_Î“ ( italic_Î» ) end_CELL start_CELL italic_I end_CELL end_ROW end_ARG ) âª° 0 |   
---|---|---  
  
or equivalently (by Schur complements) if
â€–Î“â¢(Î»)â€–â‹†â‰¤1subscriptnormÎ“ğœ†â‹†1\left\|\Gamma\left({\lambda}\right)\right\|_{\star}\leq
1âˆ¥ roman_Î“ ( italic_Î» ) âˆ¥ start_POSTSUBSCRIPT â‹† end_POSTSUBSCRIPT â‰¤
1 where
âˆ¥Qâˆ¥â‹†â‰”sup{âˆ¥Qxâˆ¥2:âˆ¥xâˆ¥2â‰¤1}\left\|Q\right\|_{\star}\coloneqq\sup\\{\|Qx\|_{2}:\|x\|_{2}\leq
1\\}âˆ¥ italic_Q âˆ¥ start_POSTSUBSCRIPT â‹† end_POSTSUBSCRIPT â‰” roman_sup {
âˆ¥ italic_Q italic_x âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT : âˆ¥
italic_x âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT â‰¤ 1 } denotes the
operator norm.

#### Construction of primal-dual optimal solution:

Now it only remains to compute
Î»=Î»âˆ—ğœ†superscriptğœ†\lambda=\lambda^{*}italic_Î» = italic_Î»
start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT such that
âˆ‡b,cLâ¢(b,c,Î»)=0subscriptâˆ‡ğ‘ğ‘ğ¿ğ‘ğ‘ğœ†0\nabla_{b,c}L(b,c,\lambda)=0âˆ‡
start_POSTSUBSCRIPT italic_b , italic_c end_POSTSUBSCRIPT italic_L ( italic_b
, italic_c , italic_Î» ) = 0 for b=c=fğ‘ğ‘ğ‘“b=c=fitalic_b = italic_c =
italic_f and
â€–Î“â¢(Î»)2â€–â‹†â‰¤1subscriptnormÎ“superscriptğœ†2â‹†1\left\|\Gamma\left({\lambda}\right)^{2}\right\|_{\star}\leq
1âˆ¥ roman_Î“ ( italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT âˆ¥
start_POSTSUBSCRIPT â‹† end_POSTSUBSCRIPT â‰¤ 1.

For all iâˆˆ[n]ğ‘–delimited-[]ğ‘›i\in[n]italic_i âˆˆ [ italic_n ], we have
âˆ‚âˆ‚biâ¢Lâ¢(b,c,Î»)=biâˆ’âˆ‘k=inâˆ’1Î»kâ¢ckâˆ’isubscriptğ‘ğ‘–ğ¿ğ‘ğ‘ğœ†subscriptğ‘ğ‘–superscriptsubscriptğ‘˜ğ‘–ğ‘›1subscriptğœ†ğ‘˜subscriptğ‘ğ‘˜ğ‘–\frac{\partial}{\partial
b_{i}}L(b,c,\lambda)=b_{i}-\sum_{k=i}^{n-1}\lambda_{k% }c_{k-i}divide
start_ARG âˆ‚ end_ARG start_ARG âˆ‚ italic_b start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT end_ARG italic_L ( italic_b , italic_c , italic_Î» ) =
italic_b start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT - âˆ‘
start_POSTSUBSCRIPT italic_k = italic_i end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Î»
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT
italic_k - italic_i end_POSTSUBSCRIPT and
âˆ‚âˆ‚ciâ¢Lâ¢(b,c,Î»)=ciâˆ’âˆ‘k=inâˆ’1Î»kâ¢bkâˆ’isubscriptğ‘ğ‘–ğ¿ğ‘ğ‘ğœ†subscriptğ‘ğ‘–superscriptsubscriptğ‘˜ğ‘–ğ‘›1subscriptğœ†ğ‘˜subscriptğ‘ğ‘˜ğ‘–\frac{\partial}{\partial
c_{i}}L(b,c,\lambda)=c_{i}-\sum_{k=i}^{n-1}\lambda_{k% }b_{k-i}divide
start_ARG âˆ‚ end_ARG start_ARG âˆ‚ italic_c start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT end_ARG italic_L ( italic_b , italic_c , italic_Î» ) =
italic_c start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT - âˆ‘
start_POSTSUBSCRIPT italic_k = italic_i end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Î»
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_b start_POSTSUBSCRIPT
italic_k - italic_i end_POSTSUBSCRIPT. Equivalently,
âˆ‡bLâ¢(b,c,Î»)=bâˆ’Î“â¢(Î»)â¢csubscriptâˆ‡ğ‘ğ¿ğ‘ğ‘ğœ†ğ‘Î“ğœ†ğ‘\nabla_{b}L(b,c,\lambda)=b-\Gamma(\lambda)câˆ‡
start_POSTSUBSCRIPT italic_b end_POSTSUBSCRIPT italic_L ( italic_b , italic_c
, italic_Î» ) = italic_b - roman_Î“ ( italic_Î» ) italic_c and
âˆ‡cLâ¢(b,c,Î»)=câˆ’Î“â¢(Î»)â¢bsubscriptâˆ‡ğ‘ğ¿ğ‘ğ‘ğœ†ğ‘Î“ğœ†ğ‘\nabla_{c}L(b,c,\lambda)=c-\Gamma(\lambda)bâˆ‡
start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT italic_L ( italic_b , italic_c
, italic_Î» ) = italic_c - roman_Î“ ( italic_Î» ) italic_b. Thus, in order to
ensure
âˆ‡b,cLâ¢(b,c,Î»)=0subscriptâˆ‡ğ‘ğ‘ğ¿ğ‘ğ‘ğœ†0\nabla_{b,c}L(b,c,\lambda)=0âˆ‡
start_POSTSUBSCRIPT italic_b , italic_c end_POSTSUBSCRIPT italic_L ( italic_b
, italic_c , italic_Î» ) = 0 when b=c=fğ‘ğ‘ğ‘“b=c=fitalic_b = italic_c =
italic_f, it suffices to set
Î»=Î»â‹†ğœ†superscriptğœ†â‹†\lambda=\lambda^{\star}italic_Î» = italic_Î»
start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT, where
Î»â‹†superscriptğœ†â‹†\lambda^{\star}italic_Î» start_POSTSUPERSCRIPT â‹†
end_POSTSUPERSCRIPT is chosen so as to solve

| f=Î“â¢(Î»â‹†)â¢fâ‡”Pâ¢f=Pâ¢Î“â¢(Î»â‹†)â¢fâ‡”(fnâˆ’1fnâˆ’2â‹®f0)=(Î»nâˆ’1â‹†00â€¦0Î»nâˆ’2â‹†Î»nâˆ’1â‹†0â€¦0Î»nâˆ’3â‹†Î»nâˆ’2â‹†Î»nâˆ’1â‹†â€¦0â‹®â‹®â‹®â‹®â‹®Î»0â‹†Î»1â‹†Î»2â‹†â€¦Î»nâˆ’1â‹†)â¢(f0f1â‹®fnâˆ’1)iffğ‘“Î“superscriptğœ†â‹†ğ‘“ğ‘ƒğ‘“ğ‘ƒÎ“superscriptğœ†â‹†ğ‘“iffmatrixsubscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2â‹®subscriptğ‘“0matrixsubscriptsuperscriptğœ†â‹†ğ‘›100â€¦0subscriptsuperscriptğœ†â‹†ğ‘›2subscriptsuperscriptğœ†â‹†ğ‘›10â€¦0subscriptsuperscriptğœ†â‹†ğ‘›3subscriptsuperscriptğœ†â‹†ğ‘›2subscriptsuperscriptğœ†â‹†ğ‘›1â€¦0â‹®â‹®â‹®â‹®â‹®subscriptsuperscriptğœ†â‹†0subscriptsuperscriptğœ†â‹†1subscriptsuperscriptğœ†â‹†2â€¦subscriptsuperscriptğœ†â‹†ğ‘›1matrixsubscriptğ‘“0subscriptğ‘“1â‹®subscriptğ‘“ğ‘›1\displaystyle f=\Gamma\left({\lambda^{\star}}\right)f\iff Pf=P\Gamma\left({% \lambda^{\star}}\right)f\iff\begin{pmatrix}f_{n-1}\\\ f_{n-2}\\\ \vdots\\\ f_{0}\end{pmatrix}=\begin{pmatrix}\lambda^{\star}_{n-1}&0&0&\ldots&0\\\ \lambda^{\star}_{n-2}&\lambda^{\star}_{n-1}&0&\ldots&0\\\ \lambda^{\star}_{n-3}&\lambda^{\star}_{n-2}&\lambda^{\star}_{n-1}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ \lambda^{\star}_{0}&\lambda^{\star}_{1}&\lambda^{\star}_{2}&\ldots&\lambda^{% \star}_{n-1}\end{pmatrix}\begin{pmatrix}f_{0}\\\ f_{1}\\\ \vdots\\\ f_{n-1}\end{pmatrix}italic_f = roman_Î“ ( italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT ) italic_f â‡” italic_P italic_f = italic_P roman_Î“ ( italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT ) italic_f â‡” ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) = ( start_ARG start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) |   
---|---|---  
| â‡”(fnâˆ’1fnâˆ’2â‹®f0)=(f000â€¦0f1f00â€¦0f2f1f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1fnâˆ’2fnâˆ’3â€¦f0)â¢(Î»nâˆ’1â‹†Î»nâˆ’2â‹†â‹®Î»0â‹†),iffabsentmatrixsubscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2â‹®subscriptğ‘“0matrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3â€¦subscriptğ‘“0matrixsubscriptsuperscriptğœ†â‹†ğ‘›1subscriptsuperscriptğœ†â‹†ğ‘›2â‹®subscriptsuperscriptğœ†â‹†0\displaystyle\iff\begin{pmatrix}f_{n-1}\\\ f_{n-2}\\\ \vdots\\\ f_{0}\end{pmatrix}=\begin{pmatrix}f_{0}&0&0&\ldots&0\\\ f_{1}&f_{0}&0&\ldots&0\\\ f_{2}&f_{1}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}&f_{n-2}&f_{n-3}&\ldots&f_{0}\end{pmatrix}\begin{pmatrix}\lambda^{\star% }_{n-1}\\\ \lambda^{\star}_{n-2}\\\ \vdots\\\ \lambda^{\star}_{0}\end{pmatrix},â‡” ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) = ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) ( start_ARG start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) , |   
  
where Pğ‘ƒPitalic_P is the permutation matrix such that Pâ¢xğ‘ƒğ‘¥Pxitalic_P
italic_x is the reversal of the vector xğ‘¥xitalic_x. Thus, we can solve for
Î»â‹†superscriptğœ†â‹†\lambda^{\star}italic_Î» start_POSTSUPERSCRIPT â‹†
end_POSTSUPERSCRIPT to obtain

| Pâ¢Î»â‹†=(Î»nâˆ’1â‹†Î»nâˆ’2â‹†â‹®Î»0â‹†)=(f000â€¦0f1âˆ’f0f00â€¦0f2âˆ’f1f1âˆ’f0f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1âˆ’fnâˆ’2fnâˆ’2âˆ’fnâˆ’3fnâˆ’3âˆ’fnâˆ’4â€¦f0)â¢(fnâˆ’1fnâˆ’2â‹®f0),ğ‘ƒsuperscriptğœ†â‹†matrixsubscriptsuperscriptğœ†â‹†ğ‘›1subscriptsuperscriptğœ†â‹†ğ‘›2â‹®subscriptsuperscriptğœ†â‹†0matrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“0subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“1subscriptğ‘“0subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3subscriptğ‘“ğ‘›3subscriptğ‘“ğ‘›4â€¦subscriptğ‘“0matrixsubscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2â‹®subscriptğ‘“0P\lambda^{\star}=\begin{pmatrix}\lambda^{\star}_{n-1}\\\ \lambda^{\star}_{n-2}\\\ \vdots\\\ \lambda^{\star}_{0}\end{pmatrix}=\begin{pmatrix}f_{0}&0&0&\ldots&0\\\ f_{1}-f_{0}&f_{0}&0&\ldots&0\\\ f_{2}-f_{1}&f_{1}-f_{0}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}-f_{n-2}&f_{n-2}-f_{n-3}&f_{n-3}-f_{n-4}&\ldots&f_{0}\end{pmatrix}% \begin{pmatrix}f_{n-1}\\\ f_{n-2}\\\ \vdots\\\ f_{0}\end{pmatrix},italic_P italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT = ( start_ARG start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) = ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT italic_n - 4 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) , |   
---|---|---  
  
where we used the fact that fğ‘“fitalic_f is a feasible solution:

| (f000â€¦0f1f00â€¦0f2f1f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1fnâˆ’2fnâˆ’3â€¦f0)â¢(f000â€¦0f1f00â€¦0f2f1f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1fnâˆ’2fnâˆ’3â€¦f0)=(100â€¦0110â€¦0111â€¦0â‹®â‹®â‹®â‹®â‹®111â€¦1)matrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3â€¦subscriptğ‘“0matrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3â€¦subscriptğ‘“0matrix100â€¦0110â€¦0111â€¦0â‹®â‹®â‹®â‹®â‹®111â€¦1\displaystyle\begin{pmatrix}f_{0}&0&0&\ldots&0\\\ f_{1}&f_{0}&0&\ldots&0\\\ f_{2}&f_{1}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}&f_{n-2}&f_{n-3}&\ldots&f_{0}\end{pmatrix}\begin{pmatrix}f_{0}&0&0&% \ldots&0\\\ f_{1}&f_{0}&0&\ldots&0\\\ f_{2}&f_{1}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}&f_{n-2}&f_{n-3}&\ldots&f_{0}\end{pmatrix}=\begin{pmatrix}1&0&0&\ldots&% 0\\\ 1&1&0&\ldots&0\\\ 1&1&1&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ 1&1&1&\ldots&1\end{pmatrix}( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) = ( start_ARG start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL â€¦ end_CELL start_CELL 1 end_CELL end_ROW end_ARG ) |   
---|---|---  
| â‡”(f000â€¦0f1f00â€¦0f2f1f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1fnâˆ’2fnâˆ’3â€¦f0)âˆ’1=(100â€¦0110â€¦0111â€¦0â‹®â‹®â‹®â‹®â‹®111â€¦1)âˆ’1â¢(f000â€¦0f1f00â€¦0f2f1f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1fnâˆ’2fnâˆ’3â€¦f0)iffabsentsuperscriptmatrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3â€¦subscriptğ‘“01superscriptmatrix100â€¦0110â€¦0111â€¦0â‹®â‹®â‹®â‹®â‹®111â€¦11matrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3â€¦subscriptğ‘“0\displaystyle\iff{\begin{pmatrix}f_{0}&0&0&\ldots&0\\\ f_{1}&f_{0}&0&\ldots&0\\\ f_{2}&f_{1}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}&f_{n-2}&f_{n-3}&\ldots&f_{0}\end{pmatrix}}^{-1}={\begin{pmatrix}1&0&0&% \ldots&0\\\ 1&1&0&\ldots&0\\\ 1&1&1&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ 1&1&1&\ldots&1\end{pmatrix}}^{-1}\begin{pmatrix}f_{0}&0&0&\ldots&0\\\ f_{1}&f_{0}&0&\ldots&0\\\ f_{2}&f_{1}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}&f_{n-2}&f_{n-3}&\ldots&f_{0}\end{pmatrix}â‡” ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT = ( start_ARG start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL â€¦ end_CELL start_CELL 1 end_CELL end_ROW end_ARG ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) |   
| â‡”(f000â€¦0f1f00â€¦0f2f1f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1fnâˆ’2fnâˆ’3â€¦f0)âˆ’1=(100â€¦0âˆ’110â€¦00âˆ’11â€¦0â‹®â‹®â‹®â‹®â‹®000â€¦1)â¢(f000â€¦0f1f00â€¦0f2f1f0â€¦0â‹®â‹®â‹®â‹®â‹®fnâˆ’1fnâˆ’2fnâˆ’3â€¦f0).iffabsentsuperscriptmatrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3â€¦subscriptğ‘“01matrix100â€¦0110â€¦0011â€¦0â‹®â‹®â‹®â‹®â‹®000â€¦1matrixsubscriptğ‘“000â€¦0subscriptğ‘“1subscriptğ‘“00â€¦0subscriptğ‘“2subscriptğ‘“1subscriptğ‘“0â€¦0â‹®â‹®â‹®â‹®â‹®subscriptğ‘“ğ‘›1subscriptğ‘“ğ‘›2subscriptğ‘“ğ‘›3â€¦subscriptğ‘“0\displaystyle\iff{\begin{pmatrix}f_{0}&0&0&\ldots&0\\\ f_{1}&f_{0}&0&\ldots&0\\\ f_{2}&f_{1}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}&f_{n-2}&f_{n-3}&\ldots&f_{0}\end{pmatrix}}^{-1}={\begin{pmatrix}1&0&0&% \ldots&0\\\ -1&1&0&\ldots&0\\\ 0&-1&1&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ 0&0&0&\ldots&1\end{pmatrix}}\begin{pmatrix}f_{0}&0&0&\ldots&0\\\ f_{1}&f_{0}&0&\ldots&0\\\ f_{2}&f_{1}&f_{0}&\ldots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots\\\ f_{n-1}&f_{n-2}&f_{n-3}&\ldots&f_{0}\end{pmatrix}.â‡” ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT = ( start_ARG start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL - 1 end_CELL start_CELL 1 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 1 end_CELL end_ROW end_ARG ) ( start_ARG start_ROW start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 2 end_POSTSUBSCRIPT end_CELL start_CELL italic_f start_POSTSUBSCRIPT italic_n - 3 end_POSTSUBSCRIPT end_CELL start_CELL â€¦ end_CELL start_CELL italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) . |   
  
From the definition f0=1subscriptğ‘“01f_{0}=1italic_f start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT = 1 and
fi=fiâˆ’1â¢(1âˆ’1/2â¢i)subscriptğ‘“ğ‘–subscriptğ‘“ğ‘–1112ğ‘–f_{i}=f_{i-1}(1-1/2i)italic_f
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = italic_f start_POSTSUBSCRIPT
italic_i - 1 end_POSTSUBSCRIPT ( 1 - 1 / 2 italic_i ), for all
iâˆˆ[n]={0,â‹¯,nâˆ’1}ğ‘–delimited-[]ğ‘›0â‹¯ğ‘›1i\in[n]=\\{0,\cdots,n-1\\}italic_i
âˆˆ [ italic_n ] = { 0 , â‹¯ , italic_n - 1 }, we have

| Î»nâˆ’1âˆ’iâ‹†subscriptsuperscriptğœ†â‹†ğ‘›1ğ‘–\displaystyle\lambda^{\star}_{n-1-i}italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT | =f0â¢fnâˆ’1âˆ’iâˆ’âˆ‘j=1i(fjâˆ’fjâˆ’1)â¢fnâˆ’1âˆ’i+jabsentsubscriptğ‘“0subscriptğ‘“ğ‘›1ğ‘–superscriptsubscriptğ‘—1ğ‘–subscriptğ‘“ğ‘—subscriptğ‘“ğ‘—1subscriptğ‘“ğ‘›1ğ‘–ğ‘—\displaystyle=f_{0}f_{n-1-i}-\sum_{j=1}^{i}\left({f_{j}-f_{j-1}}\right)f_{n-1-% i+j}= italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT - âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ( italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT italic_j - 1 end_POSTSUBSCRIPT ) italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i + italic_j end_POSTSUBSCRIPT |   
---|---|---|---  
|  | =fnâˆ’1âˆ’iâˆ’âˆ‘j=1ifjâˆ’1â¢(12â¢j)â¢fnâˆ’1âˆ’i+jabsentsubscriptğ‘“ğ‘›1ğ‘–superscriptsubscriptğ‘—1ğ‘–subscriptğ‘“ğ‘—112ğ‘—subscriptğ‘“ğ‘›1ğ‘–ğ‘—\displaystyle=f_{n-1-i}-\sum_{j=1}^{i}f_{j-1}\left({\frac{1}{2j}}\right)f_{n-1% -i+j}= italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT - âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_j - 1 end_POSTSUBSCRIPT ( divide start_ARG 1 end_ARG start_ARG 2 italic_j end_ARG ) italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i + italic_j end_POSTSUBSCRIPT |   
|  | =fnâˆ’1âˆ’iâ¢(1âˆ’âˆ‘j=1ifjâˆ’1â¢(12â¢j)â¢fnâˆ’1âˆ’i+jfnâˆ’1âˆ’i).absentsubscriptğ‘“ğ‘›1ğ‘–1superscriptsubscriptğ‘—1ğ‘–subscriptğ‘“ğ‘—112ğ‘—subscriptğ‘“ğ‘›1ğ‘–ğ‘—subscriptğ‘“ğ‘›1ğ‘–\displaystyle=f_{n-1-i}\left({1-\sum_{j=1}^{i}f_{j-1}\left({\frac{1}{2j}}% \right)\frac{f_{n-1-i+j}}{f_{n-1-i}}}\right).= italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT ( 1 - âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_j - 1 end_POSTSUBSCRIPT ( divide start_ARG 1 end_ARG start_ARG 2 italic_j end_ARG ) divide start_ARG italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i + italic_j end_POSTSUBSCRIPT end_ARG start_ARG italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT end_ARG ) . |   
  
Since
fnâˆ’1âˆ’i+jfnâˆ’1âˆ’i=âˆâ„“=1j(1âˆ’12â¢(nâˆ’i+â„“))â‰¤1subscriptğ‘“ğ‘›1ğ‘–ğ‘—subscriptğ‘“ğ‘›1ğ‘–superscriptsubscriptproductâ„“1ğ‘—112ğ‘›ğ‘–â„“1\frac{f_{n-1-i+j}}{f_{n-1-i}}=\prod_{\ell=1}^{j}\left({1-\frac{1}{2(n-i+\ell)}%
}\right)\leq 1divide start_ARG italic_f start_POSTSUBSCRIPT italic_n - 1 -
italic_i + italic_j end_POSTSUBSCRIPT end_ARG start_ARG italic_f
start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT end_ARG = âˆ
start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_j end_POSTSUPERSCRIPT ( 1 - divide start_ARG 1 end_ARG start_ARG 2 (
italic_n - italic_i + roman_â„“ ) end_ARG ) â‰¤ 1, we have

| Î»nâˆ’1âˆ’iâ‹†â‰¥fnâˆ’1âˆ’iâ¢(1âˆ’âˆ‘j=1ifjâˆ’1â¢(12â¢j))>fnâˆ’1âˆ’iâ¢(1âˆ’âˆ‘j=1âˆfjâˆ’1â¢(12â¢j))=fnâˆ’1âˆ’iâ¢(1âˆ’âˆ‘j=0âˆfj2â¢(j+1)).subscriptsuperscriptğœ†â‹†ğ‘›1ğ‘–subscriptğ‘“ğ‘›1ğ‘–1superscriptsubscriptğ‘—1ğ‘–subscriptğ‘“ğ‘—112ğ‘—subscriptğ‘“ğ‘›1ğ‘–1superscriptsubscriptğ‘—1subscriptğ‘“ğ‘—112ğ‘—subscriptğ‘“ğ‘›1ğ‘–1superscriptsubscriptğ‘—0subscriptğ‘“ğ‘—2ğ‘—1\displaystyle\lambda^{\star}_{n-1-i}\geq f_{n-1-i}\left({1-\sum_{j=1}^{i}f_{j-% 1}\left({\frac{1}{2j}}\right)}\right)>f_{n-1-i}\left({1-\sum_{j=1}^{\infty}f_{% j-1}\left({\frac{1}{2j}}\right)}\right)=f_{n-1-i}\left({1-\sum_{j=0}^{\infty}% \frac{f_{j}}{2(j+1)}}\right).italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT â‰¥ italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT ( 1 - âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_j - 1 end_POSTSUBSCRIPT ( divide start_ARG 1 end_ARG start_ARG 2 italic_j end_ARG ) ) > italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT ( 1 - âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_j - 1 end_POSTSUBSCRIPT ( divide start_ARG 1 end_ARG start_ARG 2 italic_j end_ARG ) ) = italic_f start_POSTSUBSCRIPT italic_n - 1 - italic_i end_POSTSUBSCRIPT ( 1 - âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG start_ARG 2 ( italic_j + 1 ) end_ARG ) . |  | (2.21)  
---|---|---|---  
  
Since
âˆ‘j=0âˆfjâ¢xj=11âˆ’xsuperscriptsubscriptğ‘—0subscriptğ‘“ğ‘—superscriptğ‘¥ğ‘—11ğ‘¥\sum_{j=0}^{\infty}f_{j}x^{j}=\frac{1}{\sqrt{1-x}}âˆ‘
start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ
end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT
italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT = divide start_ARG
1 end_ARG start_ARG square-root start_ARG 1 - italic_x end_ARG end_ARG for all
xâˆˆ[0,1)ğ‘¥01x\in[0,1)italic_x âˆˆ [ 0 , 1 ), integrating both sides between
the limits 00 and tğ‘¡titalic_t, we have

| âˆ‘j=0âˆfjj+1â¢tj+1=2â¢(1âˆ’1âˆ’t).superscriptsubscriptğ‘—0subscriptğ‘“ğ‘—ğ‘—1superscriptğ‘¡ğ‘—1211ğ‘¡\sum_{j=0}^{\infty}\frac{f_{j}}{j+1}t^{j+1}=2\left({1-\sqrt{1-t}}\right).âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG start_ARG italic_j + 1 end_ARG italic_t start_POSTSUPERSCRIPT italic_j + 1 end_POSTSUPERSCRIPT = 2 ( 1 - square-root start_ARG 1 - italic_t end_ARG ) . |   
---|---|---  
  
Taking limits as tâ†’1â†’ğ‘¡1t\to 1italic_t â†’ 1, we obtain

| âˆ‘j=0âˆfjj+1=2.superscriptsubscriptğ‘—0subscriptğ‘“ğ‘—ğ‘—12\sum_{j=0}^{\infty}\frac{f_{j}}{j+1}=2.âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_f start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG start_ARG italic_j + 1 end_ARG = 2 . |   
---|---|---  
  
Thus, from Eq.Â 2.21, we can conclude that
Î»nâˆ’1âˆ’iâ‹†>0subscriptsuperscriptğœ†â‹†ğ‘›1ğ‘–0\lambda^{\star}_{n-1-i}>0italic_Î»
start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n - 1
- italic_i end_POSTSUBSCRIPT > 0 for all
iâˆˆ[n]ğ‘–delimited-[]ğ‘›i\in[n]italic_i âˆˆ [ italic_n ] and hence
Î“â¢(Î»â‹†)2Î“superscriptsuperscriptğœ†â‹†2\Gamma\left({\lambda^{\star}}\right)^{2}roman_Î“
( italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT is a matrix with all entries
(Î“â¢(Î»â‹†)2)i,j=âˆ‘k=0nâˆ’1âˆ’maxâ¡{i,j}Î»i+kâ‹†â¢Î»j+kâ‹†subscriptÎ“superscriptsuperscriptğœ†â‹†2ğ‘–ğ‘—superscriptsubscriptğ‘˜0ğ‘›1ğ‘–ğ‘—subscriptsuperscriptğœ†â‹†ğ‘–ğ‘˜subscriptsuperscriptğœ†â‹†ğ‘—ğ‘˜(\Gamma(\lambda^{\star})^{2})_{i,j}=\sum_{k=0}^{n-1-\max\\{i,j\\}}\lambda^{\star%
}_{i+k}\lambda^{\star}_{j+k}( roman_Î“ ( italic_Î» start_POSTSUPERSCRIPT â‹†
end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = âˆ‘
start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_n - 1 - roman_max { italic_i , italic_j } end_POSTSUPERSCRIPT italic_Î»
start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i +
italic_k end_POSTSUBSCRIPT italic_Î» start_POSTSUPERSCRIPT â‹†
end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j + italic_k end_POSTSUBSCRIPT
strictly positive. Hence, by the Perron Frobenius theorem, we have that
Î“â¢(Î»â‹†)2Î“superscriptsuperscriptğœ†â‹†2\Gamma\left({\lambda^{\star}}\right)^{2}roman_Î“
( italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT has a unique eigenvector with all
coordinates positive, and this corresponds to the maximum eigenvalue. Since
fğ‘“fitalic_f is an eigenvector of
Î“â¢(Î»â‹†)2Î“superscriptsuperscriptğœ†â‹†2\Gamma\left({\lambda^{\star}}\right)^{2}roman_Î“
( italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT by construction, it must be the
unique leading eigenvector corresponding to the eigenvalue 1111. Hence
â€–Î“â¢(Î»â‹†)2â€–âˆ—â‰¤1subscriptnormÎ“superscriptsuperscriptğœ†â‹†21\left\|\Gamma\left({\lambda^{\star}}\right)^{2}\right\|_{*}\leq
1âˆ¥ roman_Î“ ( italic_Î» start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT âˆ—
end_POSTSUBSCRIPT â‰¤ 1.

Thus, Lâ¢(b,c,Î»)ğ¿ğ‘ğ‘ğœ†L\left({{b},{c},\lambda}\right)italic_L ( italic_b ,
italic_c , italic_Î» ) is convex in (b,c)ğ‘ğ‘\left({{b},{c}}\right)( italic_b
, italic_c ), since
â€–Î“â¢(Î»)2â€–â‹†â‰¤1â‡”â€–Î“â¢(Î»)â€–â‹†â‰¤1iffsubscriptnormÎ“superscriptğœ†2â‹†1subscriptnormÎ“ğœ†â‹†1\left\|\Gamma\left({\lambda}\right)^{2}\right\|_{\star}\leq
1\iff\left\|\Gamma% \left({\lambda}\right)\right\|_{\star}\leq 1âˆ¥ roman_Î“ (
italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT âˆ¥
start_POSTSUBSCRIPT â‹† end_POSTSUBSCRIPT â‰¤ 1 â‡” âˆ¥ roman_Î“ ( italic_Î» )
âˆ¥ start_POSTSUBSCRIPT â‹† end_POSTSUBSCRIPT â‰¤ 1.

Thus, we have
(bâ‹†,f,Î»â‹†)superscriptğ‘â‹†ğ‘“superscriptğœ†â‹†\left({{b}^{\star},f,\lambda^{\star}}\right)(
italic_b start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT , italic_f , italic_Î»
start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT ) is a stationary point of the
Lagrangian that is convex in b,cğ‘ğ‘{b},{c}italic_b , italic_c and concave in
Î»ğœ†\lambdaitalic_Î», hence it is the global optimum.

âˆ

PropositionÂ 2.2 fully characterizes the optimal lower triangular Toeplitz
factorization. We now compare the value of the matrix factorization objective
for lower triangular Toeplitz factorizations versus general factorizations.
For convenience, we define a notation for these values:

######  Definition 2.3.

Let Aâˆˆ{0,1}nÃ—nğ´superscript01ğ‘›ğ‘›A\in\\{0,1\\}^{n\times n}italic_A âˆˆ {
0 , 1 } start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT be the
lower triangular matrix of all ones. Recall that
Câˆˆâ„nÃ—nğ¶superscriptâ„ğ‘›ğ‘›C\in\mathbb{R}^{n\times n}italic_C âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT is
lower triangular Toeplitz if Ci,j=0subscriptğ¶ğ‘–ğ‘—0C_{i,j}=0italic_C
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = 0 for all
i<jğ‘–ğ‘—i<jitalic_i < italic_j and
Ci,j=ciâˆ’jsubscriptğ¶ğ‘–ğ‘—subscriptğ‘ğ‘–ğ‘—C_{i,j}=c_{i-j}italic_C
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = italic_c
start_POSTSUBSCRIPT italic_i - italic_j end_POSTSUBSCRIPT for all
iâ‰¥jğ‘–ğ‘—i\geq jitalic_i â‰¥ italic_j, where
câˆˆâ„nğ‘superscriptâ„ğ‘›c\in\mathbb{R}^{n}italic_c âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT is a vector. Define

| ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›\displaystyle\mathsf{OptLTToe}(n)sansserif_OptLTToe ( italic_n ) | â‰”inf{MaxErrâ¡(B,C):B,Câˆˆâ„nÃ—nâ¢Â lower triangular Toeplitz,Bâ¢C=A},â‰”absentinfimumconditional-setMaxErrğµğ¶formulae-sequenceğµğ¶superscriptâ„ğ‘›ğ‘›Â lower triangular Toeplitzğµğ¶ğ´\displaystyle\coloneqq\inf\left\\{\operatorname{MaxErr}(B,C):B,C\in\mathbb{R}^{% n\times n}\text{ lower triangular Toeplitz},BC=A\right\\},â‰” roman_inf { roman_MaxErr ( italic_B , italic_C ) : italic_B , italic_C âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT lower triangular Toeplitz , italic_B italic_C = italic_A } , |  | (2.22)  
---|---|---|---|---  
| ğ–®ğ—‰ğ—â¢(n)ğ–®ğ—‰ğ—ğ‘›\displaystyle\mathsf{Opt}(n)sansserif_Opt ( italic_n ) | â‰”inf{MaxErrâ¡(B,C):B,Câˆˆâ„nÃ—n,Bâ¢C=A},â‰”absentinfimumconditional-setMaxErrğµğ¶formulae-sequenceğµğ¶superscriptâ„ğ‘›ğ‘›ğµğ¶ğ´\displaystyle\coloneqq\inf\left\\{\operatorname{MaxErr}(B,C):B,C\in\mathbb{R}^{% n\times n},BC=A\right\\},â‰” roman_inf { roman_MaxErr ( italic_B , italic_C ) : italic_B , italic_C âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT , italic_B italic_C = italic_A } , |  | (2.23)  
  
where
MaxErrâ¡(B,C)â‰”â€–Bâ€–2â†’âˆâ¢â€–Câ€–1â†’2=maxiâ¢âˆ‘jBi,j2â¢maxjâ¢âˆ‘iCi,j2â‰”MaxErrğµğ¶subscriptnormğµâ†’2subscriptnormğ¶â†’12subscriptğ‘–subscriptğ‘—superscriptsubscriptğµğ‘–ğ‘—2subscriptğ‘—subscriptğ‘–superscriptsubscriptğ¶ğ‘–ğ‘—2\operatorname{MaxErr}(B,C)\coloneqq\|B\|_{2\to\infty}\|C\|_{1\to
2}=\sqrt{\max%
_{i}\sum_{j}B_{i,j}^{2}}\sqrt{\max_{j}\sum_{i}C_{i,j}^{2}}roman_MaxErr (
italic_B , italic_C ) â‰” âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ
end_POSTSUBSCRIPT âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2
end_POSTSUBSCRIPT = square-root start_ARG roman_max start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT
italic_B start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG square-root start_ARG
roman_max start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT âˆ‘
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT
italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT end_ARG.

By PropositionÂ 2.2 and LemmaÂ 2.1, for all integers nâ‰¥1ğ‘›1n\geq 1italic_n
â‰¥ 1, we have

| 1+Î³âˆ’1+logâ¡(n)Ï€â‰¤ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)=1+âˆ‘k=1nâˆ’1(2âˆ’2â¢kâ¢(2â¢kk))2â‰¤1+Î³+logâ¡(n)Ï€.1ğ›¾1ğ‘›ğœ‹ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›1superscriptsubscriptğ‘˜1ğ‘›1superscriptsuperscript22ğ‘˜binomial2ğ‘˜ğ‘˜21ğ›¾ğ‘›ğœ‹1+\frac{\gamma-1+\log(n)}{\pi}\leq\mathsf{OptLTToe}(n)=1+\sum_{k=1}^{n-1}\left% (2^{-2k}{2k\choose k}\right)^{2}\leq 1+\frac{\gamma+\log(n)}{\pi}.1 + divide start_ARG italic_Î³ - 1 + roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG â‰¤ sansserif_OptLTToe ( italic_n ) = 1 + âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( 2 start_POSTSUPERSCRIPT - 2 italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ 1 + divide start_ARG italic_Î³ + roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG . |  | (2.24)  
---|---|---|---  
  
The lower bound of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitematouvsek2020factorization
in Eq.Â 2.9 states the optimal over all factorizations is

| ğ–®ğ—‰ğ—â¢(n)=Î³2â¢(A(n))â‰¥1+logâ¡(2â¢n+1)Ï€.ğ–®ğ—‰ğ—ğ‘›subscriptğ›¾2superscriptğ´ğ‘›12ğ‘›1ğœ‹\mathsf{Opt}(n)=\gamma_{2}(A^{(n)})\geq 1+\frac{\log\left(2n+1\right)}{\pi}.sansserif_Opt ( italic_n ) = italic_Î³ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT ) â‰¥ 1 + divide start_ARG roman_log ( 2 italic_n + 1 ) end_ARG start_ARG italic_Ï€ end_ARG . |   
---|---|---  
  
Combining these bounds gives a bound on the gap between the optimal general
factorization and the optimal lower triangular Toeplitz factorization.

######  Corollary 2.4.

The gap between the lower triangular Toeplitz and general optimal
factorizations is

| ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)âˆ’ğ–®ğ—‰ğ—â¢(n)â‰¤(1+Î³+logâ¡(n)Ï€)âˆ’(1+logâ¡(2â¢n+1)Ï€)â‰¤Î³+logâ¡(2)Ï€â‰¤0.405.ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›ğ–®ğ—‰ğ—ğ‘›1ğ›¾ğ‘›ğœ‹12ğ‘›1ğœ‹ğ›¾2ğœ‹0.405\mathsf{OptLTToe}(n)-\mathsf{Opt}(n)\leq\left(1+\frac{\gamma+\log(n)}{\pi}% \right)-\left(1+\frac{\log(2n+1)}{\pi}\right)\leq\frac{\gamma+\log(2)}{\pi}% \leq 0.405.sansserif_OptLTToe ( italic_n ) - sansserif_Opt ( italic_n ) â‰¤ ( 1 + divide start_ARG italic_Î³ + roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG ) - ( 1 + divide start_ARG roman_log ( 2 italic_n + 1 ) end_ARG start_ARG italic_Ï€ end_ARG ) â‰¤ divide start_ARG italic_Î³ + roman_log ( 2 ) end_ARG start_ARG italic_Ï€ end_ARG â‰¤ 0.405 . |   
---|---|---  
  
Numerically, we have
ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n)âˆ’ğ–®ğ—‰ğ—â¢(n)â‰¤0.365ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾ğ‘›ğ–®ğ—‰ğ—ğ‘›0.365\mathsf{OptLTToe}(n)-\mathsf{Opt}(n)\leq
0.365sansserif_OptLTToe ( italic_n ) - sansserif_Opt ( italic_n ) â‰¤ 0.365
for all nâ‰¥1ğ‘›1n\geq 1italic_n â‰¥ 1. FigureÂ 2 shows numerically how the
various known upper and lower bounds compare for differing values of
nğ‘›nitalic_n.

We conclude this subsection by remarking that, without the Toeplitz
constraint, we can assume that the factors are lower triangular without loss
of generality. This is a consequence of the fact that two factorizations
A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C and
A=B^â¢C^ğ´^ğµ^ğ¶A=\hat{B}\hat{C}italic_A = over^ start_ARG italic_B end_ARG
over^ start_ARG italic_C end_ARG are functionally equivalent as long as
Bâ¢BT=B^â¢B^Tğµsuperscriptğµğ‘‡^ğµsuperscript^ğµğ‘‡BB^{T}=\hat{B}\hat{B}^{T}italic_B
italic_B start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT = over^ start_ARG
italic_B end_ARG over^ start_ARG italic_B end_ARG start_POSTSUPERSCRIPT
italic_T end_POSTSUPERSCRIPT. To see why this fact is true, note that for
zâ†ğ’©â¢(0,Ïƒ2â¢I)â†ğ‘§ğ’©0superscriptğœ2ğ¼z\leftarrow\mathcal{N}(0,\sigma^{2}I)italic_z
â† caligraphic_N ( 0 , italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
italic_I ), the distribution of Bâ¢zğµğ‘§Bzitalic_B italic_z is
ğ’©â¢(0,Ïƒ2â¢Bâ¢BT)ğ’©0superscriptğœ2ğµsuperscriptğµğ‘‡\mathcal{N}(0,\sigma^{2}BB^{T})caligraphic_N
( 0 , italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_B italic_B
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ). So if
Bâ¢BT=B^â¢B^Tğµsuperscriptğµğ‘‡^ğµsuperscript^ğµğ‘‡BB^{T}=\hat{B}\hat{B}^{T}italic_B
italic_B start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT = over^ start_ARG
italic_B end_ARG over^ start_ARG italic_B end_ARG start_POSTSUPERSCRIPT
italic_T end_POSTSUPERSCRIPT, then Bâ¢zğµğ‘§Bzitalic_B italic_z and
B^â¢z^ğµğ‘§\hat{B}zover^ start_ARG italic_B end_ARG italic_z have the exact
same distribution. Note that this fact is specific to the Gaussian
distribution. Given this fact, we can take an arbitrary factorization
A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C and perform a Cholesky
decomposition of Bâ¢BTğµsuperscriptğµğ‘‡BB^{T}italic_B italic_B
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT to obtain a lower
triangular B^^ğµ\hat{B}over^ start_ARG italic_B end_ARG satisfying
Bâ¢BT=B^â¢B^Tğµsuperscriptğµğ‘‡^ğµsuperscript^ğµğ‘‡BB^{T}=\hat{B}\hat{B}^{T}italic_B
italic_B start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT = over^ start_ARG
italic_B end_ARG over^ start_ARG italic_B end_ARG start_POSTSUPERSCRIPT
italic_T end_POSTSUPERSCRIPT. However, if we restrict to Toeplitz matrices,
then we cannot assume they are lower triangular without loss of generality,
since the Cholesky decomposition may not preserve this structure.

###  2.3 Applications of Matrix Factorizations in Machine Learning

In the recent years, Matrix Factorization (MF) have found extensive use both
in obtaining optimal private regret/stochastic convex optimization (SCO)
guaranteesÂ [thakurta2013nearly, agarwal2017price, kairouz2021practical,
asi2023near, Cutosky21], and in practical deploymentsÂ [kairouz2021practical,
denisov22matfact, choquette22multiepoch, choquette2024amplified,
xu2023federated]. The main observation that maps MF to the (convex)
optimization setup is that (unconstrained) stochastic graident descent update
with constant learning rate can be viewed as computing prefix sums over
adaptively chosen gradient vectors141414There are more general mappings for
constrained optimization, and adaptive optimizers like momentum methods, but a
detailed discussion on those is tangential to this work.. Differentially
Private Follow-the-regularized-leader (DP-FTRL)Â [kairouz2021practical,
thakurta2013nearly] is an optimization algorithm that arises naturally from
this mapping. DP-FTRL has found extensive usage in production grade deployment
of DP learning. For example, all next-word-prediction models on Android Gboard
is trained with DP-FTRLÂ [xu2023federated].

For a given set of â„“2subscriptâ„“2\ell_{2}roman_â„“ start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT-Lipschitz loss functions
{f1â¢(Î¸),â€¦,fnâ¢(Î¸)}subscriptğ‘“1ğœƒâ€¦subscriptğ‘“ğ‘›ğœƒ\\{f_{1}(\theta),\ldots,f_{n}(\theta)\\}{
italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ( italic_Î¸ ) , â€¦ ,
italic_f start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ ) } (where
each loss function fisubscriptğ‘“ğ‘–f_{i}italic_f start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT can be thought of as the optimization loss on a disjoint
minibatch of data samples), the simplest version of DP-FTRL can be described
as follows:

| DP-FTRL:Î¸tâ†âˆ’Î·â¢âˆ‘i=0tâˆ’1âˆ‡fiâ¢(Î¸i)+z^i.â†DP-FTRL:subscriptğœƒğ‘¡ğœ‚superscriptsubscriptğ‘–0ğ‘¡1âˆ‡subscriptğ‘“ğ‘–subscriptğœƒğ‘–subscript^ğ‘§ğ‘–\texttt{DP-FTRL:}\ \ \ \ \theta_{t}\leftarrow-\eta\sum_{i=0}^{t-1}\nabla f_{i}% (\theta_{i})+\hat{z}_{i}.DP-FTRL: italic_Î¸ start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT â† - italic_Î· âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_t - 1 end_POSTSUPERSCRIPT âˆ‡ italic_f start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) + over^ start_ARG italic_z end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT . |  | (2.25)  
---|---|---|---  
  
InÂ Eq.Â 2.25, Î·ğœ‚\etaitalic_Î· is the learning rate, and
{z^t}subscript^ğ‘§ğ‘¡\\{\hat{z}_{t}\\}{ over^ start_ARG italic_z end_ARG
start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT } are the correlated Gaussian
noise added to ensure that the computation of the sequence of
{Î¸t}subscriptğœƒğ‘¡\\{\theta_{t}\\}{ italic_Î¸ start_POSTSUBSCRIPT italic_t
end_POSTSUBSCRIPT }â€™s are differentially private. Mapping to the MF view inÂ
Eq.Â 1.1, the adaptively chosen data set is set to
x={âˆ‡ftâ¢(Î¸t):tâˆˆ[n]}ğ‘¥conditional-
setâˆ‡subscriptğ‘“ğ‘¡subscriptğœƒğ‘¡ğ‘¡delimited-[]ğ‘›x=\\{\nabla
f_{t}(\theta_{t}):t\in[n]\\}italic_x = { âˆ‡ italic_f start_POSTSUBSCRIPT
italic_t end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_t
end_POSTSUBSCRIPT ) : italic_t âˆˆ [ italic_n ] }, and the noise sequence
{z^t}subscript^ğ‘§ğ‘¡\\{\hat{z}_{t}\\}{ over^ start_ARG italic_z end_ARG
start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT } is set to Bâ¢zğµğ‘§Bzitalic_B
italic_z, where
zâ†ğ’©â¢(0,Ïƒ2â¢I)â†ğ‘§ğ’©0superscriptğœ2ğ¼z\leftarrow\mathcal{N}(0,\sigma^{2}I)italic_z
â† caligraphic_N ( 0 , italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
italic_I ). DP-FTRL captures a large class of noise addition mechanisms
(parameterized by the specific factorization scheme A=Bâ¢Cğ´ğµğ¶A=BCitalic_A =
italic_B italic_C chosen). In particular, it captures DP-SGDÂ
[song2013stochastic, BST14, DP-DL] (another heavily used private learning
algorithm) as a special caseÂ [choquette2024amplified], and has much better
privacy/utility trade-offs in generalÂ [choquette2023correlated].
[kairouz2021practical, asi2023near] showed that for obtaining the best
regret/SCO guarantees from DP-FTRL style algorithms, it suffices to optimize
for MaxErrâ¡(B,C)MaxErrğµğ¶\operatorname{MaxErr}(B,C)roman_MaxErr ( italic_B ,
italic_C ) to instantiate the noise mechanism inÂ Eq.Â 2.25.

One major challenge in large deployments of DP-FTRL is that noise generation
for an arbitrary matrix mechanism can be prohibitively expensive, as discussed
in SectionÂ 1. Our work provides a practical approach that only requires a
constant factor blow-up (usually at most 4-6 times) in memory as compared to
that of DP-SGD, and at privacy/utility trade-off comparable to DP-FTRL with an
optimal matrix-factorization mechanism. (DP-SGD adds independent Gaussian
noise to the gradients at each state update.)

###  2.4 Other Related Work

#### Beyond additive noise:

Our algorithms are based on adding Gaussian noise (with a carefully chosen
covariance). Since the noise is additive, the error is independent of the
number of data points.151515The error of our algorithms depends on the number
of iterations nğ‘›nitalic_n. This is usually closely related to the number of
data points |x|ğ‘¥|x|| italic_x |, but, in general, these two quantities can
be unrelated. The expected maximum error is

| âˆ€xâ¢ğ”¼â„³â¢[â€–â„³â¢(x)âˆ’Aâ¢xâ€–âˆ]=ğ”¼â„³â¢[maxkâ¡|(â„³â¢(x)âˆ’Aâ¢x)k|]â‰¤Oâ¢(logâ¡(n))3/2,for-allğ‘¥â„³ğ”¼delimited-[]subscriptnormâ„³ğ‘¥ğ´ğ‘¥â„³ğ”¼delimited-[]subscriptğ‘˜subscriptâ„³ğ‘¥ğ´ğ‘¥ğ‘˜ğ‘‚superscriptğ‘›32\forall x~{}~{}~{}{\underset{\mathcal{M}}{\mathbb{E}}\left[\|\mathcal{M}(x)-Ax% \|_{\infty}\right]}={\underset{\mathcal{M}}{\mathbb{E}}\left[\max_{k}|(% \mathcal{M}(x)-Ax)_{k}|\right]}\leq O(\log(n))^{3/2},âˆ€ italic_x undercaligraphic_M start_ARG blackboard_E end_ARG [ âˆ¥ caligraphic_M ( italic_x ) - italic_A italic_x âˆ¥ start_POSTSUBSCRIPT âˆ end_POSTSUBSCRIPT ] = undercaligraphic_M start_ARG blackboard_E end_ARG [ roman_max start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | ( caligraphic_M ( italic_x ) - italic_A italic_x ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | ] â‰¤ italic_O ( roman_log ( italic_n ) ) start_POSTSUPERSCRIPT 3 / 2 end_POSTSUPERSCRIPT , |  | (2.26)  
---|---|---|---  
  
while the maximum expected error is

| âˆ€xâ¢maxkâ¡ğ”¼â„³â¢[|(â„³â¢(x)âˆ’Aâ¢x)k|]â‰¤Oâ¢(logâ¡(n)).for-allğ‘¥subscriptğ‘˜â„³ğ”¼delimited-[]subscriptâ„³ğ‘¥ğ´ğ‘¥ğ‘˜ğ‘‚ğ‘›\forall x~{}~{}~{}\max_{k}{\underset{\mathcal{M}}{\mathbb{E}}\left[|(\mathcal{% M}(x)-Ax)_{k}|\right]}\leq O(\log(n)).âˆ€ italic_x roman_max start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT undercaligraphic_M start_ARG blackboard_E end_ARG [ | ( caligraphic_M ( italic_x ) - italic_A italic_x ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | ] â‰¤ italic_O ( roman_log ( italic_n ) ) . |  | (2.27)  
---|---|---|---  
  
The additional logâ¡(n)ğ‘›\sqrt{\log(n)}square-root start_ARG roman_log (
italic_n ) end_ARG term in EquationÂ 2.26 compared to EquationÂ 2.27 comes
from taking a union bound over nğ‘›nitalic_n Gaussians. Note that, for
simplicity, we suppress the privacy parameters; to achieve
(Îµ,Î´)ğœ€ğ›¿(\varepsilon,\delta)( italic_Îµ , italic_Î´ )-differential
privacy, the error above scales with
1Îµâ¢logâ¡(1/Î´)1ğœ€1ğ›¿\frac{1}{\varepsilon}\log(1/\delta)divide start_ARG 1
end_ARG start_ARG italic_Îµ end_ARG roman_log ( 1 / italic_Î´ ); to achieve
ÏğœŒ\rhoitalic_Ï-zCDP [bun2016concentrated], the error above scales with
1/Ï1ğœŒ1/\sqrt{\rho}1 / square-root start_ARG italic_Ï end_ARG.

The bound in Eq.Â 2.27 on the maximum expected error is tight up to constants
in the streaming setting â€“ in fact the lower bound holds for _average_
expected error:

| âˆ€â„³â¢âˆƒxâ¢1nâ¢âˆ‘kğ”¼â„³â¢[|(â„³â¢(x)âˆ’Aâ¢x)k|]â‰¥Î©â¢(logâ¡(n)),for-allâ„³ğ‘¥1ğ‘›subscriptğ‘˜â„³ğ”¼delimited-[]subscriptâ„³ğ‘¥ğ´ğ‘¥ğ‘˜Î©ğ‘›\forall\mathcal{M}~{}\exists x~{}~{}~{}\frac{1}{n}\sum_{k}{\underset{\mathcal{% M}}{\mathbb{E}}\left[|(\mathcal{M}(x)-Ax)_{k}|\right]}\geq\Omega(\log(n)),âˆ€ caligraphic_M âˆƒ italic_x divide start_ARG 1 end_ARG start_ARG italic_n end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT undercaligraphic_M start_ARG blackboard_E end_ARG [ | ( caligraphic_M ( italic_x ) - italic_A italic_x ) start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | ] â‰¥ roman_Î© ( roman_log ( italic_n ) ) , |  | (2.28)  
---|---|---|---  
  
assuming â„³â„³\mathcal{M}caligraphic_M is differentially private [henzinger2023almost, Theorem 4]. However, the bound in Eq.Â 2.26 on expected maximum error is _not_ tight if we move beyond additive noise mechanisms [dwork2015pure]. \AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitedwork2015pure show that we can obtain an improved error guarantee:161616\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitedwork2015pure stated this result for pure differential privacy, with log(|x|)2\log(|x|)^{2}roman_log ( | italic_x | ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT instead of log(|x|)3/2\log(|x|)^{3/2}roman_log ( | italic_x | ) start_POSTSUPERSCRIPT 3 / 2 end_POSTSUPERSCRIPT.

| âˆƒâ„³âˆ€xğ”¼â„³[âˆ¥â„³(x)âˆ’Axâˆ¥âˆ]â‰¤O(log(n)+log(|x|)3/2),\exists\mathcal{M}~{}\forall x~{}~{}~{}{\underset{\mathcal{M}}{\mathbb{E}}% \left[\|\mathcal{M}(x)-Ax\|_{\infty}\right]}\leq O(\log(n)+\log(|x|)^{3/2}),âˆƒ caligraphic_M âˆ€ italic_x undercaligraphic_M start_ARG blackboard_E end_ARG [ âˆ¥ caligraphic_M ( italic_x ) - italic_A italic_x âˆ¥ start_POSTSUBSCRIPT âˆ end_POSTSUBSCRIPT ] â‰¤ italic_O ( roman_log ( italic_n ) + roman_log ( | italic_x | ) start_POSTSUPERSCRIPT 3 / 2 end_POSTSUPERSCRIPT ) , |  | (2.29)  
---|---|---|---  
  
where |x|ğ‘¥|x|| italic_x | is the number of data points.171717In most of the differential privacy literature nğ‘›nitalic_n is the number of data points / people, but we use nğ‘›nitalic_n for the number of iterations; |x|ğ‘¥|x|| italic_x | should be read as the size of the dataset xğ‘¥xitalic_x. The high level idea is to â€œfreezeâ€ the output of â„³â„³\mathcal{M}caligraphic_M until the partial sum has changed significantly and only then update the output. This works because deciding whether the partial sum has changed significantly is easier than evaluating it. Specifically, we can use the so-called â€œsparse vectorâ€ technique to decide when to update. This algorithm is a reduction â€“ when it does decide to update, it uses additive noise â€“ the â€œwinâ€ is that we need to use additive noise for â‰¤|x|absentğ‘¥\leq|x|â‰¤ | italic_x | updates, rather than nğ‘›nitalic_n updates. Thus our improvements for additive noise mechanisms can be applied in this setting.

Eq.Â 2.29 is only an improvement over Eq.Â 2.26 in the sparse setting (|x|â‰ªnmuch-less-thanğ‘¥ğ‘›|x|\ll n| italic_x | â‰ª italic_n). Machine learning applications are typically dense (|x|â‰¥nğ‘¥ğ‘›|x|\geq n| italic_x | â‰¥ italic_n).

#### Offline setting:

Our work is in the streaming setting, where we must output an approximation to
each partial sum as soon as it is complete. It is also natural to consider the
offline setting, where we are given the entire input at once. In the offline
setting, the memory constraints that we focus on are not as relevant.

The offline version of continual counting is known as threshold queries or
quantiles and this task has been studied extensively [beimel2013private,
bun2015differentially, bun2018composable, alon2019private,
kaplan2020privately, gillenwater2021differentially, cohen2023optimal]. The
offline setting permits more sophisticated algorithms, which achieve
asymptotically better error guarantees.
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitecohen2023optimal give an
(Îµ,Î´)ğœ€ğ›¿(\varepsilon,\delta)( italic_Îµ , italic_Î´ )-differentially
private algorithm â„³â„³\mathcal{M}caligraphic_M with error

| âˆ€xâ¢ğ”¼â„³â¢[â€–â„³â¢(x)âˆ’Aâ¢xâ€–âˆ]â‰¤O~â¢(1Îµâ¢log2â¡(1/Î´)â¢logâˆ—â¡(n))for-allğ‘¥â„³ğ”¼delimited-[]subscriptnormâ„³ğ‘¥ğ´ğ‘¥~ğ‘‚1ğœ€superscript21ğ›¿superscriptğ‘›\forall x~{}~{}~{}{\underset{\mathcal{M}}{\mathbb{E}}\left[\|\mathcal{M}(x)-Ax% \|_{\infty}\right]}\leq\widetilde{O}\left(\frac{1}{\varepsilon}\log^{2}(1/% \delta)\log^{*}(n)\right)âˆ€ italic_x undercaligraphic_M start_ARG blackboard_E end_ARG [ âˆ¥ caligraphic_M ( italic_x ) - italic_A italic_x âˆ¥ start_POSTSUBSCRIPT âˆ end_POSTSUBSCRIPT ] â‰¤ over~ start_ARG italic_O end_ARG ( divide start_ARG 1 end_ARG start_ARG italic_Îµ end_ARG roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( 1 / italic_Î´ ) roman_log start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT ( italic_n ) ) |  | (2.30)  
---|---|---|---  
  
Note that offline algorithms are not applicable in the machine learning
applications discussed in SectionÂ 2.3.

#### Pure differential privacy:

The early work on continual counting [Dwork-continual, CSS11-continual, xiao2010differential] works under pure (Îµ,0)ğœ€0(\varepsilon,0)( italic_Îµ , 0 )-differential privacy, which rules out Gaussian noise. Instead Laplace noise can be used. In this case, we must bound the L1subscriptğ¿1L_{1}italic_L start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT sensitivity. So the objective for the matrix factorization is to minimize â€–Bâ€–2â†’âˆâ‹…â€–Câ€–1â†’1â‹…subscriptnormğµâ†’2subscriptnormğ¶â†’11\|B\|_{2\to\infty}\cdot\|C\|_{1\to 1}âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‹… âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 1 end_POSTSUBSCRIPT, where â€–Câ€–1â†’1=maxjâ¢âˆ‘i|Ci,j|subscriptnormğ¶â†’11subscriptğ‘—subscriptğ‘–subscriptğ¶ğ‘–ğ‘—\|C\|_{1\to 1}=\max_{j}\sum_{i}|C_{i,j}|âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 1 end_POSTSUBSCRIPT = roman_max start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT | italic_C start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT | is the maximum 1111-norm of a column. This subtly changes the problem. The binary tree factorization still works well with this objective. However, Toeplitz factorizations do not work as well. Intuitively, the binary tree factorization relies on sparsity which controls both the 1111\- and 2222-norms, whereas Toeplitz factorizations produce dense matrices for which the the 1111\- and 2222-norms differ substantially.

#### Factoring other matrices:

We exclusively look at factorizing the all-ones lower triangular matrix. This
is a natural and well-motivated problem. However, there is also work on
factorizing other matrices.

Most closely related to the all-ones lower triangular matrix Ağ´Aitalic_A,
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitemathias1993hadamard
gives exact expressions for
Î³2â¢(A+AT)subscriptğ›¾2ğ´superscriptğ´ğ‘‡\gamma_{2}(A+A^{T})italic_Î³
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A + italic_A
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) and
Î³2â¢(A+AT+I)subscriptğ›¾2ğ´superscriptğ´ğ‘‡ğ¼\gamma_{2}(A+A^{T}+I)italic_Î³
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ( italic_A + italic_A
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT + italic_I ).

There is a different line of work [li2015matrix, mckenna2021hdmm] considering
factorizations of generic workload matrices, which have a completely different
structure than the matrices we consider.

### Notation Summary

Before proceeding, we briefly summarize the key symbols and notation used
throughout:

nğ‘›nitalic_n | Number of steps on which DP estimates are released.  
---|---  
dğ‘‘ditalic_d | Order of recurrence / degree / number of memory buffers.  
mğ‘šmitalic_m | Dimension of per-step user contributions (e.g., model size).  
[k]delimited-[]ğ‘˜[k][ italic_k ] |  ={0,â€¦,kâˆ’1}absent0â€¦ğ‘˜1=\\{0,\dots,k-1\\}= { 0 , â€¦ , italic_k - 1 } for kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1.  
â„•â„•\mathbb{N}blackboard_N |  ={0,1,2,â€¦}absent012â€¦=\\{0,1,2,\dots\\}= { 0 , 1 , 2 , â€¦ }, the natural numbers including zero.  
fğ‘“fitalic_f | Rational (generating) function where fâ¢(x)=f0+f1â¢x+f2â¢x2â¢â‹¯ğ‘“ğ‘¥subscriptğ‘“0subscriptğ‘“1ğ‘¥subscriptğ‘“2superscriptğ‘¥2â‹¯f(x)=f_{0}+f_{1}x+f_{2}x^{2}\cdotsitalic_f ( italic_x ) = italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT + italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_x + italic_f start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‹¯.  
pğ‘pitalic_p | Polynomial of degree dğ‘‘ditalic_d with pâ¢(x)=p0+p1â¢x+p2â¢x2+â‹¯+pdâ¢xdğ‘ğ‘¥subscriptğ‘0subscriptğ‘1ğ‘¥subscriptğ‘2superscriptğ‘¥2â‹¯subscriptğ‘ğ‘‘superscriptğ‘¥ğ‘‘p(x)=p_{0}+p_{1}x+p_{2}x^{2}+\cdots+p_{d}x^{d}italic_p ( italic_x ) = italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT + italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_x + italic_p start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + â‹¯ + italic_p start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT.  
(fk)k=0âˆsuperscriptsubscriptsubscriptğ‘“ğ‘˜ğ‘˜0(f_{k})_{k=0}^{\infty}( italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | Sequence f0,f1,â€¦subscriptğ‘“0subscriptğ‘“1â€¦f_{0},f_{1},\dotsitalic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_f start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , â€¦ with corresponding generating function fğ‘“fitalic_f.  
Mâ¡(f,n)âˆˆâ„nÃ—nMğ‘“ğ‘›superscriptâ„ğ‘›ğ‘›\operatorname{M}(f,n)\in\mathbb{R}^{n\times n}roman_M ( italic_f , italic_n ) âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT | Lower-triangular Toeplitz matrices defined by a generating function fğ‘“fitalic_f.  
â‹…â‹…\cdotâ‹… | Context-dependent multiplication, used where it improves readability.  
fâˆ—rğ‘“ğ‘Ÿf*ritalic_f âˆ— italic_r | Cauchy product / convolution (fâˆ—r)n=âˆ‘i=0nfiâ‹…rnâˆ’isubscriptğ‘“ğ‘Ÿğ‘›superscriptsubscriptğ‘–0ğ‘›â‹…subscriptğ‘“ğ‘–subscriptğ‘Ÿğ‘›ğ‘–(f*r)_{n}=\sum_{i=0}^{n}f_{i}\cdot r_{n-i}( italic_f âˆ— italic_r ) start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT â‹… italic_r start_POSTSUBSCRIPT italic_n - italic_i end_POSTSUBSCRIPT.  
ATsuperscriptğ´ğ‘‡A^{T}italic_A start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT | Transpose of a matrix Ağ´Aitalic_A.  
Aâ‹†superscriptğ´â‹†A^{\star}italic_A start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT | A matrix Ağ´Aitalic_A that is â€œoptimalâ€ in a context-dependent sense.  
Aâ€ superscriptğ´â€ A^{\dagger}italic_A start_POSTSUPERSCRIPT â€ end_POSTSUPERSCRIPT | Moore-Penrose pseudoinverse of matrix Ağ´Aitalic_A.  
Ai,jsubscriptğ´ğ‘–ğ‘—A_{i,j}italic_A start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT | The (i,j)thsuperscriptğ‘–ğ‘—th(i,j)^{\text{th}}( italic_i , italic_j ) start_POSTSUPERSCRIPT th end_POSTSUPERSCRIPT entry of matrix Ağ´Aitalic_A, zero-indexed.  
Ai,:subscriptğ´ğ‘–:A_{i,:}italic_A start_POSTSUBSCRIPT italic_i , : end_POSTSUBSCRIPT and A:,jsubscriptğ´:ğ‘—A_{:,j}italic_A start_POSTSUBSCRIPT : , italic_j end_POSTSUBSCRIPT | The ithsuperscriptğ‘–thi^{\text{th}}italic_i start_POSTSUPERSCRIPT th end_POSTSUPERSCRIPT row and jthsuperscriptğ‘—thj^{\text{th}}italic_j start_POSTSUPERSCRIPT th end_POSTSUPERSCRIPT column.  
â€–Aâ€–Fsubscriptnormğ´ğ¹\left\|A\right\|_{F}âˆ¥ italic_A âˆ¥ start_POSTSUBSCRIPT italic_F end_POSTSUBSCRIPT | The Frobenius norm of a matrix Ağ´Aitalic_A.  
Aâˆˆâ„nÃ—nğ´superscriptâ„ğ‘›ğ‘›A\in\mathbb{R}^{n\times n}italic_A âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT | Specifically, the lower-triangular matrix of ones to be factorized as A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C.  
log\logroman_log | Natural logarithm, logâ¡(2.718)â‰ˆ12.7181\log(2.718)\approx 1roman_log ( 2.718 ) â‰ˆ 1.  
Table 1: Summary of notation

##  3 Efficiently-Sampleable Factorization via Rational Generating Functions

In this section we describe our main algorithmic tools. First (in Â§3.1) we
present the view of lower triangular Toeplitz matrices in terms of generating
functions or sequences. This is a convenient mathematical formalism for
analysis [fichtenberger2022constant]. Second (in Â§3.2) we discuss the special
case of rational generating functions or, equivalently, constant-recurrent
sequences. Our results focus on this special case, as the additional structure
is useful for our algorithms; this structure is where we depart from the prior
literature. Third (in Â§3.3) we present our algorithm for sampling from lower
triangular Toeplitz matrices with rational generating functions (that is, the
multiplication algorithm for BLT matrices). In subsequent sections (Â§4, Â§5)
we instantiate these rational generating functions.

###  3.1 Sequences, Lower Triangular Toeplitz Matrices, & Generating Functions

We begin by describing the generating function view of lower triangular
Toeplitz matrices used by
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant.
Our analysis moves fluidly between three different views of the same
mathematical object:

  * â€¢

The sequence
(fk)k=0âˆ=f0,f1,f2,â€¦superscriptsubscriptsubscriptğ‘“ğ‘˜ğ‘˜0subscriptğ‘“0subscriptğ‘“1subscriptğ‘“2â€¦(f_{k})_{k=0}^{\infty}=f_{0},f_{1},f_{2},\dots(
italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT
italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT =
italic_f start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_f
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_f start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT , â€¦ with
fkâˆˆâ„subscriptğ‘“ğ‘˜â„f_{k}\in\mathbb{R}italic_f start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT âˆˆ blackboard_R for each index kğ‘˜kitalic_k.

  * â€¢

The ordinary generating function of the sequence,
f:â„‚â†’â„‚:ğ‘“â†’â„‚â„‚f:\mathbb{C}\rightarrow\mathbb{C}italic_f :
blackboard_C â†’ blackboard_C,

| fâ¢(x)=âˆ‘k=0âˆfkâ¢xk=âˆ‘k=0âˆf(k)â¢(0)k!â¢xk.ğ‘“ğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘“ğ‘˜superscriptğ‘¥ğ‘˜superscriptsubscriptğ‘˜0superscriptğ‘“ğ‘˜0ğ‘˜superscriptğ‘¥ğ‘˜f(x)=\sum_{k=0}^{\infty}f_{k}x^{k}=\sum_{k=0}^{\infty}\frac{f^{(k)}(0)}{k!}x^{% k}.italic_f ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_f start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG italic_k ! end_ARG italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT . |   
---|---|---  
  
(It will be clear from context if fğ‘“fitalic_f refers to the sequence entries
or the generating function).

  * â€¢

The family of nÃ—nğ‘›ğ‘›{n\times n}italic_n Ã— italic_n lower-triangular
Toeplitz matrices
Mâ¢(f,n)âˆˆâ„nÃ—nğ‘€ğ‘“ğ‘›superscriptâ„ğ‘›ğ‘›M(f,n)\in\mathbb{R}^{n\times
n}italic_M ( italic_f , italic_n ) âˆˆ blackboard_R start_POSTSUPERSCRIPT
italic_n Ã— italic_n end_POSTSUPERSCRIPT for
nâˆˆâ„•ğ‘›â„•n\in\mathbb{N}italic_n âˆˆ blackboard_N that are generated by
fğ‘“fitalic_f as

| âˆ€i,jâˆˆ[n]Mâ¢(f,n)i,jâ‰”{fiâˆ’jÂ ifÂ â¢iâ‰¥j0Â ifÂ â¢i<j}formulae-sequencefor-allğ‘–ğ‘—delimited-[]ğ‘›â‰”ğ‘€subscriptğ‘“ğ‘›ğ‘–ğ‘—subscriptğ‘“ğ‘–ğ‘—Â ifÂ ğ‘–ğ‘—0Â ifÂ ğ‘–ğ‘—\forall i,j\in[n]~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}M(f,n)_{i,j}\coloneqq\left\\{% \begin{array}[]{cl}f_{i-j}&\text{ if }i\geq j\\\ 0&\text{ if }i<j\end{array}\right\\}âˆ€ italic_i , italic_j âˆˆ [ italic_n ] italic_M ( italic_f , italic_n ) start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT â‰” { start_ARRAY start_ROW start_CELL italic_f start_POSTSUBSCRIPT italic_i - italic_j end_POSTSUBSCRIPT end_CELL start_CELL if italic_i â‰¥ italic_j end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL if italic_i < italic_j end_CELL end_ROW end_ARRAY } |  | (3.1)  
---|---|---|---  
  
When the specific nğ‘›nitalic_n is unimportant or clear from context, we write
Mâ¢(f)ğ‘€ğ‘“M(f)italic_M ( italic_f ) to refer to any matrix in this family
(or equivalently, the infinite-dimensional linear operator).

As a canonical example, we have the all-ones sequence,

| (gk)k=0âˆ=1,1,1,1,â€¦,gâ¢(x)=11âˆ’x=âˆ‘k=0âˆxk,A(4)â‰”Mâ¢(g,4)=[1000110011101111]formulae-sequenceformulae-sequencesuperscriptsubscriptsubscriptğ‘”ğ‘˜ğ‘˜01111â€¦ğ‘”ğ‘¥11ğ‘¥superscriptsubscriptğ‘˜0superscriptğ‘¥ğ‘˜â‰”superscriptğ´4ğ‘€ğ‘”4matrix1000110011101111(g_{k})_{k=0}^{\infty}=1,1,1,1,\dots,\quad g(x)=\frac{1}{1-x}=\sum_{k=0}^{% \infty}x^{k},\quad A^{(4)}\coloneqq M(g,4)=\begin{bmatrix}1&0&0&0\\\ 1&1&0&0\\\ 1&1&1&0\\\ 1&1&1&1\\\ \end{bmatrix}( italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT = 1 , 1 , 1 , 1 , â€¦ , italic_g ( italic_x ) = divide start_ARG 1 end_ARG start_ARG 1 - italic_x end_ARG = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT , italic_A start_POSTSUPERSCRIPT ( 4 ) end_POSTSUPERSCRIPT â‰” italic_M ( italic_g , 4 ) = [ start_ARG start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARG ] |  | (3.2)  
---|---|---|---  
  
It is straightforward to see that addition (under the usual definitions) is
equivalent across all three representations, and (slightly less obviously) the
same fact holds for suitable definitions of multiplication. We denote the
Cauchy product or convolution âˆ—*âˆ— for sequences fğ‘“fitalic_f and
gğ‘”gitalic_g by

| (fk)k=0âˆâˆ—(gk)k=0âˆ=(hk)k=0âˆwherehkâ‰”âˆ‘i=0kfiâ‹…gkâˆ’i,formulae-sequencesuperscriptsubscriptsubscriptğ‘“ğ‘˜ğ‘˜0superscriptsubscriptsubscriptğ‘”ğ‘˜ğ‘˜0superscriptsubscriptsubscriptâ„ğ‘˜ğ‘˜0whereâ‰”subscriptâ„ğ‘˜superscriptsubscriptğ‘–0ğ‘˜â‹…subscriptğ‘“ğ‘–subscriptğ‘”ğ‘˜ğ‘–(f_{k})_{k=0}^{\infty}*(g_{k})_{k=0}^{\infty}=(h_{k})_{k=0}^{\infty}\quad\text% {where}\quad h_{k}\coloneqq\sum_{i=0}^{k}f_{i}\cdot g_{k-i},( italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT âˆ— ( italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT = ( italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT where italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT â‰” âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT â‹… italic_g start_POSTSUBSCRIPT italic_k - italic_i end_POSTSUBSCRIPT , |  | (3.3)  
---|---|---|---  
  
and write h=fâˆ—gâ„ğ‘“ğ‘”h=f*gitalic_h = italic_f âˆ— italic_g as a shorthand.

Then, the mathematical structure summarized in the following lemma is key to
our analysis:

######  Lemma 3.1.

Let fğ‘“fitalic_f, gğ‘”gitalic_g, and hâ„hitalic_h be ordinary generating
functions with corresponding sequences. Then the Cauchy product of sequences,
multiplication of the generating functions, and matrix multiplication are all
equivalent. That is,

| (h=fâˆ—g)âŸº(hâ¢(x)=fâ¢(x)â¢gâ¢(x))âŸº(âˆ€nâ¢Mâ¢(h,n)=Mâ¢(f,n)â‹…Mâ¢(g,n)).â„ğ‘“ğ‘”âŸºâ„ğ‘¥ğ‘“ğ‘¥ğ‘”ğ‘¥âŸºfor-allğ‘›ğ‘€â„ğ‘›â‹…ğ‘€ğ‘“ğ‘›ğ‘€ğ‘”ğ‘›\left(h=f*g\right)\quad\Longleftrightarrow\quad\big{(}h(x)=f(x)g(x)\big{)}% \quad\Longleftrightarrow\quad\big{(}\forall n~{}~{}M(h,n)=M(f,n)\cdot M(g,n)% \big{)}.( italic_h = italic_f âˆ— italic_g ) âŸº ( italic_h ( italic_x ) = italic_f ( italic_x ) italic_g ( italic_x ) ) âŸº ( âˆ€ italic_n italic_M ( italic_h , italic_n ) = italic_M ( italic_f , italic_n ) â‹… italic_M ( italic_g , italic_n ) ) . |   
---|---|---  
  
Similarly the usual definitions of addition are equivalent:

| (âˆ€iâ¢hi=fi+gi)âŸº(hâ¢(x)=fâ¢(x)+gâ¢(x))âŸº(âˆ€nâ¢Mâ¢(h,n)=Mâ¢(f,n)+Mâ¢(g,n)).for-allğ‘–subscriptâ„ğ‘–subscriptğ‘“ğ‘–subscriptğ‘”ğ‘–âŸºâ„ğ‘¥ğ‘“ğ‘¥ğ‘”ğ‘¥âŸºfor-allğ‘›ğ‘€â„ğ‘›ğ‘€ğ‘“ğ‘›ğ‘€ğ‘”ğ‘›\big{(}\forall i~{}~{}h_{i}=f_{i}+g_{i}\big{)}\quad\Longleftrightarrow\quad% \big{(}h(x)=f(x)+g(x)\big{)}\quad\Longleftrightarrow\quad\big{(}\forall n~{}~{% }M(h,n)=M(f,n)+M(g,n)\big{)}.( âˆ€ italic_i italic_h start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = italic_f start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT + italic_g start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) âŸº ( italic_h ( italic_x ) = italic_f ( italic_x ) + italic_g ( italic_x ) ) âŸº ( âˆ€ italic_n italic_M ( italic_h , italic_n ) = italic_M ( italic_f , italic_n ) + italic_M ( italic_g , italic_n ) ) . |   
---|---|---  
  
###### Proof.

The results for sequences and their ordinary generating functions are well
known, see e.g.
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitekauers11concrete, and
the results for addition are immediate. Hence, it is sufficient to show
hâ¢(x)=fâ¢(x)â¢gâ¢(x)â„ğ‘¥ğ‘“ğ‘¥ğ‘”ğ‘¥h(x)=f(x)g(x)italic_h ( italic_x ) =
italic_f ( italic_x ) italic_g ( italic_x ) iff
âˆ€nâˆˆâ„•,Mâ¢(h,n)=Mâ¢(f,n)â‹…Mâ¢(g,n).formulae-sequencefor-
allğ‘›â„•ğ‘€â„ğ‘›â‹…ğ‘€ğ‘“ğ‘›ğ‘€ğ‘”ğ‘›\forall
n\in\mathbb{N},M(h,n)=M(f,n)\cdot M(g,n).âˆ€ italic_n âˆˆ blackboard_N ,
italic_M ( italic_h , italic_n ) = italic_M ( italic_f , italic_n ) â‹…
italic_M ( italic_g , italic_n ) .

Fix i,jâˆˆ[n]ğ‘–ğ‘—delimited-[]ğ‘›i,j\in[n]italic_i , italic_j âˆˆ [ italic_n
]. If i<jğ‘–ğ‘—i<jitalic_i < italic_j, then
Mâ¢(h,n)i,j=0ğ‘€subscriptâ„ğ‘›ğ‘–ğ‘—0M(h,n)_{i,j}=0italic_M ( italic_h ,
italic_n ) start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = 0 and
(Mâ¢(f,n)â‹…Mâ¢(g,n))i,j=âˆ‘kâˆˆ[n]Mâ¢(f,n)i,kâ‹…Mâ¢(g,n)k,j=âˆ‘k0subscriptâ‹…ğ‘€ğ‘“ğ‘›ğ‘€ğ‘”ğ‘›ğ‘–ğ‘—subscriptğ‘˜delimited-[]ğ‘›â‹…ğ‘€subscriptğ‘“ğ‘›ğ‘–ğ‘˜ğ‘€subscriptğ‘”ğ‘›ğ‘˜ğ‘—subscriptğ‘˜0(M(f,n)\cdot
M(g,n))_{i,j}=\sum_{k\in[n]}M(f,n)_{i,k}\cdot M(g,n)_{k,j}=\sum_{% k}0(
italic_M ( italic_f , italic_n ) â‹… italic_M ( italic_g , italic_n ) )
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = âˆ‘
start_POSTSUBSCRIPT italic_k âˆˆ [ italic_n ] end_POSTSUBSCRIPT italic_M (
italic_f , italic_n ) start_POSTSUBSCRIPT italic_i , italic_k
end_POSTSUBSCRIPT â‹… italic_M ( italic_g , italic_n ) start_POSTSUBSCRIPT
italic_k , italic_j end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT 0, since, for all kâˆˆ[n]ğ‘˜delimited-[]ğ‘›k\in[n]italic_k
âˆˆ [ italic_n ], either i<kğ‘–ğ‘˜i<kitalic_i < italic_k, whence
Mâ¢(f,n)i,k=0ğ‘€subscriptğ‘“ğ‘›ğ‘–ğ‘˜0M(f,n)_{i,k}=0italic_M ( italic_f ,
italic_n ) start_POSTSUBSCRIPT italic_i , italic_k end_POSTSUBSCRIPT = 0, or
k<jğ‘˜ğ‘—k<jitalic_k < italic_j, whence
Mâ¢(g,n)k,j=0ğ‘€subscriptğ‘”ğ‘›ğ‘˜ğ‘—0M(g,n)_{k,j}=0italic_M ( italic_g ,
italic_n ) start_POSTSUBSCRIPT italic_k , italic_j end_POSTSUBSCRIPT = 0, (or
both). Thus we can assume iâ‰¥jğ‘–ğ‘—i\geq jitalic_i â‰¥ italic_j.

By the product rule and induction, we have the derivative
h(â„“)â¢(x)=âˆ‘k=0â„“(â„“k)â¢f(â„“âˆ’k)â¢(x)â‹…g(k)â¢(x)superscriptâ„â„“ğ‘¥superscriptsubscriptğ‘˜0â„“â‹…binomialâ„“ğ‘˜superscriptğ‘“â„“ğ‘˜ğ‘¥superscriptğ‘”ğ‘˜ğ‘¥h^{(\ell)}(x)=\sum_{k=0}^{\ell}{\ell\choose
k}f^{(\ell-k)}(x)\cdot g^{(k)}(x)italic_h start_POSTSUPERSCRIPT ( roman_â„“ )
end_POSTSUPERSCRIPT ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT (
binomial start_ARG roman_â„“ end_ARG start_ARG italic_k end_ARG ) italic_f
start_POSTSUPERSCRIPT ( roman_â„“ - italic_k ) end_POSTSUPERSCRIPT ( italic_x
) â‹… italic_g start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT (
italic_x ) for all â„“â‰¥0â„“0\ell\geq 0roman_â„“ â‰¥ 0 and all applicable
xğ‘¥xitalic_x. Thus

| Mâ¢(h,n)i,jğ‘€subscriptâ„ğ‘›ğ‘–ğ‘—\displaystyle M(h,n)_{i,j}italic_M ( italic_h , italic_n ) start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT | =h(iâˆ’j)â¢(0)(iâˆ’j)!absentsuperscriptâ„ğ‘–ğ‘—0ğ‘–ğ‘—\displaystyle=\frac{h^{(i-j)}(0)}{(i-j)!}= divide start_ARG italic_h start_POSTSUPERSCRIPT ( italic_i - italic_j ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG ( italic_i - italic_j ) ! end_ARG |   
---|---|---|---  
|  | =1(iâˆ’j)!â¢âˆ‘k=0iâˆ’j(iâˆ’jk)â¢f(iâˆ’jâˆ’k)â¢(0)â‹…g(k)â¢(0)absent1ğ‘–ğ‘—superscriptsubscriptğ‘˜0ğ‘–ğ‘—â‹…binomialğ‘–ğ‘—ğ‘˜superscriptğ‘“ğ‘–ğ‘—ğ‘˜0superscriptğ‘”ğ‘˜0\displaystyle=\frac{1}{(i-j)!}\sum_{k=0}^{i-j}{i-j\choose k}f^{(i-j-k)}(0)% \cdot g^{(k)}(0)= divide start_ARG 1 end_ARG start_ARG ( italic_i - italic_j ) ! end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - italic_j end_POSTSUPERSCRIPT ( binomial start_ARG italic_i - italic_j end_ARG start_ARG italic_k end_ARG ) italic_f start_POSTSUPERSCRIPT ( italic_i - italic_j - italic_k ) end_POSTSUPERSCRIPT ( 0 ) â‹… italic_g start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT ( 0 ) |   
|  | =âˆ‘k=0iâˆ’jf(iâˆ’jâˆ’k)â¢(0)(iâˆ’jâˆ’k)!â‹…g(k)â¢(0)k!absentsuperscriptsubscriptğ‘˜0ğ‘–ğ‘—â‹…superscriptğ‘“ğ‘–ğ‘—ğ‘˜0ğ‘–ğ‘—ğ‘˜superscriptğ‘”ğ‘˜0ğ‘˜\displaystyle=\sum_{k=0}^{i-j}\frac{f^{(i-j-k)}(0)}{(i-j-k)!}\cdot\frac{g^{(k)% }(0)}{k!}= âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - italic_j end_POSTSUPERSCRIPT divide start_ARG italic_f start_POSTSUPERSCRIPT ( italic_i - italic_j - italic_k ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG ( italic_i - italic_j - italic_k ) ! end_ARG â‹… divide start_ARG italic_g start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG italic_k ! end_ARG |   
|  | =âˆ‘kâ€²=jif(iâˆ’kâ€²)â¢(0)(iâˆ’kâ€²)!â‹…g(kâ€²âˆ’j)â¢(0)(kâ€²âˆ’j)!absentsuperscriptsubscriptsuperscriptğ‘˜â€²ğ‘—ğ‘–â‹…superscriptğ‘“ğ‘–superscriptğ‘˜â€²0ğ‘–superscriptğ‘˜â€²superscriptğ‘”superscriptğ‘˜â€²ğ‘—0superscriptğ‘˜â€²ğ‘—\displaystyle=\sum_{k^{\prime}=j}^{i}\frac{f^{(i-k^{\prime})}(0)}{(i-k^{\prime% })!}\cdot\frac{g^{(k^{\prime}-j)}(0)}{(k^{\prime}-j)!}= âˆ‘ start_POSTSUBSCRIPT italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT divide start_ARG italic_f start_POSTSUPERSCRIPT ( italic_i - italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG ( italic_i - italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) ! end_ARG â‹… divide start_ARG italic_g start_POSTSUPERSCRIPT ( italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT - italic_j ) end_POSTSUPERSCRIPT ( 0 ) end_ARG start_ARG ( italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT - italic_j ) ! end_ARG |  | (kâ€²=k+jsuperscriptğ‘˜â€²ğ‘˜ğ‘—k^{\prime}=k+jitalic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = italic_k + italic_j)  
|  | =âˆ‘kâ€²=jiMâ¢(f,n)i,kâ€²â‹…Mâ¢(g,n)kâ€²,jabsentsuperscriptsubscriptsuperscriptğ‘˜â€²ğ‘—ğ‘–â‹…ğ‘€subscriptğ‘“ğ‘›ğ‘–superscriptğ‘˜â€²ğ‘€subscriptğ‘”ğ‘›superscriptğ‘˜â€²ğ‘—\displaystyle=\sum_{k^{\prime}=j}^{i}M(f,n)_{i,k^{\prime}}\cdot M(g,n)_{k^{% \prime},j}= âˆ‘ start_POSTSUBSCRIPT italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_M ( italic_f , italic_n ) start_POSTSUBSCRIPT italic_i , italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT â‹… italic_M ( italic_g , italic_n ) start_POSTSUBSCRIPT italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , italic_j end_POSTSUBSCRIPT |   
|  | =âˆ‘kâ€²âˆˆ[n]Mâ¢(f,n)i,kâ€²â‹…Mâ¢(g,n)kâ€²,jabsentsubscriptsuperscriptğ‘˜â€²delimited-[]ğ‘›â‹…ğ‘€subscriptğ‘“ğ‘›ğ‘–superscriptğ‘˜â€²ğ‘€subscriptğ‘”ğ‘›superscriptğ‘˜â€²ğ‘—\displaystyle=\sum_{k^{\prime}\in[n]}M(f,n)_{i,k^{\prime}}\cdot M(g,n)_{k^{% \prime},j}= âˆ‘ start_POSTSUBSCRIPT italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n ] end_POSTSUBSCRIPT italic_M ( italic_f , italic_n ) start_POSTSUBSCRIPT italic_i , italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT â‹… italic_M ( italic_g , italic_n ) start_POSTSUBSCRIPT italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , italic_j end_POSTSUBSCRIPT |  | (i<kâ€²âŸ¹Mâ¢(f,n)i,kâ€²=0ğ‘–superscriptğ‘˜â€²ğ‘€subscriptğ‘“ğ‘›ğ‘–superscriptğ‘˜â€²0i<k^{\prime}\implies M(f,n)_{i,k^{\prime}}=0italic_i < italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âŸ¹ italic_M ( italic_f , italic_n ) start_POSTSUBSCRIPT italic_i , italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT = 0, kâ€²<jâŸ¹Mâ¢(g,n)kâ€²,j=0superscriptğ‘˜â€²ğ‘—ğ‘€subscriptğ‘”ğ‘›superscriptğ‘˜â€²ğ‘—0k^{\prime}<j\implies M(g,n)_{k^{\prime},j}=0italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT < italic_j âŸ¹ italic_M ( italic_g , italic_n ) start_POSTSUBSCRIPT italic_k start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , italic_j end_POSTSUBSCRIPT = 0)  
|  | =(Mâ¢(f,n)â‹…Mâ¢(g,n))i,j.absentsubscriptâ‹…ğ‘€ğ‘“ğ‘›ğ‘€ğ‘”ğ‘›ğ‘–ğ‘—\displaystyle=\left(M(f,n)\cdot M(g,n)\right)_{i,j}.= ( italic_M ( italic_f , italic_n ) â‹… italic_M ( italic_g , italic_n ) ) start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT . |   
  
âˆ

Given Eq.Â 3.2 and the above result for multiplication, in order to factorize
A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C, it is natural to factorize by
taking the square root of the generating function: Let
fâ¢(x)=11âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)=\frac{1}{\sqrt{1-x}}italic_f ( italic_x ) =
divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x
end_ARG end_ARG. Then
fâ¢(x)â‹…fâ¢(x)=11âˆ’x=gâ¢(x)â‹…ğ‘“ğ‘¥ğ‘“ğ‘¥11ğ‘¥ğ‘”ğ‘¥f(x)\cdot
f(x)=\frac{1}{1-x}=g(x)italic_f ( italic_x ) â‹… italic_f ( italic_x ) =
divide start_ARG 1 end_ARG start_ARG 1 - italic_x end_ARG = italic_g (
italic_x ) and, hence,
Mâ¢(f,n)â‹…Mâ¢(f,n)=Mâ¢(g,n)=A(n)â‹…ğ‘€ğ‘“ğ‘›ğ‘€ğ‘“ğ‘›ğ‘€ğ‘”ğ‘›superscriptğ´ğ‘›M(f,n)\cdot
M(f,n)=M(g,n)=A^{(n)}italic_M ( italic_f , italic_n ) â‹… italic_M ( italic_f
, italic_n ) = italic_M ( italic_g , italic_n ) = italic_A
start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT. Indeed, this is the
factorization given by
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitefichtenberger2022constant,
which is optimal among the class of lower triangular Toeplitz matrices (per
PropositionÂ 2.2).

Given any generating function râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ), we can
obtain a valid factorization A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C
where B=Mâ¢(b,n)ğµğ‘€ğ‘ğ‘›B=M(b,n)italic_B = italic_M ( italic_b , italic_n )
for bâ¢(x)=râ¢(x)/(1âˆ’x)ğ‘ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥b(x)=r(x)/(1-x)italic_b ( italic_x ) =
italic_r ( italic_x ) / ( 1 - italic_x ) and
C=Mâ¢(c,n)ğ¶ğ‘€ğ‘ğ‘›C=M(c,n)italic_C = italic_M ( italic_c , italic_n ) for
câ¢(x)=1/râ¢(x)ğ‘ğ‘¥1ğ‘Ÿğ‘¥c(x)=1/r(x)italic_c ( italic_x ) = 1 / italic_r (
italic_x ). Our approach is to choose a generating function such that
râ¢(x)â‰ˆ1âˆ’xğ‘Ÿğ‘¥1ğ‘¥r(x)\approx\sqrt{1-x}italic_r ( italic_x ) â‰ˆ square-
root start_ARG 1 - italic_x end_ARG but which also permits us to design an
efficient algorithm.

###  3.2 Rational Generating Functions and Constant-Recurrent Sequences

We will focus our attention on rational generating functions of the form

| râ¢(x)=pâ¢(x)qâ¢(x)=âˆ‘i=0dâˆ’1piâ¢xi1+âˆ‘j=1dqjâ¢xj.ğ‘Ÿğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğ‘ğ‘–superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—r(x)=\frac{p(x)}{q(x)}=\frac{\sum_{i=0}^{d-1}p_{i}x^{i}}{1+\sum_{j=1}^{d}q_{j}% x^{j}}.italic_r ( italic_x ) = divide start_ARG italic_p ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG = divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG . |  | (3.4)  
---|---|---|---  
  
These have convenient algorithmic properties. In this subsection we discuss
several equivalent representations of rational functions. As a starting point,
a rational function of degree dğ‘‘ditalic_d can be represented as a ratio of
polynomials, where the numerator pâ¢(x)ğ‘ğ‘¥p(x)italic_p ( italic_x ) has
degree <dabsentğ‘‘<d< italic_d and the denominator has degree
â‰¤dabsentğ‘‘\leq dâ‰¤ italic_d. Note that we normalize the denominator so
that qâ¢(0)=q0=1ğ‘0subscriptğ‘01q(0)=q_{0}=1italic_q ( 0 ) = italic_q
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = 1.181818We can rescale both the
numerator and denominator by a constant to make this assumption true. Thus
this assumption is without loss of generality, unless the rational function
has a pole at 00 â€“ but we do not consider such functions, as they are not
valid generating functions.

EquationÂ 3.4 is a convenient mathematical representation, but for algorithmic
purposes we need the sequence
(rk)k=0âˆsuperscriptsubscriptsubscriptğ‘Ÿğ‘˜ğ‘˜0(r_{k})_{k=0}^{\infty}(
italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT
italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT of
Taylor series coefficients

| râ¢(x)=âˆ‘k=0âˆrkâ¢xk.ğ‘Ÿğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘Ÿğ‘˜superscriptğ‘¥ğ‘˜r(x)=\sum_{k=0}^{\infty}r_{k}x^{k}.italic_r ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT . |  | (3.5)  
---|---|---|---  
  
Thus our first task is to map from EquationÂ 3.4 to EquationÂ 3.5 with a
convenient representation that is amenable to efficient computation.

The generating function râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) being a rational
function is equivalent to the sequence
(rk)k=0âˆsuperscriptsubscriptsubscriptğ‘Ÿğ‘˜ğ‘˜0(r_{k})_{k=0}^{\infty}(
italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT
italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT
being a constant-recurrent sequence (a.k.a.Â linear-recursive or C-finite
sequence); see for example
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitekauers11concrete. The
sequence terms can be computed by taking powers of a matrix; this is the
representation that we will use in our algorithm. We summarize this result in
LemmaÂ 3.2 and provide a proof for completeness.

######  Lemma 3.2 (Constant-recurrent Taylor series representation of a
rational function).

Let

| râ¢(x)=pâ¢(x)qâ¢(x)=âˆ‘i=0dâˆ’1piâ¢xi1+âˆ‘j=1dqjâ¢xjğ‘Ÿğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğ‘ğ‘–superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—r(x)=\frac{p(x)}{q(x)}=\frac{\sum_{i=0}^{d-1}p_{i}x^{i}}{1+\sum_{j=1}^{d}q_{j}% x^{j}}italic_r ( italic_x ) = divide start_ARG italic_p ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG = divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG |   
---|---|---  
  
be a rational function of degree â‰¤dabsentğ‘‘\leq dâ‰¤ italic_d. As in
SectionÂ 3.1, let

| râ¢(x)=âˆ‘k=0âˆrkâ¢xk.ğ‘Ÿğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘Ÿğ‘˜superscriptğ‘¥ğ‘˜r(x)=\sum_{k=0}^{\infty}r_{k}x^{k}.italic_r ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT . |   
---|---|---  
  
That is, râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) generates the sequence
(rk)k=0âˆsuperscriptsubscriptsubscriptğ‘Ÿğ‘˜ğ‘˜0(r_{k})_{k=0}^{\infty}(
italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT
italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT.
Then, for all kâ‰¥dğ‘˜ğ‘‘k\geq ditalic_k â‰¥ italic_d, this sequence satisfies
the recurrence

| rk=âˆ’âˆ‘j=1dqjâ¢rkâˆ’j.subscriptğ‘Ÿğ‘˜superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—subscriptğ‘Ÿğ‘˜ğ‘—r_{k}=-\sum_{j=1}^{d}q_{j}r_{k-j}.italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = - âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_r start_POSTSUBSCRIPT italic_k - italic_j end_POSTSUBSCRIPT . |  | (3.6)  
---|---|---|---  
  
And, for 0â‰¤k<d0ğ‘˜ğ‘‘0\leq k<d0 â‰¤ italic_k < italic_d, we have
rk=pkâˆ’âˆ‘j=1kqjâ¢rkâˆ’jsubscriptğ‘Ÿğ‘˜subscriptğ‘ğ‘˜superscriptsubscriptğ‘—1ğ‘˜subscriptğ‘ğ‘—subscriptğ‘Ÿğ‘˜ğ‘—r_{k}=p_{k}-\sum_{j=1}^{k}q_{j}r_{k-j}italic_r
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_p start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT - âˆ‘ start_POSTSUBSCRIPT italic_j = 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_q
start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_r start_POSTSUBSCRIPT
italic_k - italic_j end_POSTSUBSCRIPT. Furthermore, for all kğ‘˜kitalic_k, we
have

| rk=uTâ¢Wkâ¢v,subscriptğ‘Ÿğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£r_{k}=u^{T}W^{k}v,italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v , |  | (3.7)  
---|---|---|---  
  
where

| uâ‰”(1000â‹®00)âˆˆâ„dÃ—1,vâ‰”(p0p1p2p3â‹®pdâˆ’2pdâˆ’1)âˆˆâ„dÃ—1,formulae-sequenceâ‰”ğ‘¢1000â‹®00superscriptâ„ğ‘‘1â‰”ğ‘£subscriptğ‘0subscriptğ‘1subscriptğ‘2subscriptğ‘3â‹®subscriptğ‘ğ‘‘2subscriptğ‘ğ‘‘1superscriptâ„ğ‘‘1u\coloneqq\left(\begin{array}[]{c}1\\\ 0\\\ 0\\\ 0\\\ \vdots\\\ 0\\\ 0\end{array}\right)\in\mathbb{R}^{d\times 1},\qquad v\coloneqq\left(\begin{% array}[]{c}p_{0}\\\ p_{1}\\\ p_{2}\\\ p_{3}\\\ \vdots\\\ p_{d-2}\\\ p_{d-1}\end{array}\right)\in\mathbb{R}^{d\times 1},italic_u â‰” ( start_ARRAY start_ROW start_CELL 1 end_CELL end_ROW start_ROW start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d Ã— 1 end_POSTSUPERSCRIPT , italic_v â‰” ( start_ARRAY start_ROW start_CELL italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT italic_d - 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d Ã— 1 end_POSTSUPERSCRIPT , |  | (3.8)  
---|---|---|---  
  
and

| Wâ‰”(âˆ’q1100â‹¯00âˆ’q2010â‹¯00âˆ’q3001â‹¯00âˆ’q4000â‹¯00â‹®â‹®â‹®â‹®â‹±â‹®â‹®âˆ’qdâˆ’1000â‹¯01âˆ’qd000â‹¯00)âˆˆâ„dÃ—d.â‰”ğ‘Šsubscriptğ‘1100â‹¯00subscriptğ‘2010â‹¯00subscriptğ‘3001â‹¯00subscriptğ‘4000â‹¯00â‹®â‹®â‹®â‹®â‹±â‹®â‹®subscriptğ‘ğ‘‘1000â‹¯01subscriptğ‘ğ‘‘000â‹¯00superscriptâ„ğ‘‘ğ‘‘W\coloneqq\left(\begin{array}[]{ccccccc}-q_{1}&1&0&0&\cdots&0&0\\\ -q_{2}&0&1&0&\cdots&0&0\\\ -q_{3}&0&0&1&\cdots&0&0\\\ -q_{4}&0&0&0&\cdots&0&0\\\ \vdots&\vdots&\vdots&\vdots&\ddots&\vdots&\vdots\\\ -q_{d-1}&0&0&0&\cdots&0&1\\\ -q_{d}&0&0&0&\cdots&0&0\end{array}\right)\in\mathbb{R}^{d\times d}.italic_W â‰” ( start_ARRAY start_ROW start_CELL - italic_q start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - italic_q start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - italic_q start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - italic_q start_POSTSUBSCRIPT 4 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹± end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL - italic_q start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL end_ROW start_ROW start_CELL - italic_q start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_d end_POSTSUPERSCRIPT . |  | (3.9)  
---|---|---|---  
  
###### Proof.

We have

| râ¢(x)=pâ¢(x)qâ¢(x)=âˆ‘i=0dâˆ’1piâ¢xi1+âˆ‘j=1dqjâ¢xj=âˆ‘k=0âˆrkâ¢xk,ğ‘Ÿğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğ‘ğ‘–superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—superscriptsubscriptğ‘˜0subscriptğ‘Ÿğ‘˜superscriptğ‘¥ğ‘˜r(x)=\frac{p(x)}{q(x)}=\frac{\sum_{i=0}^{d-1}p_{i}x^{i}}{1+\sum_{j=1}^{d}q_{j}% x^{j}}=\sum_{k=0}^{\infty}r_{k}x^{k},italic_r ( italic_x ) = divide start_ARG italic_p ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG = divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT , |   
---|---|---  
  
which rearranges to

| pâ¢(x)=âˆ‘i=0dâˆ’1piâ¢xi=qâ¢(x)â‹…râ¢(x)=(1+âˆ‘j=1dqjâ¢xj)â‹…(âˆ‘k=0âˆrkâ¢xk)=âˆ‘k=0âˆ(rk+âˆ‘j=1minâ¡{d,k}qjâ¢rkâˆ’j)â‹…xk.ğ‘ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğ‘ğ‘–superscriptğ‘¥ğ‘–â‹…ğ‘ğ‘¥ğ‘Ÿğ‘¥â‹…1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—superscriptsubscriptğ‘˜0subscriptğ‘Ÿğ‘˜superscriptğ‘¥ğ‘˜superscriptsubscriptğ‘˜0â‹…subscriptğ‘Ÿğ‘˜superscriptsubscriptğ‘—1ğ‘‘ğ‘˜subscriptğ‘ğ‘—subscriptğ‘Ÿğ‘˜ğ‘—superscriptğ‘¥ğ‘˜p(x)=\sum_{i=0}^{d-1}p_{i}x^{i}=q(x)\cdot r(x)=\left(1+\sum_{j=1}^{d}q_{j}x^{j% }\right)\cdot\left(\sum_{k=0}^{\infty}r_{k}x^{k}\right)=\sum_{k=0}^{\infty}% \left(r_{k}+\sum_{j=1}^{\min\\{d,k\\}}q_{j}r_{k-j}\right)\cdot x^{k}.italic_p ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT = italic_q ( italic_x ) â‹… italic_r ( italic_x ) = ( 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT ) â‹… ( âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT ( italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_min { italic_d , italic_k } end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_r start_POSTSUBSCRIPT italic_k - italic_j end_POSTSUBSCRIPT ) â‹… italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT . |   
---|---|---  
  
Matching coefficients gives
pk=rk+âˆ‘j=1kqjâ¢rkâˆ’jsubscriptğ‘ğ‘˜subscriptğ‘Ÿğ‘˜superscriptsubscriptğ‘—1ğ‘˜subscriptğ‘ğ‘—subscriptğ‘Ÿğ‘˜ğ‘—p_{k}=r_{k}+\sum_{j=1}^{k}q_{j}r_{k-j}italic_p
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_r start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j = 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_q
start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_r start_POSTSUBSCRIPT
italic_k - italic_j end_POSTSUBSCRIPT for 1â‰¤kâ‰¤dâˆ’11ğ‘˜ğ‘‘11\leq k\leq
d-11 â‰¤ italic_k â‰¤ italic_d - 1 and
0=rk+âˆ‘j=1dqjâ¢rkâˆ’j0subscriptğ‘Ÿğ‘˜superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—subscriptğ‘Ÿğ‘˜ğ‘—0=r_{k}+\sum_{j=1}^{d}q_{j}r_{k-j}0
= italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT + âˆ‘
start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j
end_POSTSUBSCRIPT italic_r start_POSTSUBSCRIPT italic_k - italic_j
end_POSTSUBSCRIPT for kâ‰¥dğ‘˜ğ‘‘k\geq ditalic_k â‰¥ italic_d, which
rearranges to give the recurrence.

Next we turn to the matrix representation. Define
p(0)â¢(x)=pâ¢(x)superscriptğ‘0ğ‘¥ğ‘ğ‘¥p^{(0)}(x)=p(x)italic_p
start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT ( italic_x ) = italic_p (
italic_x ) â€“ i.e.,
pi(0)=pisubscriptsuperscriptğ‘0ğ‘–subscriptğ‘ğ‘–p^{(0)}_{i}=p_{i}italic_p
start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT = italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT
for 0â‰¤iâ‰¤dâˆ’10ğ‘–ğ‘‘10\leq i\leq d-10 â‰¤ italic_i â‰¤ italic_d - 1. For
all kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1, let
pj(k)â‰”pj+1(kâˆ’1)âˆ’p0(kâˆ’1)â¢qj+1â‰”superscriptsubscriptğ‘ğ‘—ğ‘˜superscriptsubscriptğ‘ğ‘—1ğ‘˜1superscriptsubscriptğ‘0ğ‘˜1subscriptğ‘ğ‘—1{p}_{j}^{(k)}\coloneqq
p_{j+1}^{(k-1)}-p_{0}^{(k-1)}q_{j+1}italic_p start_POSTSUBSCRIPT italic_j
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT â‰”
italic_p start_POSTSUBSCRIPT italic_j + 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT - italic_p
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k - 1 )
end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j + 1
end_POSTSUBSCRIPT for 0â‰¤jâ‰¤dâˆ’20ğ‘—ğ‘‘20\leq j\leq d-20 â‰¤ italic_j â‰¤
italic_d - 2 and let
pdâˆ’1(k)â‰”âˆ’p0(kâˆ’1)â¢qdâ‰”superscriptsubscriptğ‘ğ‘‘1ğ‘˜superscriptsubscriptğ‘0ğ‘˜1subscriptğ‘ğ‘‘{p}_{d-1}^{(k)}\coloneqq-
p_{0}^{(k-1)}q_{d}italic_p start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT â‰” - italic_p
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k - 1 )
end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT.
We can check that these values satisfy

| âˆ‘i=0dâˆ’1pi(kâˆ’1)â¢xi1+âˆ‘j=1dqjâ¢xj=p0(kâˆ’1)+xâ‹…âˆ‘i=0dâˆ’1pi(k)â¢xi1+âˆ‘j=1dqjâ¢xj.superscriptsubscriptğ‘–0ğ‘‘1superscriptsubscriptğ‘ğ‘–ğ‘˜1superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—superscriptsubscriptğ‘0ğ‘˜1â‹…ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1superscriptsubscriptğ‘ğ‘–ğ‘˜superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—\frac{\sum_{i=0}^{d-1}p_{i}^{(k-1)}x^{i}}{1+\sum_{j=1}^{d}q_{j}x^{j}}=p_{0}^{(% k-1)}+x\cdot\frac{\sum_{i=0}^{d-1}{p}_{i}^{(k)}x^{i}}{1+\sum_{j=1}^{d}q_{j}x^{% j}}.divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG = italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT + italic_x â‹… divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG . |  | (3.10)  
---|---|---|---  
  
The left hand side of EquationÂ 3.10 with k=1ğ‘˜1k=1italic_k = 1 is simply
râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ); from this we can conclude that
r0=p0(0)=p0subscriptğ‘Ÿ0superscriptsubscriptğ‘00subscriptğ‘0r_{0}=p_{0}^{(0)}=p_{0}italic_r
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = italic_p start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT = italic_p
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT. Expanding EquationÂ 3.10 for
k=1ğ‘˜1k=1italic_k = 1 and k=2ğ‘˜2k=2italic_k = 2 gives
r1=p0(1)subscriptğ‘Ÿ1superscriptsubscriptğ‘01r_{1}={p}_{0}^{(1)}italic_r
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = italic_p start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT.
Specifically, we have

| râ¢(x)=âˆ‘i=0dâˆ’1pi(0)â¢xi1+âˆ‘j=1dqjâ¢xj=p0(0)+xâ‹…âˆ‘i=0dâˆ’1pi(1)â¢xi1+âˆ‘j=1dqjâ¢xj=p0(0)+xâ‹…(p0(1)+xâ‹…âˆ‘i=0dâˆ’1pi(2)â¢xi1+âˆ‘j=1dqjâ¢xj).ğ‘Ÿğ‘¥superscriptsubscriptğ‘–0ğ‘‘1superscriptsubscriptğ‘ğ‘–0superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—superscriptsubscriptğ‘00â‹…ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1superscriptsubscriptğ‘ğ‘–1superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—superscriptsubscriptğ‘00â‹…ğ‘¥superscriptsubscriptğ‘01â‹…ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1superscriptsubscriptğ‘ğ‘–2superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—r(x)=\frac{\sum_{i=0}^{d-1}p_{i}^{(0)}x^{i}}{1+\sum_{j=1}^{d}q_{j}x^{j}}=p_{0}% ^{(0)}+x\cdot\frac{\sum_{i=0}^{d-1}{p}_{i}^{(1)}x^{i}}{1+\sum_{j=1}^{d}q_{j}x^% {j}}=p_{0}^{(0)}+x\cdot\left(p_{0}^{(1)}+x\cdot\frac{\sum_{i=0}^{d-1}{p}_{i}^{% (2)}x^{i}}{1+\sum_{j=1}^{d}q_{j}x^{j}}\right).italic_r ( italic_x ) = divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG = italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT + italic_x â‹… divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG = italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT + italic_x â‹… ( italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 1 ) end_POSTSUPERSCRIPT + italic_x â‹… divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG ) . |   
---|---|---  
  
We can iteratively repeat this expansion to extract the entire Taylor series.
(This algorithm is known as polynomial long division.) That is, we can show by
induction that, for all kğ‘˜kitalic_k, we have

| râ¢(x)=âˆ‘â„“=0kâˆ’1p0(â„“)â¢xâ„“+xkâ‹…âˆ‘i=0dâˆ’1pi(k)â¢xi1+âˆ‘j=1dqjâ¢xj.ğ‘Ÿğ‘¥superscriptsubscriptâ„“0ğ‘˜1superscriptsubscriptğ‘0â„“superscriptğ‘¥â„“â‹…superscriptğ‘¥ğ‘˜superscriptsubscriptğ‘–0ğ‘‘1superscriptsubscriptğ‘ğ‘–ğ‘˜superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—r(x)=\sum_{\ell=0}^{k-1}p_{0}^{(\ell)}x^{\ell}+x^{k}\cdot\frac{\sum_{i=0}^{d-1% }{p}_{i}^{(k)}x^{i}}{1+\sum_{j=1}^{d}q_{j}x^{j}}.italic_r ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( roman_â„“ ) end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT + italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT â‹… divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG . |   
---|---|---  
  
Thus
rk=p0(k)subscriptğ‘Ÿğ‘˜superscriptsubscriptğ‘0ğ‘˜r_{k}=p_{0}^{(k)}italic_r
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_p start_POSTSUBSCRIPT
0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT for
all kğ‘˜kitalic_k.

Now we can write the recursive definition of
pj(k)subscriptsuperscriptğ‘ğ‘˜ğ‘—p^{(k)}_{j}italic_p start_POSTSUPERSCRIPT (
italic_k ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT
in matrix form: For all kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1, we have

| (p0(k)p1(k)â‹®pdâˆ’1(k))=Wâ‹…(p0(kâˆ’1)p1(kâˆ’1)â‹®pdâˆ’1(kâˆ’1)),superscriptsubscriptğ‘0ğ‘˜superscriptsubscriptğ‘1ğ‘˜â‹®superscriptsubscriptğ‘ğ‘‘1ğ‘˜â‹…ğ‘Šsuperscriptsubscriptğ‘0ğ‘˜1superscriptsubscriptğ‘1ğ‘˜1â‹®superscriptsubscriptğ‘ğ‘‘1ğ‘˜1\left(\begin{array}[]{c}{p}_{0}^{(k)}\\\ {p}_{1}^{(k)}\\\ \vdots\\\ {p}_{d-1}^{(k)}\end{array}\right)=W\cdot\left(\begin{array}[]{c}{p}_{0}^{(k-1)% }\\\ {p}_{1}^{(k-1)}\\\ \vdots\\\ {p}_{d-1}^{(k-1)}\end{array}\right),( start_ARRAY start_ROW start_CELL italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) = italic_W â‹… ( start_ARRAY start_ROW start_CELL italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) , |   
---|---|---  
  
where Wâˆˆâ„dÃ—dğ‘Šsuperscriptâ„ğ‘‘ğ‘‘W\in\mathbb{R}^{d\times d}italic_W âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_d end_POSTSUPERSCRIPT is
given in Equation 3.9. Given this, induction shows that, for all
kâ‰¥0ğ‘˜0k\geq 0italic_k â‰¥ 0,

| (p0(k)p1(k)â‹®pdâˆ’1(k))=Wkâ‹…(p0(0)p1(0)â‹®pdâˆ’1(0))=Wkâ‹…vsuperscriptsubscriptğ‘0ğ‘˜superscriptsubscriptğ‘1ğ‘˜â‹®superscriptsubscriptğ‘ğ‘‘1ğ‘˜â‹…superscriptğ‘Šğ‘˜superscriptsubscriptğ‘00superscriptsubscriptğ‘10â‹®superscriptsubscriptğ‘ğ‘‘10â‹…superscriptğ‘Šğ‘˜ğ‘£\left(\begin{array}[]{c}{p}_{0}^{(k)}\\\ {p}_{1}^{(k)}\\\ \vdots\\\ {p}_{d-1}^{(k)}\end{array}\right)=W^{k}\cdot\left(\begin{array}[]{c}{p}_{0}^{(% 0)}\\\ {p}_{1}^{(0)}\\\ \vdots\\\ {p}_{d-1}^{(0)}\end{array}\right)=W^{k}\cdot v( start_ARRAY start_ROW start_CELL italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) = italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT â‹… ( start_ARRAY start_ROW start_CELL italic_p start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_p start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) = italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT â‹… italic_v |   
---|---|---  
  
and, hence,
rk=p0(k)=uTâ‹…Wkâ‹…vsubscriptğ‘Ÿğ‘˜superscriptsubscriptğ‘0ğ‘˜â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£r_{k}=p_{0}^{(k)}=u^{T}\cdot
W^{k}\cdot vitalic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_p
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k )
end_POSTSUPERSCRIPT = italic_u start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT â‹… italic_W start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT â‹… italic_v, as required. âˆ

We make some remarks about LemmaÂ 3.2:

  1. 1.

LemmaÂ 3.2 assumes degâ¡(p)<ddegreeğ‘ğ‘‘\deg(p)<droman_deg ( italic_p ) <
italic_d and degâ¡(q)â‰¤ddegreeğ‘ğ‘‘\deg(q)\leq droman_deg ( italic_q ) â‰¤
italic_d, but it allows for the possibility that some of the coefficients
pj,qjsubscriptğ‘ğ‘—subscriptğ‘ğ‘—p_{j},q_{j}italic_p start_POSTSUBSCRIPT
italic_j end_POSTSUBSCRIPT , italic_q start_POSTSUBSCRIPT italic_j
end_POSTSUBSCRIPT (including qdsubscriptğ‘ğ‘‘q_{d}italic_q start_POSTSUBSCRIPT
italic_d end_POSTSUBSCRIPT) may be zero. Thus by padding, we can accommodate
arbitrary degree of both the numerator and denominator.

  2. 2.

Lemma 3.2 is in fact an â€œif and only ifâ€ â€“ that is, any Taylor series
satisfying either of the conclusions of the Lemma must be a rational function
(see e.g. \parencitekauers11concrete). However, we do not use the converse of
the result.

  3. 3.

The eigenvalues of Wğ‘ŠWitalic_W can be related to the poles of the
corresponding rational function. Specifically,

| det(Î»â¢Iâˆ’W)=0â‡”Î»d+âˆ‘j=1dqjâ¢Î»dâˆ’j=0â‡”(qâ¢(1Î»)=0â¢Â orÂ â¢Î»=0=qd).iffğœ†ğ¼ğ‘Š0superscriptğœ†ğ‘‘superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğœ†ğ‘‘ğ‘—0iffğ‘1ğœ†0Â orÂ ğœ†0subscriptğ‘ğ‘‘\det(\lambda I-W)=0\iff\lambda^{d}+\sum_{j=1}^{d}q_{j}\lambda^{d-j}=0\iff\big{% (}q(\tfrac{1}{\lambda})=0\text{ or }\lambda=0=q_{d}\big{)}.roman_det ( italic_Î» italic_I - italic_W ) = 0 â‡” italic_Î» start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î» start_POSTSUPERSCRIPT italic_d - italic_j end_POSTSUPERSCRIPT = 0 â‡” ( italic_q ( divide start_ARG 1 end_ARG start_ARG italic_Î» end_ARG ) = 0 or italic_Î» = 0 = italic_q start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT ) . |  | (3.11)  
---|---|---|---  
  
  4. 4.

Furthermore, the eigenvectors of Wğ‘ŠWitalic_W can be written in terms of the
poles: Suppose
qâ¢(1Î»)=1+âˆ‘j=1dqjâ¢(1Î»)j=0ğ‘1ğœ†1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscript1ğœ†ğ‘—0q(\tfrac{1}{\lambda})=1+\sum_{j=1}^{d}q_{j}(\tfrac{1}{\lambda})^{j}=0italic_q
( divide start_ARG 1 end_ARG start_ARG italic_Î» end_ARG ) = 1 + âˆ‘
start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j
end_POSTSUBSCRIPT ( divide start_ARG 1 end_ARG start_ARG italic_Î» end_ARG )
start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT = 0. Let
uT=(Î»dâˆ’1,Î»dâˆ’2,â‹¯,Î»,1)âˆˆâ„1Ã—dsuperscriptğ‘¢ğ‘‡superscriptğœ†ğ‘‘1superscriptğœ†ğ‘‘2â‹¯ğœ†1superscriptâ„1ğ‘‘u^{T}=(\lambda^{d-1},\lambda^{d-2},\cdots,\lambda,1)\in\mathbb{R}^{1\times
d}italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT = ( italic_Î»
start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT , italic_Î»
start_POSTSUPERSCRIPT italic_d - 2 end_POSTSUPERSCRIPT , â‹¯ , italic_Î» , 1 )
âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_d end_POSTSUPERSCRIPT (or
Î»=0ğœ†0\lambda=0italic_Î» = 0 and qd=0subscriptğ‘ğ‘‘0q_{d}=0italic_q
start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT = 0). Then
uTâ¢W=Î»â‹…uTsuperscriptğ‘¢ğ‘‡ğ‘Šâ‹…ğœ†superscriptğ‘¢ğ‘‡u^{T}W=\lambda\cdot
u^{T}italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W =
italic_Î» â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT or,
equivalently, WTâ¢u=Î»â‹…usuperscriptğ‘Šğ‘‡ğ‘¢â‹…ğœ†ğ‘¢W^{T}u=\lambda\cdot
uitalic_W start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_u =
italic_Î» â‹… italic_u.

  5. 5.

If the eigenvalues of Wğ‘ŠWitalic_W are distinct (and real), then the above
remark produces a complete (real) eigenbasis, and so we can diagonalize the
matrix Wğ‘ŠWitalic_W (over â„â„\mathbb{R}blackboard_R). A diagonal matrix
Wğ‘ŠWitalic_W is particularly convenient for our streaming algorithm
(AlgorithmÂ 1).

  6. 6.

If the eigenvalues of Wğ‘ŠWitalic_W are contained in the unit circle (i.e., |Î»|â‰¤1ğœ†1|\lambda|\leq 1| italic_Î» | â‰¤ 1), then the computation of Wksuperscriptğ‘Šğ‘˜W^{k}italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT is numerically stable. By Equation 3.11, this is equivalent to the poles of the rational function having magnitude â‰¥1absent1\geq 1â‰¥ 1.

  7. 7.

Suppose the rational function rğ‘Ÿritalic_r has distinct poles
1Î¸i1subscriptğœƒğ‘–\frac{1}{\theta_{i}}divide start_ARG 1 end_ARG start_ARG
italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG, and can be
presented as191919Diagonalizing the matrix Wğ‘ŠWitalic_W given by LemmaÂ 3.2
corresponds to finding a representation of this form.

| râ¢(x)=âˆ‘iâˆˆ[d]Ï‰i1âˆ’Î¸iâ‹…xğ‘Ÿğ‘¥subscriptğ‘–delimited-[]ğ‘‘subscriptğœ”ğ‘–1â‹…subscriptğœƒğ‘–ğ‘¥r(x)=\sum_{i\in[d]}\frac{\omega_{i}}{1-\theta_{i}\cdot x}italic_r ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT â‹… italic_x end_ARG |   
---|---|---  
  
via a partial-fraction decomposition (instead of as a ratio of polynomials as
in LemmaÂ 3.2). (Indeed, our rational function in SectionÂ 4.2 is presented in
this form in Eq.Â 4.9.) Then, we have a simpler closed form for the sequence,

| rk=âˆ‘iâˆˆ[d]Ï‰iâ¢Î¸ik.subscriptğ‘Ÿğ‘˜subscriptğ‘–delimited-[]ğ‘‘subscriptğœ”ğ‘–superscriptsubscriptğœƒğ‘–ğ‘˜r_{k}=\sum_{i\in[d]}\omega_{i}\theta_{i}^{k}.italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT . |   
---|---|---  
  
This immediately yields a matrix representation: Wğ‘ŠWitalic_W is a diagonal
matrix with
Wi,i=Î¸isubscriptğ‘Šğ‘–ğ‘–subscriptğœƒğ‘–W_{i,i}=\theta_{i}italic_W
start_POSTSUBSCRIPT italic_i , italic_i end_POSTSUBSCRIPT = italic_Î¸
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT for all iğ‘–iitalic_i, and the
vectors uğ‘¢uitalic_u and vğ‘£vitalic_v simply need to satisfy
uiâ¢vi=Ï‰isubscriptğ‘¢ğ‘–subscriptğ‘£ğ‘–subscriptğœ”ğ‘–u_{i}v_{i}=\omega_{i}italic_u
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_v start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT = italic_Ï‰ start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT for all iğ‘–iitalic_i. This matrix representation may be
more convenient than the one given by LemmaÂ 3.2; we use this approach
extensively in SectionÂ 5.

  8. 8.

The form of the matrix Wğ‘ŠWitalic_W in LemmaÂ 3.2 is known as a â€œcompanion
matrixâ€ [enwiki:1201009369]. Namely, the matrix Wğ‘ŠWitalic_W is a companion
to the denominator polynomial qâ¢(x)ğ‘ğ‘¥q(x)italic_q ( italic_x ) since the
roots of the polynomial correspond to the eigenvalues of the matrix (per Eq.Â
3.11).

Our choice in how to represent râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) has some
ramifications for the design of the noise generation (multiplication)
algorithm in the next section:

######  Remark 3.3.

The representation in EquationÂ 3.4 assumes the numerator has lower degree
than the denominator, i.e., degâ¡(p)<ddegreeğ‘ğ‘‘\deg(p)<droman_deg ( italic_p
) < italic_d versus degâ¡(q)â‰¤ddegreeğ‘ğ‘‘\deg(q)\leq droman_deg ( italic_q )
â‰¤ italic_d. But, in this work, we typically consider rational functions with
the numerator and denominator both having the same degree, i.e.,
degâ¡(pÂ¯)=degâ¡(q)=ddegreeÂ¯ğ‘degreeğ‘ğ‘‘\deg(\overline{p})=\deg(q)=droman_deg
( overÂ¯ start_ARG italic_p end_ARG ) = roman_deg ( italic_q ) = italic_d.
This case can either be handled by padding (i.e., increment dâ†¦d+1maps-
toğ‘‘ğ‘‘1d\mapsto d+1italic_d â†¦ italic_d + 1 and set
qd+1=0subscriptğ‘ğ‘‘10q_{d+1}=0italic_q start_POSTSUBSCRIPT italic_d + 1
end_POSTSUBSCRIPT = 0) or by including an additive constant:

| râ¢(x)=pÂ¯â¢(x)qâ¢(x)=t+pâ¢(x)qâ¢(x)=pâ¢(x)+tâ¢qâ¢(x)qâ¢(x),Â whereÂ t=pÂ¯dqdandpâ¢(x)=pÂ¯â¢(x)âˆ’tâ¢qâ¢(x),formulae-sequenceğ‘Ÿğ‘¥Â¯ğ‘ğ‘¥ğ‘ğ‘¥ğ‘¡ğ‘ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥ğ‘¡ğ‘ğ‘¥ğ‘ğ‘¥Â whereÂ ğ‘¡subscriptÂ¯ğ‘ğ‘‘subscriptğ‘ğ‘‘andğ‘ğ‘¥Â¯ğ‘ğ‘¥ğ‘¡ğ‘ğ‘¥r(x)=\frac{\overline{p}(x)}{q(x)}=t+\frac{{p}(x)}{q(x)}=\frac{{p}(x)+tq(x)}{q(% x)},\quad\text{ where }\quad t=\frac{\overline{p}_{d}}{q_{d}}\quad\text{and}% \quad{p}(x)=\overline{p}(x)-tq(x),italic_r ( italic_x ) = divide start_ARG overÂ¯ start_ARG italic_p end_ARG ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG = italic_t + divide start_ARG italic_p ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG = divide start_ARG italic_p ( italic_x ) + italic_t italic_q ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG , where italic_t = divide start_ARG overÂ¯ start_ARG italic_p end_ARG start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT end_ARG start_ARG italic_q start_POSTSUBSCRIPT italic_d end_POSTSUBSCRIPT end_ARG and italic_p ( italic_x ) = overÂ¯ start_ARG italic_p end_ARG ( italic_x ) - italic_t italic_q ( italic_x ) , |  | (3.12)  
---|---|---|---  
  
so that degâ¡(p)â‰¤dâˆ’1degreeğ‘ğ‘‘1\deg({p})\leq d-1roman_deg ( italic_p )
â‰¤ italic_d - 1. We then have

| rk=uTâ¢Wkâ¢v+tâ¢ğ•€â¢[k=0]subscriptğ‘Ÿğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£ğ‘¡ğ•€delimited-[]ğ‘˜0r_{k}=u^{T}W^{k}v+t\mathbb{I}[k=0]italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v + italic_t blackboard_I [ italic_k = 0 ] |  | (3.13)  
---|---|---|---  
  
with (u,W,v)ğ‘¢ğ‘Šğ‘£(u,W,v)( italic_u , italic_W , italic_v ) as given in
LemmaÂ 3.2 applied to pâ¢(x)/qâ¢(x)ğ‘ğ‘¥ğ‘ğ‘¥p(x)/q(x)italic_p ( italic_x ) /
italic_q ( italic_x ). Here ğ•€ğ•€\mathbb{I}blackboard_I is the indicator
function taking value 1111 if the condition holds and 00 otherwise. We prefer
the representation with an additive constant, as it is more efficient to
implement algorithmically.

We note the indicator function can also be written as
ğ•€â¢[k=0]=0kğ•€delimited-[]ğ‘˜0superscript0ğ‘˜\mathbb{I}[k=0]=0^{k}blackboard_I
[ italic_k = 0 ] = 0 start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT for
kâ‰¥0ğ‘˜0k\geq 0italic_k â‰¥ 0. Thus we can incorporate the
tâ¢ğ•€â¢[k=0]ğ‘¡ğ•€delimited-[]ğ‘˜0t\mathbb{I}[k=0]italic_t blackboard_I [
italic_k = 0 ] into the matrix representation by appending a row/column of 00s
to Wğ‘ŠWitalic_W, appending 1111 to uğ‘¢uitalic_u and tğ‘¡titalic_t to
vğ‘£vitalic_v:

| (u1)Tâ¢(WğŸğŸT0)kâ¢(vt)=(u1)Tâ¢(WkğŸğŸT0k)â¢(vt)=uTâ¢Wkâ¢v+tâ‹…ğ•€â¢[k=0].superscriptğ‘¢1ğ‘‡superscriptğ‘Š0superscript0ğ‘‡0ğ‘˜ğ‘£ğ‘¡superscriptğ‘¢1ğ‘‡superscriptğ‘Šğ‘˜0superscript0ğ‘‡superscript0ğ‘˜ğ‘£ğ‘¡superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£â‹…ğ‘¡ğ•€delimited-[]ğ‘˜0\left(\begin{array}[]{c}u\\\ 1\end{array}\right)^{T}\left(\begin{array}[]{cc}W&\mathbf{0}\\\ \mathbf{0}^{T}&0\end{array}\right)^{k}\left(\begin{array}[]{c}v\\\ t\end{array}\right)=\left(\begin{array}[]{c}u\\\ 1\end{array}\right)^{T}\left(\begin{array}[]{cc}W^{k}&\mathbf{0}\\\ \mathbf{0}^{T}&0^{k}\end{array}\right)\left(\begin{array}[]{c}v\\\ t\end{array}\right)=u^{T}W^{k}v+t\cdot\mathbb{I}[k=0].( start_ARRAY start_ROW start_CELL italic_u end_CELL end_ROW start_ROW start_CELL 1 end_CELL end_ROW end_ARRAY ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( start_ARRAY start_ROW start_CELL italic_W end_CELL start_CELL bold_0 end_CELL end_ROW start_ROW start_CELL bold_0 start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT ( start_ARRAY start_ROW start_CELL italic_v end_CELL end_ROW start_ROW start_CELL italic_t end_CELL end_ROW end_ARRAY ) = ( start_ARRAY start_ROW start_CELL italic_u end_CELL end_ROW start_ROW start_CELL 1 end_CELL end_ROW end_ARRAY ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( start_ARRAY start_ROW start_CELL italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT end_CELL start_CELL bold_0 end_CELL end_ROW start_ROW start_CELL bold_0 start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_CELL start_CELL 0 start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) ( start_ARRAY start_ROW start_CELL italic_v end_CELL end_ROW start_ROW start_CELL italic_t end_CELL end_ROW end_ARRAY ) = italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v + italic_t â‹… blackboard_I [ italic_k = 0 ] . |  | (3.14)  
---|---|---|---  
  
This increases the dimension dğ‘‘ditalic_d by 1111, which is equivalent to
padding. However, for efficient streaming algorithm we introduce next, we can
save one memory buffer by working directly with the
rk=uTâ¢Wkâ¢v+tâ¢ğ•€â¢[k=0]subscriptğ‘Ÿğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£ğ‘¡ğ•€delimited-[]ğ‘˜0r_{k}=u^{T}W^{k}v+t\mathbb{I}[k=0]italic_r
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v + italic_t
blackboard_I [ italic_k = 0 ] representation rather than the pure matrix
representation in Eq.Â 3.14.

###  3.3 Efficient Sampling via BLT Multiplication

The generating function view outlined in SectionÂ 3.1 gives us a matrix
factorization from any function râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ). Namely,
A(n)=Mâ¢(b,n)â‹…Mâ¢(c,n)superscriptğ´ğ‘›â‹…ğ‘€ğ‘ğ‘›ğ‘€ğ‘ğ‘›A^{(n)}=M(b,n)\cdot
M(c,n)italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT =
italic_M ( italic_b , italic_n ) â‹… italic_M ( italic_c , italic_n ) for
bâ¢(x)=râ¢(x)/(1âˆ’x)ğ‘ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥b(x)=r(x)/(1-x)italic_b ( italic_x ) =
italic_r ( italic_x ) / ( 1 - italic_x ) and
câ¢(x)=1/râ¢(x)ğ‘ğ‘¥1ğ‘Ÿğ‘¥c(x)=1/r(x)italic_c ( italic_x ) = 1 / italic_r (
italic_x ). This turns out to be a good matrix factorization as long as
râ¢(x)â‰ˆ1âˆ’xğ‘Ÿğ‘¥1ğ‘¥r(x)\approx\sqrt{1-x}italic_r ( italic_x ) â‰ˆ square-
root start_ARG 1 - italic_x end_ARG. The other desideratum is being able to
efficiently sample noise according to the matrix factorization.

In this subsection we show that if râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) is a
rational function of low degree, then there exists an efficient sampling
algorithm or, equivalently, an efficient algorithm for streaming
multiplication by the lower-triangular Toeplitz matrix
Mâ¢(râ¢(x),n)ğ‘€ğ‘Ÿğ‘¥ğ‘›M(r(x),n)italic_M ( italic_r ( italic_x ) , italic_n
). This algorithm relies on the representation in SectionÂ 3.2. The final
missing ingredient, which we provide in SectionsÂ 4 andÂ 5, is to instantiate
râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ).

Our algorithmic task is as follows. Fix a lower-triangular Toeplitz matrix
Mâ¢(r,n)âˆˆâ„nÃ—nğ‘€ğ‘Ÿğ‘›superscriptâ„ğ‘›ğ‘›M(r,n)\in\mathbb{R}^{n\times
n}italic_M ( italic_r , italic_n ) âˆˆ blackboard_R start_POSTSUPERSCRIPT
italic_n Ã— italic_n end_POSTSUPERSCRIPT with a generating function
rğ‘Ÿritalic_r. We are given as input a matrix
Zâˆˆâ„nÃ—mğ‘superscriptâ„ğ‘›ğ‘šZ\in\mathbb{R}^{n\times m}italic_Z âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_m end_POSTSUPERSCRIPT
and must produce as output
Z^â‰”Mâ¢(r,n)â‹…Zâˆˆâ„nÃ—mâ‰”^ğ‘â‹…ğ‘€ğ‘Ÿğ‘›ğ‘superscriptâ„ğ‘›ğ‘š\widehat{Z}\coloneqq
M(r,n)\cdot Z\in\mathbb{R}^{n\times m}over^ start_ARG italic_Z end_ARG â‰”
italic_M ( italic_r , italic_n ) â‹… italic_Z âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n Ã— italic_m end_POSTSUPERSCRIPT. The obvious
algorithm for this task is to use standard matrix multiplication; this would
take Oâ¢(n2â¢m)ğ‘‚superscriptğ‘›2ğ‘šO(n^{2}m)italic_O ( italic_n
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_m ) time and
Oâ¢(nâ¢m)ğ‘‚ğ‘›ğ‘šO(nm)italic_O ( italic_n italic_m ) space. Another approach
is to exploit the Toeplitz structure of Mâ¢(r,n)ğ‘€ğ‘Ÿğ‘›M(r,n)italic_M (
italic_r , italic_n ) which makes the matrix multiplication a convolution;
this means it can be accelerated using the fast Fourier transform to take
Oâ¢(nâ¢mâ¢logâ¡n)ğ‘‚ğ‘›ğ‘šğ‘›O(nm\log n)italic_O ( italic_n italic_m roman_log
italic_n ) time, but this is not a streaming algorithm and it still requires
Oâ¢(nâ¢m)ğ‘‚ğ‘›ğ‘šO(nm)italic_O ( italic_n italic_m ) space. In order to
reduce the space required we need an algorithm that is tailored to the
streaming setting.

For streaming prefix sum applications (and private deep learning applications
like DP-SGD and DP-FTRL in particular), the input Zğ‘Zitalic_Z consists of
nâ¢mğ‘›ğ‘šnmitalic_n italic_m _independent_ samples from a Gaussian and
Z^=Mâ¢(r,n)â‹…Z^ğ‘â‹…ğ‘€ğ‘Ÿğ‘›ğ‘\widehat{Z}=M(r,n)\cdot Zover^ start_ARG
italic_Z end_ARG = italic_M ( italic_r , italic_n ) â‹… italic_Z is the
_correlated_ noise we add to our private learning procedure â€“ each row
corresponds to one training iteration and each column to one parameter of the
model. In particular, the rows Zğ‘Zitalic_Z can be sampled as needed â€“ since
they are independent noise â€“ and the output Z^^ğ‘\widehat{Z}over^ start_ARG
italic_Z end_ARG can be returned one row at a time.

This is our streaming setting: At each iteration kğ‘˜kitalic_k, our algorithm
receives as input the next row
Zk,â‹…âˆˆâ„msubscriptğ‘ğ‘˜â‹…superscriptâ„ğ‘šZ_{k,\cdot}\in\mathbb{R}^{m}italic_Z
start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_m end_POSTSUPERSCRIPT and must output the next
row
Z^k,â‹…âˆˆâ„msubscript^ğ‘ğ‘˜â‹…superscriptâ„ğ‘š\widehat{Z}_{k,\cdot}\in\mathbb{R}^{m}over^
start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_m
end_POSTSUPERSCRIPT. Our goal is to develop an algorithm that runs in time and
space Oâ¢(m)ğ‘‚ğ‘šO(m)italic_O ( italic_m ) per iteration (i.e.,
Oâ¢(nâ¢m)ğ‘‚ğ‘›ğ‘šO(nm)italic_O ( italic_n italic_m ) time in total). Reducing
the space usage relies on the fact that we do not need to store all of
Zğ‘Zitalic_Z or Z^^ğ‘\widehat{Z}over^ start_ARG italic_Z end_ARG in the
streaming setting. Accomplishing this relies on the structure of the lower
triangular Toeplitz matrix
Mâ¢(r,n)âˆˆâ„dÃ—dğ‘€ğ‘Ÿğ‘›superscriptâ„ğ‘‘ğ‘‘M(r,n)\in\mathbb{R}^{d\times
d}italic_M ( italic_r , italic_n ) âˆˆ blackboard_R start_POSTSUPERSCRIPT
italic_d Ã— italic_d end_POSTSUPERSCRIPT generated by a rational function

| râ¢(x)=t+âˆ‘i=0dâˆ’1piâ¢xi1+âˆ‘j=1dqjâ¢xj=r0+r1â¢x+r2â¢x2+r3â¢x3+â‹¯.ğ‘Ÿğ‘¥ğ‘¡superscriptsubscriptğ‘–0ğ‘‘1subscriptğ‘ğ‘–superscriptğ‘¥ğ‘–1superscriptsubscriptğ‘—1ğ‘‘subscriptğ‘ğ‘—superscriptğ‘¥ğ‘—subscriptğ‘Ÿ0subscriptğ‘Ÿ1ğ‘¥subscriptğ‘Ÿ2superscriptğ‘¥2subscriptğ‘Ÿ3superscriptğ‘¥3â‹¯r(x)=t+\frac{\sum_{i=0}^{d-1}p_{i}x^{i}}{1+\sum_{j=1}^{d}q_{j}x^{j}}=r_{0}+r_{% 1}x+r_{2}x^{2}+r_{3}x^{3}+\cdots.italic_r ( italic_x ) = italic_t + divide start_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_p start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT end_ARG start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_j = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT italic_q start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT end_ARG = italic_r start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT + italic_r start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_x + italic_r start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + italic_r start_POSTSUBSCRIPT 3 end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT 3 end_POSTSUPERSCRIPT + â‹¯ . |   
---|---|---  
  
Following 3.3 and LemmaÂ 3.2, we use the representation of the sequence
(rk)k=0âˆsuperscriptsubscriptsubscriptğ‘Ÿğ‘˜ğ‘˜0(r_{k})_{k=0}^{\infty}(
italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT
italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT in
terms of matrix powers:
rk=uTâ¢Wkâ¢v+tâ¢ğ•€â¢[k=0]subscriptğ‘Ÿğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£ğ‘¡ğ•€delimited-[]ğ‘˜0r_{k}=u^{T}W^{k}v+t\mathbb{I}[k=0]italic_r
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v + italic_t
blackboard_I [ italic_k = 0 ]. This is the representation that we use for our
algorithm.

Parameters: Matrix Mâ¢(r,n)ğ‘€ğ‘Ÿğ‘›M(r,n)italic_M ( italic_r , italic_n )
defined following LemmasÂ 3.2 andÂ 3.3 via column vectors
u,vâˆˆâ„dÃ—1ğ‘¢ğ‘£superscriptâ„ğ‘‘1u,v\in\mathbb{R}^{d\times 1}italic_u ,
italic_v âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d Ã— 1
end_POSTSUPERSCRIPT, a matrix
Wâˆˆâ„dÃ—dğ‘Šsuperscriptâ„ğ‘‘ğ‘‘W\in\mathbb{R}^{d\times d}italic_W âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_d end_POSTSUPERSCRIPT,
and a scalar tâˆˆâ„ğ‘¡â„t\in\mathbb{R}italic_t âˆˆ blackboard_R.

Streaming Input: Row vectors
Z0,â‹…,Z1,â‹…,â‹¯,Znâˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘ğ‘›1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n-1,\cdot}\in\mathbb{R}^{1\times
m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n - 1 , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT.

Streaming Output: Row vectors
Z^0,â‹…,Z^1,â‹…,â‹¯,Z^nâˆ’1,â‹…âˆˆâ„1Ã—msubscript^ğ‘0â‹…subscript^ğ‘1â‹…â‹¯subscript^ğ‘ğ‘›1â‹…superscriptâ„1ğ‘š\widehat{Z}_{0,\cdot},\widehat{Z}_{1,\cdot},\cdots,\widehat{Z}_{n-1,\cdot}\in%
\mathbb{R}^{1\times m}over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT 0 ,
â‹… end_POSTSUBSCRIPT , over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT 1
, â‹… end_POSTSUBSCRIPT , â‹¯ , over^ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT italic_n - 1 , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT satisfying
Z^k=(Mâ¡(r)â¢Z)ksubscript^ğ‘ğ‘˜subscriptMğ‘Ÿğ‘ğ‘˜\widehat{Z}_{k}=(\operatorname{M}(r)Z)_{k}over^
start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = (
roman_M ( italic_r ) italic_Z ) start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT.

Goal:
Z^k,â‹…=âˆ‘i=0kriâ¢Zkâˆ’i,â‹…subscript^ğ‘ğ‘˜â‹…superscriptsubscriptğ‘–0ğ‘˜subscriptğ‘Ÿğ‘–subscriptğ‘ğ‘˜ğ‘–â‹…\widehat{Z}_{k,\cdot}=\sum_{i=0}^{k}r_{i}Z_{k-i,\cdot}over^
start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_r
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Z start_POSTSUBSCRIPT
italic_k - italic_i , â‹… end_POSTSUBSCRIPT, where
rk=uTâ¢Wkâ¢v+tâ¢ğ•€â¢[k=0]subscriptğ‘Ÿğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£ğ‘¡ğ•€delimited-[]ğ‘˜0r_{k}=u^{T}W^{k}v+t\mathbb{I}[k=0]italic_r
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v + italic_t
blackboard_I [ italic_k = 0 ].

Initialize
S0=0âˆˆâ„dÃ—msubscriptğ‘†00superscriptâ„ğ‘‘ğ‘šS_{0}=0\in\mathbb{R}^{d\times
m}italic_S start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = 0 âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_d Ã— italic_m end_POSTSUPERSCRIPT.
â–·â–·\trianglerightâ–· State of the Algorithm

forÂ k=0,â‹¯,nâˆ’1ğ‘˜0â‹¯ğ‘›1k=0,\cdots,n-1italic_k = 0 , â‹¯ , italic_n - 1Â
do

Â Â Â Â Â Receive input
Zk,â‹…âˆˆâ„1Ã—msubscriptğ‘ğ‘˜â‹…superscriptâ„1ğ‘šZ_{k,\cdot}\in\mathbb{R}^{1\times
m}italic_Z start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT âˆˆ
blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT.

Â Â Â Â Â Compute
Sk+1=vâ¢Zk,â‹…+Wâ‹…Skâˆˆâ„dÃ—msubscriptğ‘†ğ‘˜1ğ‘£subscriptğ‘ğ‘˜â‹…â‹…ğ‘Šsubscriptğ‘†ğ‘˜superscriptâ„ğ‘‘ğ‘šS_{k+1}=vZ_{k,\cdot}+W\cdot
S_{k}\in\mathbb{R}^{d\times m}italic_S start_POSTSUBSCRIPT italic_k + 1
end_POSTSUBSCRIPT = italic_v italic_Z start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT + italic_W â‹… italic_S start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_m
end_POSTSUPERSCRIPT.

Â Â Â Â Â Return output
Z^k,â‹…=tâ¢Zk,â‹…+uTâ¢Sk+1âˆˆâ„1Ã—msubscript^ğ‘ğ‘˜â‹…ğ‘¡subscriptğ‘ğ‘˜â‹…superscriptğ‘¢ğ‘‡subscriptğ‘†ğ‘˜1superscriptâ„1ğ‘š\widehat{Z}_{k,\cdot}=tZ_{k,\cdot}+u^{T}S_{k+1}\in\mathbb{R}^{1\times
m}over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT = italic_t italic_Z start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT + italic_u start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT italic_S start_POSTSUBSCRIPT italic_k + 1
end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m
end_POSTSUPERSCRIPT.

Algorithm 1 Streaming Multiplication by a BLT Matrix

For a BLT given via a rational generating function rğ‘Ÿritalic_r in the matrix
representation of LemmaÂ 3.2, AlgorithmÂ 1 in fact computes
Z^=Mâ¢(r)â¢Z^ğ‘ğ‘€ğ‘Ÿğ‘\hat{Z}=M(r)Zover^ start_ARG italic_Z end_ARG =
italic_M ( italic_r ) italic_Z in row-by-row streaming fashion:

######  Lemma 3.4 (Properties of AlgorithmÂ 1).

AlgorithmÂ 1 taskes as input a stream
Z0,â‹…,Z1,â‹…,â‹¯,Znâˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘ğ‘›1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n-1,\cdot}\in\mathbb{R}^{1\times
m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n - 1 , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT and outputs a stream
Z^0,â‹…,Z^1,â‹…,â‹¯,Z^nâˆ’1,â‹…âˆˆâ„1Ã—msubscript^ğ‘0â‹…subscript^ğ‘1â‹…â‹¯subscript^ğ‘ğ‘›1â‹…superscriptâ„1ğ‘š\widehat{Z}_{0,\cdot},\widehat{Z}_{1,\cdot},\cdots,\widehat{Z}_{n-1,\cdot}\in%
\mathbb{R}^{1\times m}over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT 0 ,
â‹… end_POSTSUBSCRIPT , over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT 1
, â‹… end_POSTSUBSCRIPT , â‹¯ , over^ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT italic_n - 1 , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT. It takes parameters
u,vâˆˆâ„dÃ—1ğ‘¢ğ‘£superscriptâ„ğ‘‘1u,v\in\mathbb{R}^{d\times 1}italic_u ,
italic_v âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d Ã— 1
end_POSTSUPERSCRIPT and
Wâˆˆâ„dÃ—dğ‘Šsuperscriptâ„ğ‘‘ğ‘‘W\in\mathbb{R}^{d\times d}italic_W âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_d end_POSTSUPERSCRIPT
and tâˆˆâ„ğ‘¡â„t\in\mathbb{R}italic_t âˆˆ blackboard_R. At each iteration
kğ‘˜kitalic_k, output satisfies

| Z^k,â‹…=âˆ‘j=0krkâˆ’jâ‹…Zj,â‹…=tâ¢Zk,â‹…+âˆ‘j=0kuTâ¢Wkâˆ’jâ¢vâ‹…Zj,â‹…,subscript^ğ‘ğ‘˜â‹…superscriptsubscriptğ‘—0ğ‘˜â‹…subscriptğ‘Ÿğ‘˜ğ‘—subscriptğ‘ğ‘—â‹…ğ‘¡subscriptğ‘ğ‘˜â‹…superscriptsubscriptğ‘—0ğ‘˜â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘—ğ‘£subscriptğ‘ğ‘—â‹…\widehat{Z}_{k,\cdot}=\sum_{j=0}^{k}r_{k-j}\cdot Z_{j,\cdot}=tZ_{k,\cdot}+\sum% _{j=0}^{k}u^{T}W^{k-j}v\cdot Z_{j,\cdot},over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_k - italic_j end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT italic_j , â‹… end_POSTSUBSCRIPT = italic_t italic_Z start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k - italic_j end_POSTSUPERSCRIPT italic_v â‹… italic_Z start_POSTSUBSCRIPT italic_j , â‹… end_POSTSUBSCRIPT , |  | (3.15)  
---|---|---|---  
  
where
rk=uTâ¢Wkâ¢v+tâ¢ğ•€â¢[k=0]subscriptğ‘Ÿğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£ğ‘¡ğ•€delimited-[]ğ‘˜0r_{k}=u^{T}W^{k}v+t\mathbb{I}[k=0]italic_r
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v + italic_t
blackboard_I [ italic_k = 0 ]. The space usage is
Oâ¢(dâ¢m+d2)ğ‘‚ğ‘‘ğ‘šsuperscriptğ‘‘2O(dm+d^{2})italic_O ( italic_d italic_m +
italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) and the runtime per
iteration is dominated by a matrix multiplication Wâ‹…Sâ‹…ğ‘Šğ‘†W\cdot
Sitalic_W â‹… italic_S, where
Sâˆˆâ„dÃ—mğ‘†superscriptâ„ğ‘‘ğ‘šS\in\mathbb{R}^{d\times m}italic_S âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_m end_POSTSUPERSCRIPT.

###### Proof.

By induction, for all kğ‘˜kitalic_k, we have

| Sk+1=âˆ‘j=0kWkâˆ’jâ¢vâ¢Zj,â‹…subscriptğ‘†ğ‘˜1superscriptsubscriptğ‘—0ğ‘˜superscriptğ‘Šğ‘˜ğ‘—ğ‘£subscriptğ‘ğ‘—â‹…S_{k+1}=\sum_{j=0}^{k}W^{k-j}vZ_{j,\cdot}italic_S start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k - italic_j end_POSTSUPERSCRIPT italic_v italic_Z start_POSTSUBSCRIPT italic_j , â‹… end_POSTSUBSCRIPT |   
---|---|---  
  
and, hence,

| tâ¢Zk,â‹…+uTâ¢Sk+1=tâ¢Zk,â‹…+âˆ‘j=0kuTâ¢Wkâˆ’jâ¢vâ¢Zj,â‹…=âˆ‘j=0krkâˆ’jâ¢Zj,â‹…=Z^k,â‹…,ğ‘¡subscriptğ‘ğ‘˜â‹…superscriptğ‘¢ğ‘‡subscriptğ‘†ğ‘˜1ğ‘¡subscriptğ‘ğ‘˜â‹…superscriptsubscriptğ‘—0ğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘—ğ‘£subscriptğ‘ğ‘—â‹…superscriptsubscriptğ‘—0ğ‘˜subscriptğ‘Ÿğ‘˜ğ‘—subscriptğ‘ğ‘—â‹…subscript^ğ‘ğ‘˜â‹…tZ_{k,\cdot}+u^{T}S_{k+1}=tZ_{k,\cdot}+\sum_{j=0}^{k}u^{T}W^{k-j}vZ_{j,\cdot}=% \sum_{j=0}^{k}r_{k-j}Z_{j,\cdot}=\widehat{Z}_{k,\cdot},italic_t italic_Z start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT + italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_S start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT = italic_t italic_Z start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k - italic_j end_POSTSUPERSCRIPT italic_v italic_Z start_POSTSUBSCRIPT italic_j , â‹… end_POSTSUBSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_k - italic_j end_POSTSUBSCRIPT italic_Z start_POSTSUBSCRIPT italic_j , â‹… end_POSTSUBSCRIPT = over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT , |   
---|---|---  
  
where Z^=Mâ¢(r,n)â¢Z^ğ‘ğ‘€ğ‘Ÿğ‘›ğ‘\widehat{Z}=M(r,n)Zover^ start_ARG italic_Z
end_ARG = italic_M ( italic_r , italic_n ) italic_Z.

The state of the algorithm after iteration kğ‘˜kitalic_k is given by
Sk+1âˆˆâ„dÃ—msubscriptğ‘†ğ‘˜1superscriptâ„ğ‘‘ğ‘šS_{k+1}\in\mathbb{R}^{d\times
m}italic_S start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_d Ã— italic_m end_POSTSUPERSCRIPT. The space
usage of the algorithm is dominated by storing this state
(dâ¢mğ‘‘ğ‘šdmitalic_d italic_m registers) plus storing the parameters
u,v,Wğ‘¢ğ‘£ğ‘Šu,v,Witalic_u , italic_v , italic_W
(2â¢d+d22ğ‘‘superscriptğ‘‘22d+d^{2}2 italic_d + italic_d start_POSTSUPERSCRIPT
2 end_POSTSUPERSCRIPT registers). More precisely, the only space that the
algorithm requires is the state, plus whatever registers are required to
perform the update
Sk+1=vâ¢Zk,â‹…+Wâ‹…Sksubscriptğ‘†ğ‘˜1ğ‘£subscriptğ‘ğ‘˜â‹…â‹…ğ‘Šsubscriptğ‘†ğ‘˜S_{k+1}=vZ_{k,\cdot}+W\cdot
S_{k}italic_S start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT = italic_v
italic_Z start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT + italic_W â‹…
italic_S start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT. (The output
computation
Z^k,â‹…=tâ¢Zk,â‹…+uTâ¢Sk+1subscript^ğ‘ğ‘˜â‹…ğ‘¡subscriptğ‘ğ‘˜â‹…superscriptğ‘¢ğ‘‡subscriptğ‘†ğ‘˜1\widehat{Z}_{k,\cdot}=tZ_{k,\cdot}+u^{T}S_{k+1}over^
start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT = italic_t italic_Z start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT + italic_u start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT italic_S start_POSTSUBSCRIPT italic_k + 1
end_POSTSUBSCRIPT requires mğ‘šmitalic_m registers to store the output.) The
exact number of registers required for this update depends on the structure of
vğ‘£vitalic_v and Wğ‘ŠWitalic_W. If Wğ‘ŠWitalic_W is a diagonal matrix or has
the structure given in Eq.Â 3.9, then the update can be performed â€œin
placeâ€ and we only require mğ‘šmitalic_m extra registers to store the input
Zk,â‹…subscriptğ‘ğ‘˜â‹…Z_{k,\cdot}italic_Z start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT. In general, we can always perform this update using
dâ¢mğ‘‘ğ‘šdmitalic_d italic_m additional registers.

The running time of one iteration consists of the update
Sk+1=vâ¢Zk,â‹…+Wâ‹…Sksubscriptğ‘†ğ‘˜1ğ‘£subscriptğ‘ğ‘˜â‹…â‹…ğ‘Šsubscriptğ‘†ğ‘˜S_{k+1}=vZ_{k,\cdot}+W\cdot
S_{k}italic_S start_POSTSUBSCRIPT italic_k + 1 end_POSTSUBSCRIPT = italic_v
italic_Z start_POSTSUBSCRIPT italic_k , â‹… end_POSTSUBSCRIPT + italic_W â‹…
italic_S start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT and the matrix-vector
product
Z^k,â‹…=uTâ¢Sk+1subscript^ğ‘ğ‘˜â‹…superscriptğ‘¢ğ‘‡subscriptğ‘†ğ‘˜1\widehat{Z}_{k,\cdot}=u^{T}S_{k+1}over^
start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_k , â‹…
end_POSTSUBSCRIPT = italic_u start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT italic_S start_POSTSUBSCRIPT italic_k + 1
end_POSTSUBSCRIPT. The matrix-matrix product will dominate over the matrix-
vector products. The runtime of the matrix-matrix product depends on the
structure of Wğ‘ŠWitalic_W. If Wğ‘ŠWitalic_W is sparse (e.g., if it is
diagonal), then this is Oâ¢(dâ¢m)ğ‘‚ğ‘‘ğ‘šO(dm)italic_O ( italic_d italic_m )
time. In general, we can perform this update in
Oâ¢(d2â¢m)ğ‘‚superscriptğ‘‘2ğ‘šO(d^{2}m)italic_O ( italic_d
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_m ) time. âˆ

##  4 Factorizations via Rational Function Approximation

In this section we prove TheoremÂ 1.1. We follow the generating functions view
presented in SectionÂ 3 and use the corresponding sampling algorithm
(AlgorithmÂ 1). The proof is split into three steps. In SectionÂ 4.1 we recap
how a generating function rğ‘Ÿritalic_r yields a valid matrix factorization
and prove that, if râ¢(x)â‰ˆ1âˆ’xğ‘Ÿğ‘¥1ğ‘¥r(x)\approx\sqrt{1-x}italic_r (
italic_x ) â‰ˆ square-root start_ARG 1 - italic_x end_ARG, then this yields an
approximately optimal factorization. In SectionÂ 4.2 we construct a low-degree
rational function rğ‘Ÿritalic_r that appropriately approximates the square
root. Finally we assemble the parts of the proof in SectionÂ 4.3.

###  4.1 Reduction to Approximating the Square Root

PropositionÂ 2.2 shows that the optimal matrix factorization is given by
A(n)=Bâ¢Csuperscriptğ´ğ‘›ğµğ¶A^{(n)}=BCitalic_A start_POSTSUPERSCRIPT (
italic_n ) end_POSTSUPERSCRIPT = italic_B italic_C where
B=C=Mâ¢(f,n)ğµğ¶ğ‘€ğ‘“ğ‘›B=C=M(f,n)italic_B = italic_C = italic_M ( italic_f ,
italic_n ) and fâ¢(x)=1/1âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)=1/\sqrt{1-x}italic_f ( italic_x )
= 1 / square-root start_ARG 1 - italic_x end_ARG. Suppose we have a generating
function râ¢(x)â‰ˆ1âˆ’xğ‘Ÿğ‘¥1ğ‘¥r(x)\approx\sqrt{1-x}italic_r ( italic_x )
â‰ˆ square-root start_ARG 1 - italic_x end_ARG. Let
bâ¢(x)â‰”râ¢(x)1âˆ’xâ‰ˆ11âˆ’x=fâ¢(x)â‰”ğ‘ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥11ğ‘¥ğ‘“ğ‘¥b(x)\coloneqq\frac{r(x)}{1-x}\approx\frac{1}{\sqrt{1-x}}=f(x)italic_b
( italic_x ) â‰” divide start_ARG italic_r ( italic_x ) end_ARG start_ARG 1 -
italic_x end_ARG â‰ˆ divide start_ARG 1 end_ARG start_ARG square-root
start_ARG 1 - italic_x end_ARG end_ARG = italic_f ( italic_x ) and
câ¢(x)â‰”1râ¢(x)â‰ˆ11âˆ’xâ‰”ğ‘ğ‘¥1ğ‘Ÿğ‘¥11ğ‘¥c(x)\coloneqq\frac{1}{r(x)}\approx\frac{1}{\sqrt{1-x}}italic_c
( italic_x ) â‰” divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x )
end_ARG â‰ˆ divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 -
italic_x end_ARG end_ARG. Since
bâ¢(x)â‹…câ¢(x)=râ¢(x)1âˆ’xâ‹…1râ¢(x)=11âˆ’x=gâ¢(x)â‹…ğ‘ğ‘¥ğ‘ğ‘¥â‹…ğ‘Ÿğ‘¥1ğ‘¥1ğ‘Ÿğ‘¥11ğ‘¥ğ‘”ğ‘¥b(x)\cdot
c(x)=\frac{r(x)}{1-x}\cdot\frac{1}{r(x)}=\frac{1}{1-x}=g(x)italic_b ( italic_x
) â‹… italic_c ( italic_x ) = divide start_ARG italic_r ( italic_x ) end_ARG
start_ARG 1 - italic_x end_ARG â‹… divide start_ARG 1 end_ARG start_ARG
italic_r ( italic_x ) end_ARG = divide start_ARG 1 end_ARG start_ARG 1 -
italic_x end_ARG = italic_g ( italic_x ), we always obtain a valid
factorization
Mâ¢(b,n)â‹…Mâ¢(c,n)=A(n)â‹…ğ‘€ğ‘ğ‘›ğ‘€ğ‘ğ‘›superscriptğ´ğ‘›M(b,n)\cdot
M(c,n)=A^{(n)}italic_M ( italic_b , italic_n ) â‹… italic_M ( italic_c ,
italic_n ) = italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT.
We can bound the objective value of this factorization in terms of the
approximation râ¢(x)â‰ˆ1âˆ’xğ‘Ÿğ‘¥1ğ‘¥r(x)\approx\sqrt{1-x}italic_r ( italic_x
) â‰ˆ square-root start_ARG 1 - italic_x end_ARG.

######  Proposition 4.1 (Approximating the square root approximates the matrix
factorization objective).

Let Ï„>0ğœ0\tau>0italic_Ï„ > 0 and nâˆˆâ„•ğ‘›â„•n\in\mathbb{N}italic_n âˆˆ blackboard_N. Let r:Câ†’â„‚:ğ‘Ÿâ†’ğ¶â„‚r:C\to\mathbb{C}italic_r : italic_C â†’ blackboard_C, where Câ‰”{zâˆˆâ„‚:|z|<1}â‰”ğ¶conditional-setğ‘§â„‚ğ‘§1C\coloneqq\\{z\in\mathbb{C}:|z|<1\\}italic_C â‰” { italic_z âˆˆ blackboard_C : | italic_z | < 1 } is the open unit disc in the complex plane centered at zero. Let

| Î³Ï„â‰”sup{|r(x)âˆ’1âˆ’x|:xâˆˆâ„‚,|x|=exp(âˆ’Ï„)}.\gamma_{\tau}\coloneqq\sup\left\\{|r(x)-\sqrt{1-x}|:x\in\mathbb{C},|x|=\exp(-% \tau)\right\\}.italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‰” roman_sup { | italic_r ( italic_x ) - square-root start_ARG 1 - italic_x end_ARG | : italic_x âˆˆ blackboard_C , | italic_x | = roman_exp ( - italic_Ï„ ) } . |   
---|---|---  
  
Let
bâ¢(x)â‰”râ¢(x)1âˆ’xâ‰”ğ‘ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥b(x)\coloneqq\frac{r(x)}{1-x}italic_b (
italic_x ) â‰” divide start_ARG italic_r ( italic_x ) end_ARG start_ARG 1 -
italic_x end_ARG and
câ¢(x)â‰”1râ¢(x)â‰”ğ‘ğ‘¥1ğ‘Ÿğ‘¥c(x)\coloneqq\frac{1}{r(x)}italic_c ( italic_x
) â‰” divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) end_ARG and
fâ¢(x)=11âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)=\frac{1}{\sqrt{1-x}}italic_f ( italic_x ) =
divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x
end_ARG end_ARG. Then
Mâ¢(b,n)â‹…Mâ¢(c,n)=Mâ¢(c,n)â‹…Mâ¢(b,n)=A(n)=Mâ¢(f,n)2â‹…ğ‘€ğ‘ğ‘›ğ‘€ğ‘ğ‘›â‹…ğ‘€ğ‘ğ‘›ğ‘€ğ‘ğ‘›superscriptğ´ğ‘›ğ‘€superscriptğ‘“ğ‘›2M(b,n)\cdot
M(c,n)=M(c,n)\cdot M(b,n)=A^{(n)}=M(f,n)^{2}italic_M ( italic_b , italic_n )
â‹… italic_M ( italic_c , italic_n ) = italic_M ( italic_c , italic_n ) â‹…
italic_M ( italic_b , italic_n ) = italic_A start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT = italic_M ( italic_f , italic_n ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT, where Mâ¢(â‹…,n)ğ‘€â‹…ğ‘›M(\cdot,n)italic_M ( â‹… ,
italic_n ) is defined in Equation 3.1 and A(n)superscriptğ´ğ‘›A^{(n)}italic_A
start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT is defined in Equation
2.1. Moreover, if
Î³Ï„â‰¤(1âˆ’expâ¡(âˆ’2â¢Ï„)4)2subscriptğ›¾ğœsuperscript12ğœ42\gamma_{\tau}\leq\left(\frac{1-\exp(-2\tau)}{4}\right)^{2}italic_Î³
start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‰¤ ( divide start_ARG 1 -
roman_exp ( - 2 italic_Ï„ ) end_ARG start_ARG 4 end_ARG )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT, then

| â€–Mâ¢(b,n)â€–2â†’âˆsubscriptnormğ‘€ğ‘ğ‘›â†’2\displaystyle\|M(b,n)\|_{2\to\infty}âˆ¥ italic_M ( italic_b , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | â‰¤â€–Mâ¢(f,n)â€–2â†’âˆ+expâ¡(Ï„â¢n)â‹…Î³Ï„expâ¡(2â¢Ï„)âˆ’1,absentsubscriptnormğ‘€ğ‘“ğ‘›â†’2â‹…ğœğ‘›subscriptğ›¾ğœ2ğœ1\displaystyle\leq\|M(f,n)\|_{2\to\infty}+\frac{\exp(\tau n)\cdot\gamma_{\tau}}% {\sqrt{\exp(2\tau)-1}},â‰¤ âˆ¥ italic_M ( italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT + divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG roman_exp ( 2 italic_Ï„ ) - 1 end_ARG end_ARG , |   
---|---|---|---  
| â€–Mâ¢(c,n)â€–1â†’2subscriptnormğ‘€ğ‘ğ‘›â†’12\displaystyle\|M(c,n)\|_{1\to 2}âˆ¥ italic_M ( italic_c , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | â‰¤â€–Mâ¢(f,n)â€–1â†’2+expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)âˆ’1)2âˆ’27/2â¢Î³Ï„â¢expâ¡(4â¢Ï„)4.absentsubscriptnormğ‘€ğ‘“ğ‘›â†’12â‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ12superscript272subscriptğ›¾ğœ4ğœ\displaystyle\leq\|M(f,n)\|_{1\to 2}+\frac{\exp(\tau n)\cdot\gamma_{\tau}}{% \sqrt[4]{(\exp(2\tau)-1)^{2}-2^{7/2}\gamma_{\tau}\exp(4\tau)}}.â‰¤ âˆ¥ italic_M ( italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT + divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2 italic_Ï„ ) - 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 4 italic_Ï„ ) end_ARG end_ARG . |   
  
We will end up setting Ï„=12â¢nğœ12ğ‘›\tau=\frac{1}{2n}italic_Ï„ = divide
start_ARG 1 end_ARG start_ARG 2 italic_n end_ARG. This ensures that
expâ¡(Ï„â¢n)â‹…Î³Ï„expâ¡(2â¢Ï„)âˆ’1â‰¤nâ‹…expâ¡(1/2)â‹…Î³Ï„<2â¢nâ¢Î³Ï„â‹…ğœğ‘›subscriptğ›¾ğœ2ğœ1â‹…ğ‘›12subscriptğ›¾ğœ2ğ‘›subscriptğ›¾ğœ\frac{\exp(\tau
n)\cdot\gamma_{\tau}}{\sqrt{\exp(2\tau)-1}}\leq\sqrt{n}\cdot%
\exp(1/2)\cdot\gamma_{\tau}<2\sqrt{n}\gamma_{\tau}divide start_ARG roman_exp (
italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„
end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG roman_exp ( 2
italic_Ï„ ) - 1 end_ARG end_ARG â‰¤ square-root start_ARG italic_n end_ARG â‹…
roman_exp ( 1 / 2 ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„
end_POSTSUBSCRIPT < 2 square-root start_ARG italic_n end_ARG italic_Î³
start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT and, if nâ‰¥6ğ‘›6n\geq
6italic_n â‰¥ 6 and
Î³Ï„â‰¤132â‹…n2subscriptğ›¾ğœ1â‹…32superscriptğ‘›2\gamma_{\tau}\leq\frac{1}{32\cdot
n^{2}}italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‰¤ divide
start_ARG 1 end_ARG start_ARG 32 â‹… italic_n start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT end_ARG, then
expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)âˆ’1)2âˆ’27/2â¢Î³Ï„â¢expâ¡(4â¢Ï„)4â‰¤24â‹…nâ‹…expâ¡(1/2)â‹…Î³Ï„<2â¢nâ¢Î³Ï„â‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ12superscript272subscriptğ›¾ğœ4ğœâ‹…42ğ‘›12subscriptğ›¾ğœ2ğ‘›subscriptğ›¾ğœ\frac{\exp(\tau
n)\cdot\gamma_{\tau}}{\sqrt[4]{(\exp(2\tau)-1)^{2}-2^{7/2}%
\gamma_{\tau}\exp(4\tau)}}\leq\sqrt[4]{2}\cdot\sqrt{n}\cdot\exp(1/2)\cdot%
\gamma_{\tau}<2\sqrt{n}\gamma_{\tau}divide start_ARG roman_exp ( italic_Ï„
italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT
end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2
italic_Ï„ ) - 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2
start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT
italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 4 italic_Ï„ ) end_ARG end_ARG â‰¤ nth-
root start_ARG 4 end_ARG start_ARG 2 end_ARG â‹… square-root start_ARG
italic_n end_ARG â‹… roman_exp ( 1 / 2 ) â‹… italic_Î³ start_POSTSUBSCRIPT
italic_Ï„ end_POSTSUBSCRIPT < 2 square-root start_ARG italic_n end_ARG
italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT.

###### Proof.

Let
bâ¢(x)=âˆ‘k=0âˆbkâ¢xkğ‘ğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘ğ‘˜superscriptğ‘¥ğ‘˜b(x)=\sum_{k=0}^{\infty}b_{k}x^{k}italic_b
( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_b start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT,
câ¢(x)=âˆ‘k=0âˆckâ¢xkğ‘ğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘ğ‘˜superscriptğ‘¥ğ‘˜c(x)=\sum_{k=0}^{\infty}c_{k}x^{k}italic_c
( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_c start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT, and
fâ¢(x)=âˆ‘k=0âˆfkâ¢xkğ‘“ğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘“ğ‘˜superscriptğ‘¥ğ‘˜f(x)=\sum_{k=0}^{\infty}f_{k}x^{k}italic_f
( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT. By linearity and the triangle inequality,

| â€–Mâ¢(b,n)â€–2â†’âˆsubscriptnormğ‘€ğ‘ğ‘›â†’2\displaystyle\|M(b,n)\|_{2\to\infty}âˆ¥ italic_M ( italic_b , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | =â€–Mâ¢(f,n)+Mâ¢(bâˆ’f,n)â€–2â†’âˆâ‰¤â€–Mâ¢(f,n)â€–2â†’âˆ+â€–Mâ¢(bâˆ’f,n)â€–2â†’âˆ,absentsubscriptnormğ‘€ğ‘“ğ‘›ğ‘€ğ‘ğ‘“ğ‘›â†’2subscriptnormğ‘€ğ‘“ğ‘›â†’2subscriptnormğ‘€ğ‘ğ‘“ğ‘›â†’2\displaystyle=\|M(f,n)+M(b-f,n)\|_{2\to\infty}\leq\|M(f,n)\|_{2\to\infty}+\|M(% b-f,n)\|_{2\to\infty},= âˆ¥ italic_M ( italic_f , italic_n ) + italic_M ( italic_b - italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‰¤ âˆ¥ italic_M ( italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT + âˆ¥ italic_M ( italic_b - italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT , |   
---|---|---|---  
| â€–Mâ¢(c,n)â€–1â†’2subscriptnormğ‘€ğ‘ğ‘›â†’12\displaystyle\|M(c,n)\|_{1\to 2}âˆ¥ italic_M ( italic_c , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | =â€–Mâ¢(f,n)+Mâ¢(câˆ’f,n)â€–1â†’2â‰¤â€–Mâ¢(f,n)â€–1â†’2+â€–Mâ¢(câˆ’f,n)â€–1â†’2.absentsubscriptnormğ‘€ğ‘“ğ‘›ğ‘€ğ‘ğ‘“ğ‘›â†’12subscriptnormğ‘€ğ‘“ğ‘›â†’12subscriptnormğ‘€ğ‘ğ‘“ğ‘›â†’12\displaystyle=\|M(f,n)+M(c-f,n)\|_{1\to 2}\leq\|M(f,n)\|_{1\to 2}+\|M(c-f,n)\|% _{1\to 2}.= âˆ¥ italic_M ( italic_f , italic_n ) + italic_M ( italic_c - italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ âˆ¥ italic_M ( italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT + âˆ¥ italic_M ( italic_c - italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT . |   
  
Thus it suffices to bound
â€–Mâ¢(bâˆ’f,n)â€–2â†’âˆ=âˆ‘k=0nâˆ’1(bkâˆ’fk)2subscriptnormğ‘€ğ‘ğ‘“ğ‘›â†’2superscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘ğ‘˜subscriptğ‘“ğ‘˜2\|M(b-f,n)\|_{2\to\infty}=\sqrt{\sum_{k=0}^{n-1}(b_{k}-f_{k})^{2}}âˆ¥
italic_M ( italic_b - italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ
end_POSTSUBSCRIPT = square-root start_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = 0
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT (
italic_b start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - italic_f
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT end_ARG and
â€–Mâ¢(câˆ’f,n)â€–1â†’2=âˆ‘k=0nâˆ’1(ckâˆ’fk)2subscriptnormğ‘€ğ‘ğ‘“ğ‘›â†’12superscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘ğ‘˜subscriptğ‘“ğ‘˜2\|M(c-f,n)\|_{1\to
2}=\sqrt{\sum_{k=0}^{n-1}(c_{k}-f_{k})^{2}}âˆ¥ italic_M ( italic_c - italic_f
, italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = square-root
start_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( italic_c
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
end_ARG. We bound these using a weighted version of Parsevalâ€™s identity.

######  Lemma 4.2 (Weighted Parsevalâ€™s Identity).

Let g,h:Câ†’â„‚:ğ‘”â„â†’ğ¶â„‚g,h:C\to\mathbb{C}italic_g , italic_h : italic_C â†’ blackboard_C be analytic, where Câ‰”{zâˆˆâ„‚:|z|<1}â‰”ğ¶conditional-setğ‘§â„‚ğ‘§1C\coloneqq\\{z\in\mathbb{C}:|z|<1\\}italic_C â‰” { italic_z âˆˆ blackboard_C : | italic_z | < 1 } is the open unit disc in the complex plane centered at zero. Let gâ¢(x)=âˆ‘k=0âˆgkâ¢xkğ‘”ğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘”ğ‘˜superscriptğ‘¥ğ‘˜g(x)=\sum_{k=0}^{\infty}g_{k}x^{k}italic_g ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT and hâ¢(x)=âˆ‘k=0âˆhkâ¢xkâ„ğ‘¥superscriptsubscriptğ‘˜0subscriptâ„ğ‘˜superscriptğ‘¥ğ‘˜h(x)=\sum_{k=0}^{\infty}h_{k}x^{k}italic_h ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT for xâˆˆCğ‘¥ğ¶x\in Citalic_x âˆˆ italic_C, where gk,hkâˆˆâ„‚subscriptğ‘”ğ‘˜subscriptâ„ğ‘˜â„‚g_{k},h_{k}\in\mathbb{C}italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT , italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT âˆˆ blackboard_C. Let Ï„>0ğœ0\tau>0italic_Ï„ > 0. Then

| 12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|gâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’hâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))|2â¢dÎ¸12ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘”1ğœƒğœâ„1ğœƒğœ2differential-dğœƒ\displaystyle\frac{1}{2\pi}\int_{-\pi}^{\pi}|g(\exp(\sqrt{-1}\theta-\tau))-h(% \exp(\sqrt{-1}\theta-\tau))|^{2}\mathrm{d}\thetadivide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | italic_g ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - italic_h ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ | =âˆ‘k=0âˆ|gkâˆ’hk|2â‹…expâ¡(âˆ’2â¢Ï„â¢k)absentsuperscriptsubscriptğ‘˜0â‹…superscriptsubscriptğ‘”ğ‘˜subscriptâ„ğ‘˜22ğœğ‘˜\displaystyle=\sum_{k=0}^{\infty}|g_{k}-h_{k}|^{2}\cdot\exp(-2\tau k)= âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‹… roman_exp ( - 2 italic_Ï„ italic_k ) |   
---|---|---|---  
|  | â‰¥expâ¡(âˆ’2â¢Ï„â¢(nâˆ’1))â¢âˆ‘k=0nâˆ’1|gkâˆ’hk|2.absent2ğœğ‘›1superscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘”ğ‘˜subscriptâ„ğ‘˜2\displaystyle\geq\exp(-2\tau(n-1))\sum_{k=0}^{n-1}|g_{k}-h_{k}|^{2}.â‰¥ roman_exp ( - 2 italic_Ï„ ( italic_n - 1 ) ) âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT | italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT . |   
  
###### Proof.

Let
wâ¢(x)=gâ¢(x)âˆ’hâ¢(x)=âˆ‘k=0âˆwkâ¢xkğ‘¤ğ‘¥ğ‘”ğ‘¥â„ğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘¤ğ‘˜superscriptğ‘¥ğ‘˜w(x)=g(x)-h(x)=\sum_{k=0}^{\infty}w_{k}x^{k}italic_w
( italic_x ) = italic_g ( italic_x ) - italic_h ( italic_x ) = âˆ‘
start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ
end_POSTSUPERSCRIPT italic_w start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT
italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT, where
wk=gkâˆ’hksubscriptğ‘¤ğ‘˜subscriptğ‘”ğ‘˜subscriptâ„ğ‘˜w_{k}=g_{k}-h_{k}italic_w
start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_g start_POSTSUBSCRIPT
italic_k end_POSTSUBSCRIPT - italic_h start_POSTSUBSCRIPT italic_k
end_POSTSUBSCRIPT. Then

| 12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|gâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’hâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))|2â¢dÎ¸12ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘”1ğœƒğœâ„1ğœƒğœ2differential-dğœƒ\displaystyle\frac{1}{2\pi}\int_{-\pi}^{\pi}|g(\exp(\sqrt{-1}\theta-\tau))-h(% \exp(\sqrt{-1}\theta-\tau))|^{2}\mathrm{d}\thetadivide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | italic_g ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - italic_h ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ |   
---|---|---  
| =12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|wâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))|2â¢dÎ¸absent12ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘¤1ğœƒğœ2differential-dğœƒ\displaystyle=\frac{1}{2\pi}\int_{-\pi}^{\pi}|w(\exp(\sqrt{-1}\theta-\tau))|^{% 2}\mathrm{d}\theta= divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | italic_w ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ |   
| =12â¢Ï€â¢âˆ«âˆ’Ï€Ï€wâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))â‹…wâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))Â¯â¢dÎ¸absent12ğœ‹superscriptsubscriptğœ‹ğœ‹â‹…ğ‘¤1ğœƒğœÂ¯ğ‘¤1ğœƒğœdifferential-dğœƒ\displaystyle=\frac{1}{2\pi}\int_{-\pi}^{\pi}w(\exp(\sqrt{-1}\theta-\tau))% \cdot\overline{w(\exp(\sqrt{-1}\theta-\tau))}\mathrm{d}\theta= divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT italic_w ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) â‹… overÂ¯ start_ARG italic_w ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) end_ARG roman_d italic_Î¸ |   
| =12â¢Ï€â¢âˆ«âˆ’Ï€Ï€(âˆ‘k=0âˆwkâ‹…(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))k)â‹…(âˆ‘â„“=0âˆwâ„“â‹…(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))â„“)Â¯â¢dÎ¸absent12ğœ‹superscriptsubscriptğœ‹ğœ‹â‹…superscriptsubscriptğ‘˜0â‹…subscriptğ‘¤ğ‘˜superscript1ğœƒğœğ‘˜Â¯superscriptsubscriptâ„“0â‹…subscriptğ‘¤â„“superscript1ğœƒğœâ„“differential-dğœƒ\displaystyle=\frac{1}{2\pi}\int_{-\pi}^{\pi}\left(\sum_{k=0}^{\infty}w_{k}% \cdot(\exp(\sqrt{-1}\theta-\tau))^{k}\right)\cdot\overline{\left(\sum_{\ell=0}% ^{\infty}w_{\ell}\cdot(\exp(\sqrt{-1}\theta-\tau))^{\ell}\right)}\mathrm{d}\theta= divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT ( âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_w start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT â‹… ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT ) â‹… overÂ¯ start_ARG ( âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_w start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT â‹… ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT ) end_ARG roman_d italic_Î¸ |   
| =âˆ‘k,â„“=0âˆ12â¢Ï€â¢âˆ«âˆ’Ï€Ï€wkâ‹…(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))kâ‹…wâ„“Â¯â‹…(expâ¡(âˆ’âˆ’1â¢Î¸âˆ’Ï„))â„“â¢dÎ¸absentsuperscriptsubscriptğ‘˜â„“012ğœ‹superscriptsubscriptğœ‹ğœ‹â‹…subscriptğ‘¤ğ‘˜superscript1ğœƒğœğ‘˜Â¯subscriptğ‘¤â„“superscript1ğœƒğœâ„“differential-dğœƒ\displaystyle=\sum_{k,\ell=0}^{\infty}\frac{1}{2\pi}\int_{-\pi}^{\pi}w_{k}% \cdot(\exp(\sqrt{-1}\theta-\tau))^{k}\cdot\overline{w_{\ell}}\cdot(\exp(-\sqrt% {-1}\theta-\tau))^{\ell}\mathrm{d}\theta= âˆ‘ start_POSTSUBSCRIPT italic_k , roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT italic_w start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT â‹… ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT â‹… overÂ¯ start_ARG italic_w start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT end_ARG â‹… ( roman_exp ( - square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT roman_d italic_Î¸ |   
| =âˆ‘k,â„“=0âˆwkâ‹…wâ„“Â¯â‹…expâ¡(âˆ’(k+â„“)â¢Ï„)â‹…12â¢Ï€â¢âˆ«âˆ’Ï€Ï€expâ¡((kâˆ’â„“)â¢âˆ’1â¢Î¸)â¢dÎ¸absentsuperscriptsubscriptğ‘˜â„“0â‹…subscriptğ‘¤ğ‘˜Â¯subscriptğ‘¤â„“ğ‘˜â„“ğœ12ğœ‹superscriptsubscriptğœ‹ğœ‹ğ‘˜â„“1ğœƒdifferential-dğœƒ\displaystyle=\sum_{k,\ell=0}^{\infty}w_{k}\cdot\overline{w_{\ell}}\cdot\exp(-% (k+\ell)\tau)\cdot\frac{1}{2\pi}\int_{-\pi}^{\pi}\exp((k-\ell)\sqrt{-1}\theta)% \mathrm{d}\theta= âˆ‘ start_POSTSUBSCRIPT italic_k , roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_w start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT â‹… overÂ¯ start_ARG italic_w start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT end_ARG â‹… roman_exp ( - ( italic_k + roman_â„“ ) italic_Ï„ ) â‹… divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT roman_exp ( ( italic_k - roman_â„“ ) square-root start_ARG - 1 end_ARG italic_Î¸ ) roman_d italic_Î¸ |   
| =âˆ‘k,â„“=0âˆwkâ‹…wâ„“Â¯â‹…expâ¡(âˆ’(k+â„“)â¢Ï„)â‹…ğ•€â¢[kâˆ’â„“=0]absentsuperscriptsubscriptğ‘˜â„“0â‹…subscriptğ‘¤ğ‘˜Â¯subscriptğ‘¤â„“ğ‘˜â„“ğœğ•€delimited-[]ğ‘˜â„“0\displaystyle=\sum_{k,\ell=0}^{\infty}w_{k}\cdot\overline{w_{\ell}}\cdot\exp(-% (k+\ell)\tau)\cdot\mathbb{I}[k-\ell=0]= âˆ‘ start_POSTSUBSCRIPT italic_k , roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_w start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT â‹… overÂ¯ start_ARG italic_w start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT end_ARG â‹… roman_exp ( - ( italic_k + roman_â„“ ) italic_Ï„ ) â‹… blackboard_I [ italic_k - roman_â„“ = 0 ] |   
| =âˆ‘k=0âˆ|wk|2â‹…expâ¡(âˆ’2â¢kâ¢Ï„)absentsuperscriptsubscriptğ‘˜0â‹…superscriptsubscriptğ‘¤ğ‘˜22ğ‘˜ğœ\displaystyle=\sum_{k=0}^{\infty}|w_{k}|^{2}\cdot\exp(-2k\tau)= âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | italic_w start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‹… roman_exp ( - 2 italic_k italic_Ï„ ) |   
| =âˆ‘k=0âˆ|gkâˆ’hk|2â‹…expâ¡(âˆ’2â¢Ï„â¢k).absentsuperscriptsubscriptğ‘˜0â‹…superscriptsubscriptğ‘”ğ‘˜subscriptâ„ğ‘˜22ğœğ‘˜\displaystyle=\sum_{k=0}^{\infty}|g_{k}-h_{k}|^{2}\cdot\exp(-2\tau k).= âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | italic_g start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - italic_h start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‹… roman_exp ( - 2 italic_Ï„ italic_k ) . |   
  
âˆ

Recall
bâ¢(x)â‰”râ¢(x)1âˆ’xâ‰”ğ‘ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥b(x)\coloneqq\frac{r(x)}{1-x}italic_b (
italic_x ) â‰” divide start_ARG italic_r ( italic_x ) end_ARG start_ARG 1 -
italic_x end_ARG and fâ¢(x)=11âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)=\frac{1}{\sqrt{1-x}}italic_f
( italic_x ) = divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 -
italic_x end_ARG end_ARG, whence
bâ¢(x)âˆ’fâ¢(x)=râ¢(x)âˆ’1âˆ’x1âˆ’xğ‘ğ‘¥ğ‘“ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥1ğ‘¥b(x)-f(x)=\frac{r(x)-\sqrt{1-x}}{1-x}italic_b
( italic_x ) - italic_f ( italic_x ) = divide start_ARG italic_r ( italic_x )
- square-root start_ARG 1 - italic_x end_ARG end_ARG start_ARG 1 - italic_x
end_ARG. Now we have

| â€–Mâ¢(bâˆ’f,n)â€–2â†’âˆsubscriptnormğ‘€ğ‘ğ‘“ğ‘›â†’2\displaystyle\|M(b-f,n)\|_{2\to\infty}âˆ¥ italic_M ( italic_b - italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | =âˆ‘k=0nâˆ’1(bkâˆ’fk)2absentsuperscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘ğ‘˜subscriptğ‘“ğ‘˜2\displaystyle=\sqrt{\sum_{k=0}^{n-1}(b_{k}-f_{k})^{2}}= square-root start_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( italic_b start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG |   
---|---|---|---  
|  | â‰¤expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|bâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’fâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))|2â¢dÎ¸absentğœğ‘›112ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘1ğœƒğœğ‘“1ğœƒğœ2differential-dğœƒ\displaystyle\leq\exp(\tau(n-1))\sqrt{\frac{1}{2\pi}\int_{-\pi}^{\pi}|b(\exp(% \sqrt{-1}\theta-\tau))-f(\exp(\sqrt{-1}\theta-\tau))|^{2}\mathrm{d}\theta}â‰¤ roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | italic_b ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - italic_f ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ end_ARG |   
|  | =expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|râ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’1âˆ’exp(âˆ’1Î¸âˆ’Ï„))|2|1âˆ’exp(âˆ’1Î¸âˆ’Ï„))|2â¢dÎ¸\displaystyle=\exp(\tau(n-1))\sqrt{\frac{1}{2\pi}\int_{-\pi}^{\pi}\frac{\left|% r(\exp(\sqrt{-1}\theta-\tau))-\sqrt{1-\exp(\sqrt{-1}\theta-\tau))}\right|^{2}}% {\left|1-\exp(\sqrt{-1}\theta-\tau))\right|^{2}}\mathrm{d}\theta}= roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG | italic_r ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - square-root start_ARG 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) end_ARG | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG | 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG roman_d italic_Î¸ end_ARG |   
|  | â‰¤expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€Î³Ï„2|1âˆ’exp(âˆ’1Î¸âˆ’Ï„))|2â¢dÎ¸\displaystyle\leq\exp(\tau(n-1))\sqrt{\frac{1}{2\pi}\int_{-\pi}^{\pi}\frac{% \gamma_{\tau}^{2}}{\left|1-\exp(\sqrt{-1}\theta-\tau))\right|^{2}}\mathrm{d}\theta}â‰¤ roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG | 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG roman_d italic_Î¸ end_ARG |   
|  | =expâ¡(Ï„â¢(nâˆ’1))â‹…Î³Ï„â‹…expâ¡(Ï„)4â¢Ï€â¢âˆ«âˆ’Ï€Ï€1coshâ¡(Ï„)+cosâ¡(Î¸)â¢dÎ¸absentâ‹…ğœğ‘›1subscriptğ›¾ğœğœ4ğœ‹superscriptsubscriptğœ‹ğœ‹1ğœğœƒdifferential-dğœƒ\displaystyle=\exp(\tau(n-1))\cdot\gamma_{\tau}\cdot\sqrt{\frac{\exp(\tau)}{4% \pi}\int_{-\pi}^{\pi}\frac{1}{\cosh(\tau)+\cos(\theta)}\mathrm{d}\theta}= roman_exp ( italic_Ï„ ( italic_n - 1 ) ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‹… square-root start_ARG divide start_ARG roman_exp ( italic_Ï„ ) end_ARG start_ARG 4 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG roman_cosh ( italic_Ï„ ) + roman_cos ( italic_Î¸ ) end_ARG roman_d italic_Î¸ end_ARG |   
|  | =expâ¡(Ï„â¢(nâˆ’1))â‹…Î³Ï„â‹…expâ¡(Ï„)2â¢1cosh(Ï„)2âˆ’1\displaystyle=\exp(\tau(n-1))\cdot\gamma_{\tau}\cdot\sqrt{\frac{\exp(\tau)}{2}% \frac{1}{\sqrt{\cosh(\tau)^{2}-1}}}= roman_exp ( italic_Ï„ ( italic_n - 1 ) ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‹… square-root start_ARG divide start_ARG roman_exp ( italic_Ï„ ) end_ARG start_ARG 2 end_ARG divide start_ARG 1 end_ARG start_ARG square-root start_ARG roman_cosh ( italic_Ï„ ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 1 end_ARG end_ARG end_ARG |   
|  | =expâ¡(Ï„â¢(nâˆ’1))â‹…Î³Ï„1âˆ’expâ¡(âˆ’2â¢Ï„)=expâ¡(Ï„â¢n)â‹…Î³Ï„expâ¡(2â¢Ï„)âˆ’1â‰¤expâ¡(Ï„â¢n)â‹…Î³Ï„2â¢Ï„.absentâ‹…ğœğ‘›1subscriptğ›¾ğœ12ğœâ‹…ğœğ‘›subscriptğ›¾ğœ2ğœ1â‹…ğœğ‘›subscriptğ›¾ğœ2ğœ\displaystyle=\frac{\exp(\tau(n-1))\cdot\gamma_{\tau}}{\sqrt{1-\exp(-2\tau)}}=% \frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt{\exp(2\tau)-1}}\leq\frac{\exp(\tau n% )\cdot\gamma_{\tau}}{\sqrt{2\tau}}.= divide start_ARG roman_exp ( italic_Ï„ ( italic_n - 1 ) ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG 1 - roman_exp ( - 2 italic_Ï„ ) end_ARG end_ARG = divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG roman_exp ( 2 italic_Ï„ ) - 1 end_ARG end_ARG â‰¤ divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG 2 italic_Ï„ end_ARG end_ARG . |   
  
In the above we use the identity

| |1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|2superscript11ğœƒğœ2\displaystyle|1-\exp(\sqrt{-1}\theta-\tau)|^{2}| 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | =(1âˆ’eâˆ’Ï„â¢cosâ¡Î¸)2+(eâˆ’Ï„â¢sinâ¡Î¸)2=1âˆ’2â¢eâˆ’Ï„â¢cosâ¡Î¸+eâˆ’2â¢Ï„â¢(cos2â¡Î¸+sin2â¡Î¸)absentsuperscript1superscriptğ‘’ğœğœƒ2superscriptsuperscriptğ‘’ğœğœƒ212superscriptğ‘’ğœğœƒsuperscriptğ‘’2ğœsuperscript2ğœƒsuperscript2ğœƒ\displaystyle=(1-e^{-\tau}\cos\theta)^{2}+(e^{-\tau}\sin\theta)^{2}=1-2e^{-% \tau}\cos\theta+e^{-2\tau}(\cos^{2}\theta+\sin^{2}\theta)= ( 1 - italic_e start_POSTSUPERSCRIPT - italic_Ï„ end_POSTSUPERSCRIPT roman_cos italic_Î¸ ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + ( italic_e start_POSTSUPERSCRIPT - italic_Ï„ end_POSTSUPERSCRIPT roman_sin italic_Î¸ ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = 1 - 2 italic_e start_POSTSUPERSCRIPT - italic_Ï„ end_POSTSUPERSCRIPT roman_cos italic_Î¸ + italic_e start_POSTSUPERSCRIPT - 2 italic_Ï„ end_POSTSUPERSCRIPT ( roman_cos start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_Î¸ + roman_sin start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_Î¸ ) |   
---|---|---|---  
|  | =eâˆ’Ï„â‹…(eÏ„âˆ’2â¢cosâ¡Î¸+eâˆ’Ï„)=2â¢eâˆ’Ï„â‹…(coshâ¡Ï„+cosâ¡Î¸)absentâ‹…superscriptğ‘’ğœsuperscriptğ‘’ğœ2ğœƒsuperscriptğ‘’ğœâ‹…2superscriptğ‘’ğœğœğœƒ\displaystyle=e^{-\tau}\cdot\left(e^{\tau}-2\cos\theta+e^{-\tau}\right)=2e^{-% \tau}\cdot\left(\cosh\tau+\cos\theta\right)= italic_e start_POSTSUPERSCRIPT - italic_Ï„ end_POSTSUPERSCRIPT â‹… ( italic_e start_POSTSUPERSCRIPT italic_Ï„ end_POSTSUPERSCRIPT - 2 roman_cos italic_Î¸ + italic_e start_POSTSUPERSCRIPT - italic_Ï„ end_POSTSUPERSCRIPT ) = 2 italic_e start_POSTSUPERSCRIPT - italic_Ï„ end_POSTSUPERSCRIPT â‹… ( roman_cosh italic_Ï„ + roman_cos italic_Î¸ ) |   
  
and the integral

| âˆ€Ïƒ>112â¢Ï€â¢âˆ«âˆ’Ï€Ï€1Ïƒ+cosâ¡(Î¸)â¢dÎ¸=12â¢Ï€â¢âˆ«âˆ’Ï€Ï€1Ïƒ+sinâ¡(Î¸)â¢dÎ¸=1Ïƒ2âˆ’1,formulae-sequencefor-allğœ112ğœ‹superscriptsubscriptğœ‹ğœ‹1ğœğœƒdifferential-dğœƒ12ğœ‹superscriptsubscriptğœ‹ğœ‹1ğœğœƒdifferential-dğœƒ1superscriptğœ21\forall\sigma>1~{}~{}~{}~{}~{}\frac{1}{2\pi}\int_{-\pi}^{\pi}\frac{1}{\sigma+% \cos(\theta)}\mathrm{d}\theta=\frac{1}{2\pi}\int_{-\pi}^{\pi}\frac{1}{\sigma+% \sin(\theta)}\mathrm{d}\theta=\frac{1}{\sqrt{\sigma^{2}-1}},âˆ€ italic_Ïƒ > 1 divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG italic_Ïƒ + roman_cos ( italic_Î¸ ) end_ARG roman_d italic_Î¸ = divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG italic_Ïƒ + roman_sin ( italic_Î¸ ) end_ARG roman_d italic_Î¸ = divide start_ARG 1 end_ARG start_ARG square-root start_ARG italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 1 end_ARG end_ARG , |  | (4.1)  
---|---|---|---  
  
which follows from the derivative
ddâ¢Î¸â¢[2Ïƒ2âˆ’1â¢tanâˆ’1â¡(1+Ïƒâ¢tanâ¡(Î¸/2)Ïƒ2âˆ’1)]=1Ïƒ+sinâ¡(Î¸)ddğœƒdelimited-[]2superscriptğœ21superscript11ğœğœƒ2superscriptğœ211ğœğœƒ\frac{\mathrm{d}}{\mathrm{d}\theta}\left[\frac{2}{\sqrt{\sigma^{2}-1}}\tan^{-1%
}\left(\frac{1+\sigma\tan(\theta/2)}{\sqrt{\sigma^{2}-1}}\right)\right]=\frac{%
1}{\sigma+\sin(\theta)}divide start_ARG roman_d end_ARG start_ARG roman_d
italic_Î¸ end_ARG [ divide start_ARG 2 end_ARG start_ARG square-root start_ARG
italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 1 end_ARG end_ARG
roman_tan start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ( divide start_ARG 1 +
italic_Ïƒ roman_tan ( italic_Î¸ / 2 ) end_ARG start_ARG square-root start_ARG
italic_Ïƒ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 1 end_ARG end_ARG ) ]
= divide start_ARG 1 end_ARG start_ARG italic_Ïƒ + roman_sin ( italic_Î¸ )
end_ARG.

Similarly, recall
câ¢(x)â‰”1râ¢(x)â‰”ğ‘ğ‘¥1ğ‘Ÿğ‘¥c(x)\coloneqq\frac{1}{r(x)}italic_c ( italic_x
) â‰” divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) end_ARG and
fâ¢(x)=11âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)=\frac{1}{\sqrt{1-x}}italic_f ( italic_x ) =
divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x
end_ARG end_ARG, whence
câ¢(x)âˆ’fâ¢(x)=1âˆ’xâˆ’râ¢(x)râ¢(x)â‹…1âˆ’xğ‘ğ‘¥ğ‘“ğ‘¥1ğ‘¥ğ‘Ÿğ‘¥â‹…ğ‘Ÿğ‘¥1ğ‘¥c(x)-f(x)=\frac{\sqrt{1-x}-r(x)}{r(x)\cdot\sqrt{1-x}}italic_c
( italic_x ) - italic_f ( italic_x ) = divide start_ARG square-root start_ARG
1 - italic_x end_ARG - italic_r ( italic_x ) end_ARG start_ARG italic_r (
italic_x ) â‹… square-root start_ARG 1 - italic_x end_ARG end_ARG. Assuming
Î³Ï„<(1âˆ’expâ¡(âˆ’2â¢Ï„))227/2subscriptğ›¾ğœsuperscript12ğœ2superscript272\gamma_{\tau}<\frac{(1-\exp(-2\tau))^{2}}{2^{7/2}}italic_Î³
start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT < divide start_ARG ( 1 -
roman_exp ( - 2 italic_Ï„ ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
end_ARG start_ARG 2 start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT end_ARG,
we have

| â€–Mâ¢(câˆ’f,n)â€–1â†’2subscriptnormğ‘€ğ‘ğ‘“ğ‘›â†’12\displaystyle\|M(c-f,n)\|_{1\to 2}âˆ¥ italic_M ( italic_c - italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT |   
---|---|---  
| =âˆ‘k=0nâˆ’1(ckâˆ’fk)2absentsuperscriptsubscriptğ‘˜0ğ‘›1superscriptsubscriptğ‘ğ‘˜subscriptğ‘“ğ‘˜2\displaystyle=\sqrt{\sum_{k=0}^{n-1}(c_{k}-f_{k})^{2}}= square-root start_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( italic_c start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT - italic_f start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG |   
| â‰¤expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|câ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’fâ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))|2â¢dÎ¸absentğœğ‘›112ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘1ğœƒğœğ‘“1ğœƒğœ2differential-dğœƒ\displaystyle\leq\exp(\tau(n-1))\sqrt{\frac{1}{2\pi}\int_{-\pi}^{\pi}|c(\exp(% \sqrt{-1}\theta-\tau))-f(\exp(\sqrt{-1}\theta-\tau))|^{2}\mathrm{d}\theta}â‰¤ roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | italic_c ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - italic_f ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ end_ARG |   
| =expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|râ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|2|râ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))â‹…1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|2â¢dÎ¸absentğœğ‘›112ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘Ÿ1ğœƒğœ11ğœƒğœ2superscriptâ‹…ğ‘Ÿ1ğœƒğœ11ğœƒğœ2differential-dğœƒ\displaystyle=\exp(\tau(n\\!-\\!1))\\!\\!\sqrt{\\!\frac{1}{2\pi}\\!\int_{-\pi}^{\pi}% \\!\frac{\left|r(\exp(\sqrt{-1}\theta-\tau))-\sqrt{1-\exp(\sqrt{-1}\theta-\tau)% }\right|^{2}}{\left|r(\exp(\sqrt{-1}\theta\\!-\\!\tau))\\!\cdot\\!\sqrt{1\\!-\\!\exp% (\sqrt{-1}\theta\\!-\\!\tau)}\right|^{2}}\\!\mathrm{d}\theta}= roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG | italic_r ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - square-root start_ARG 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) end_ARG | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG | italic_r ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) â‹… square-root start_ARG 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) end_ARG | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG roman_d italic_Î¸ end_ARG |   
| =expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|râ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|2|1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)+(râ¢(expâ¡(âˆ’1â¢Î¸âˆ’Ï„))âˆ’1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„))â‹…1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|2â¢dÎ¸absentğœğ‘›112ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘Ÿ1ğœƒğœ11ğœƒğœ2superscript11ğœƒğœâ‹…ğ‘Ÿ1ğœƒğœ11ğœƒğœ11ğœƒğœ2differential-dğœƒ\displaystyle=\exp(\tau(n\\!-\\!1))\\!\\!\sqrt{\\!\frac{1}{2\pi}\\!\int_{-\pi}^{\pi}% \\!\frac{\left|r(\exp(\sqrt{-1}\theta-\tau))-\sqrt{1-\exp(\sqrt{-1}\theta-\tau)% }\right|^{2}}{\left|1\\!-\\!\exp(\\!\sqrt{-1}\theta\\!-\\!\tau\\!)\\!+\\!\left(r(\exp(% \sqrt{-1}\theta\\!-\\!\tau))\\!-\\!\sqrt{1\\!-\\!\exp(\sqrt{-1}\theta\\!-\\!\tau)}% \right)\\!\cdot\\!\sqrt{1\\!-\\!\exp(\sqrt{-1}\theta\\!-\\!\tau)}\right|^{2}}\\!% \mathrm{d}\theta}= roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG | italic_r ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - square-root start_ARG 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) end_ARG | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG | 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) + ( italic_r ( roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) ) - square-root start_ARG 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) end_ARG ) â‹… square-root start_ARG 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) end_ARG | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG roman_d italic_Î¸ end_ARG |   
| â‰¤expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€Î³Ï„2(|1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|âˆ’Î³Ï„â‹…|1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|)2â¢dÎ¸absentğœğ‘›112ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptsubscriptğ›¾ğœ2superscript11ğœƒğœâ‹…subscriptğ›¾ğœ11ğœƒğœ2differential-dğœƒ\displaystyle\leq\exp(\tau(n\\!-\\!1))\\!\\!\sqrt{\\!\frac{1}{2\pi}\\!\int_{-\pi}^{% \pi}\\!\frac{\gamma_{\tau}^{2}}{\left(\left|1\\!-\\!\exp(\\!\sqrt{-1}\theta\\!-\\!% \tau\\!)\right|-\gamma_{\tau}\cdot\sqrt{|1-\exp(\sqrt{-1}\theta-\tau)|}\right)^% {2}}\mathrm{d}\theta}â‰¤ roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG ( | 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) | - italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‹… square-root start_ARG | 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) | end_ARG ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG roman_d italic_Î¸ end_ARG |   
| â‰¤expâ¡(Ï„â¢(nâˆ’1))â¢12â¢Ï€â¢âˆ«âˆ’Ï€Ï€Î³Ï„2|1âˆ’expâ¡(âˆ’1â¢Î¸âˆ’Ï„)|2âˆ’2â¢2â¢Î³Ï„â¢dÎ¸absentğœğ‘›112ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptsubscriptğ›¾ğœ2superscript11ğœƒğœ222subscriptğ›¾ğœdifferential-dğœƒ\displaystyle\leq\exp(\tau(n\\!-\\!1))\\!\\!\sqrt{\\!\frac{1}{2\pi}\\!\int_{-\pi}^{% \pi}\\!\frac{\gamma_{\tau}^{2}}{\left|1\\!-\\!\exp(\\!\sqrt{-1}\theta\\!-\\!\tau\\!)% \right|^{2}-2\sqrt{2}\gamma_{\tau}}\mathrm{d}\theta}â‰¤ roman_exp ( italic_Ï„ ( italic_n - 1 ) ) square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG | 1 - roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - italic_Ï„ ) | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 square-root start_ARG 2 end_ARG italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG roman_d italic_Î¸ end_ARG |   
| =expâ¡(Ï„â¢(nâˆ’1))â‹…Î³Ï„â‹…expâ¡(Ï„)4â¢Ï€â¢âˆ«âˆ’Ï€Ï€1coshâ¡(Ï„)âˆ’2â¢expâ¡(Ï„)â¢Î³Ï„+cosâ¡(Î¸)â¢dÎ¸absentâ‹…ğœğ‘›1subscriptğ›¾ğœğœ4ğœ‹superscriptsubscriptğœ‹ğœ‹1ğœ2ğœsubscriptğ›¾ğœğœƒdifferential-dğœƒ\displaystyle=\exp(\tau(n\\!-\\!1))\\!\cdot\\!\gamma_{\tau}\\!\cdot\\!\sqrt{\\!\frac{% \exp(\tau)}{4\pi}\\!\int_{-\pi}^{\pi}\\!\frac{1}{\cosh(\tau)-\sqrt{2}\exp(\tau)% \gamma_{\tau}+\cos(\theta)}\mathrm{d}\theta}= roman_exp ( italic_Ï„ ( italic_n - 1 ) ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‹… square-root start_ARG divide start_ARG roman_exp ( italic_Ï„ ) end_ARG start_ARG 4 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG roman_cosh ( italic_Ï„ ) - square-root start_ARG 2 end_ARG roman_exp ( italic_Ï„ ) italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT + roman_cos ( italic_Î¸ ) end_ARG roman_d italic_Î¸ end_ARG |   
| =expâ¡(Ï„â¢(nâˆ’1))â‹…Î³Ï„â‹…expâ¡(Ï„)2â¢1(coshâ¡(Ï„)âˆ’2â¢expâ¡(Ï„)â¢Î³Ï„)2âˆ’1absentâ‹…ğœğ‘›1subscriptğ›¾ğœğœ21superscriptğœ2ğœsubscriptğ›¾ğœ21\displaystyle=\exp(\tau(n\\!-\\!1))\\!\cdot\\!\gamma_{\tau}\\!\cdot\\!\sqrt{\\!\frac{% \exp(\tau)}{2}\frac{1}{\sqrt{(\cosh(\tau)-\sqrt{2}\exp(\tau)\gamma_{\tau})^{2}% -1}}}= roman_exp ( italic_Ï„ ( italic_n - 1 ) ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‹… square-root start_ARG divide start_ARG roman_exp ( italic_Ï„ ) end_ARG start_ARG 2 end_ARG divide start_ARG 1 end_ARG start_ARG square-root start_ARG ( roman_cosh ( italic_Ï„ ) - square-root start_ARG 2 end_ARG roman_exp ( italic_Ï„ ) italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 1 end_ARG end_ARG end_ARG |   
| =expâ¡(Ï„â¢n)â‹…Î³Ï„2â¢expâ¡(Ï„)â¢(coshâ¡(Ï„)âˆ’2â¢expâ¡(Ï„)â¢Î³Ï„)2âˆ’1absentâ‹…ğœğ‘›subscriptğ›¾ğœ2ğœsuperscriptğœ2ğœsubscriptğ›¾ğœ21\displaystyle=\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt{2\exp(\tau)\sqrt{(% \cosh(\tau)-\sqrt{2}\exp(\tau)\gamma_{\tau})^{2}-1}}}= divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG 2 roman_exp ( italic_Ï„ ) square-root start_ARG ( roman_cosh ( italic_Ï„ ) - square-root start_ARG 2 end_ARG roman_exp ( italic_Ï„ ) italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 1 end_ARG end_ARG end_ARG |   
| =expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)â¢(1âˆ’2â¢2â¢Î³Ï„)+1)2âˆ’4â¢expâ¡(2â¢Ï„)4absentâ‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ122subscriptğ›¾ğœ1242ğœ\displaystyle=\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt[4]{{(\exp(2\tau)(1-2% \sqrt{2}\gamma_{\tau})+1)^{2}-4\exp(2\tau)}}}= divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2 italic_Ï„ ) ( 1 - 2 square-root start_ARG 2 end_ARG italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT ) + 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 4 roman_exp ( 2 italic_Ï„ ) end_ARG end_ARG |   
| =expâ¡(Ï„â¢n)â‹…Î³Ï„1âˆ’2â¢(1+23/2â¢Î³Ï„)â¢expâ¡(2â¢Ï„)+(1âˆ’23/2â¢Î³Ï„)2â¢expâ¡(4â¢Ï„)4absentâ‹…ğœğ‘›subscriptğ›¾ğœ4121superscript232subscriptğ›¾ğœ2ğœsuperscript1superscript232subscriptğ›¾ğœ24ğœ\displaystyle=\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt[4]{1-2(1+2^{3/2}% \gamma_{\tau})\exp(2\tau)+(1-2^{3/2}\gamma_{\tau})^{2}\exp(4\tau)}}= divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG 1 - 2 ( 1 + 2 start_POSTSUPERSCRIPT 3 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT ) roman_exp ( 2 italic_Ï„ ) + ( 1 - 2 start_POSTSUPERSCRIPT 3 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_exp ( 4 italic_Ï„ ) end_ARG end_ARG |   
| =expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)âˆ’1)2âˆ’25/2â¢Î³Ï„â¢expâ¡(2â¢Ï„)âˆ’25/2â¢Î³Ï„â¢expâ¡(4â¢Ï„)+23â¢Î³Ï„2â¢expâ¡(4â¢Ï„)4absentâ‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ12superscript252subscriptğ›¾ğœ2ğœsuperscript252subscriptğ›¾ğœ4ğœsuperscript23superscriptsubscriptğ›¾ğœ24ğœ\displaystyle=\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt[4]{(\exp(2\tau)-1)^{% 2}-2^{5/2}\gamma_{\tau}\exp(2\tau)-2^{5/2}\gamma_{\tau}\exp(4\tau)+2^{3}\gamma% _{\tau}^{2}\exp(4\tau)}}= divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2 italic_Ï„ ) - 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 start_POSTSUPERSCRIPT 5 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 2 italic_Ï„ ) - 2 start_POSTSUPERSCRIPT 5 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 4 italic_Ï„ ) + 2 start_POSTSUPERSCRIPT 3 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_exp ( 4 italic_Ï„ ) end_ARG end_ARG |   
| â‰¤expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)âˆ’1)2âˆ’25/2â¢Î³Ï„â¢expâ¡(2â¢Ï„)â¢(1+expâ¡(2â¢Ï„))4absentâ‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ12superscript252subscriptğ›¾ğœ2ğœ12ğœ\displaystyle\leq\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt[4]{(\exp(2\tau)-1% )^{2}-2^{5/2}\gamma_{\tau}\exp(2\tau)(1+\exp(2\tau))}}â‰¤ divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2 italic_Ï„ ) - 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 start_POSTSUPERSCRIPT 5 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 2 italic_Ï„ ) ( 1 + roman_exp ( 2 italic_Ï„ ) ) end_ARG end_ARG |   
| â‰¤expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)âˆ’1)2âˆ’27/2â¢Î³Ï„â¢expâ¡(4â¢Ï„)4.absentâ‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ12superscript272subscriptğ›¾ğœ4ğœ\displaystyle\leq\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt[4]{(\exp(2\tau)-1% )^{2}-2^{7/2}\gamma_{\tau}\exp(4\tau)}}.â‰¤ divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2 italic_Ï„ ) - 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 4 italic_Ï„ ) end_ARG end_ARG . |   
  
Combining the bounds yields the result. âˆ

###  4.2 Rational Approximation of xğ‘¥\sqrt{x}square-root start_ARG italic_x
end_ARG

SectionsÂ 3 andÂ 4.1 reduce the problem to finding a low-degree rational function that uniformly approximates 1âˆ’x1ğ‘¥\sqrt{1-x}square-root start_ARG 1 - italic_x end_ARG for xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1. Fortunately, such functions are known to exist. In this subsection we construct the required rational functions. The proof is included for completeness and because it provides an explicit construction with explicit bounds.

For notational simplicity and consistency with the literature, we rescale so that we are approximating xğ‘¥\sqrt{x}square-root start_ARG italic_x end_ARG instead of 1âˆ’x1ğ‘¥\sqrt{1-x}square-root start_ARG 1 - italic_x end_ARG. To get an equivalent result, we must uniformly approximate xğ‘¥\sqrt{x}square-root start_ARG italic_x end_ARG for xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |xâˆ’1/2|â‰¤1/2ğ‘¥1212|x-1/2|\leq 1/2| italic_x - 1 / 2 | â‰¤ 1 / 2.

\AtNextCite\AtEachCitekey\@nocounterr

maxnames\textciteNewman64 gave an explicit rational function that approximates
xğ‘¥\sqrt{x}square-root start_ARG italic_x end_ARG for
xâˆˆ[0,1]ğ‘¥01x\in[0,1]italic_x âˆˆ [ 0 , 1 ]. Specifically, let

| pâ¢(x)=âˆk=0dâˆ’1(x+expâ¡(âˆ’k/d))â¢Â andÂ â¢râ¢(x)=xâ‹…(pâ¢(x)âˆ’pâ¢(âˆ’x))pâ¢(x)+pâ¢(âˆ’x).ğ‘ğ‘¥superscriptsubscriptproductğ‘˜0ğ‘‘1ğ‘¥ğ‘˜ğ‘‘Â andÂ ğ‘Ÿğ‘¥â‹…ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥p(x)=\prod_{k=0}^{d-1}(x+\exp(-k/\sqrt{d}))~{}~{}~{}\text{ and }~{}~{}~{}r(x)=% \frac{\sqrt{x}\cdot(p(\sqrt{x})-p(-\sqrt{x}))}{p(\sqrt{x})+p(-\sqrt{x})}.italic_p ( italic_x ) = âˆ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT ( italic_x + roman_exp ( - italic_k / square-root start_ARG italic_d end_ARG ) ) and italic_r ( italic_x ) = divide start_ARG square-root start_ARG italic_x end_ARG â‹… ( italic_p ( square-root start_ARG italic_x end_ARG ) - italic_p ( - square-root start_ARG italic_x end_ARG ) ) end_ARG start_ARG italic_p ( square-root start_ARG italic_x end_ARG ) + italic_p ( - square-root start_ARG italic_x end_ARG ) end_ARG . |  | (4.2)  
---|---|---|---  
  
Then râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) is a rational function of degree
âŒˆd/2âŒ‰ğ‘‘2\lceil d/2\rceilâŒˆ italic_d / 2 âŒ‰ â€“ specifically,
râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) is the ratio where the numerator is a
polynomial in xğ‘¥xitalic_x of degree âŒˆd/2âŒ‰ğ‘‘2\lceil d/2\rceilâŒˆ
italic_d / 2 âŒ‰ and the denominator is a polynomial in xğ‘¥xitalic_x of
degree âŒŠd/2âŒ‹ğ‘‘2\lfloor d/2\rfloorâŒŠ italic_d / 2 âŒ‹. Furthermore,

| supxâˆˆ[0,1]|râ¢(x)âˆ’x|â‰¤3â‹…expâ¡(âˆ’d).subscriptsupremumğ‘¥01ğ‘Ÿğ‘¥ğ‘¥â‹…3ğ‘‘\sup_{x\in[0,1]}|r(x)-\sqrt{x}|\leq 3\cdot\exp(-\sqrt{d}).roman_sup start_POSTSUBSCRIPT italic_x âˆˆ [ 0 , 1 ] end_POSTSUBSCRIPT | italic_r ( italic_x ) - square-root start_ARG italic_x end_ARG | â‰¤ 3 â‹… roman_exp ( - square-root start_ARG italic_d end_ARG ) . |  | (4.3)  
---|---|---|---  
  
The surprising aspect of this result is that the dependence on the degree is
exponential rather than polynomial, as is the case if we restrict to
polynomial approximations, rather than rational approximations. Newman also
showed that this result was optimal up to constant factors in the degree
dğ‘‘ditalic_d and the approximation error. Subsequent work [stahl1993best]
obtained optimal constants for this approximation.

In order to apply PropositionÂ 4.1, we need to extend Newmanâ€™s result into
the complex plane. We provide a proof adapted from that of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textciteGopalT19.

######  Theorem 4.3.

Let dâˆˆâ„•ğ‘‘â„•d\in\mathbb{N}italic_d âˆˆ blackboard_N with dâ‰¥2ğ‘‘2d\geq
2italic_d â‰¥ 2. Then there exists a rational function rğ‘Ÿritalic_r of degree
dğ‘‘ditalic_d with real coefficients and real negative simple poles such that

| |râ¢(x)âˆ’x|â‰¤(4+4Ï€)â‹…expâ¡(âˆ’Ï€â¢12â¢âŒŠdâˆ’12âŒ‹)â‰¤6â‹…expâ¡(âˆ’Ï€2â¢dâˆ’2)ğ‘Ÿğ‘¥ğ‘¥â‹…44ğœ‹ğœ‹12ğ‘‘12â‹…6ğœ‹2ğ‘‘2|r(x)-\sqrt{x}|\leq\big{(}4+\frac{4}{\pi}\big{)}\cdot\exp\left(-\pi\sqrt{\frac% {1}{2}\left\lfloor\frac{d-1}{2}\right\rfloor}\right)\leq 6\cdot\exp\left(-% \frac{\pi}{2}\sqrt{d-2}\right)| italic_r ( italic_x ) - square-root start_ARG italic_x end_ARG | â‰¤ ( 4 + divide start_ARG 4 end_ARG start_ARG italic_Ï€ end_ARG ) â‹… roman_exp ( - italic_Ï€ square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 end_ARG âŒŠ divide start_ARG italic_d - 1 end_ARG start_ARG 2 end_ARG âŒ‹ end_ARG ) â‰¤ 6 â‹… roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) |  | (4.4)  
---|---|---|---  
  
for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with â„œâ¡(x)â‰¥0ğ‘¥0\Re(x)\geq 0roman_â„œ ( italic_x ) â‰¥ 0 and |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1. Specifically,

| râ¢(x)=2â¢hÏ€â¢âˆ‘k=âˆ’dâˆ’d+xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k),Â whereÂ â¢d+=âŒŠdâˆ’12âŒ‹,dâˆ’=âŒˆdâˆ’12âŒ‰,Â andÂ â¢h=Ï€2â¢d+.formulae-sequenceğ‘Ÿğ‘¥2â„ğœ‹superscriptsubscriptğ‘˜subscriptğ‘‘subscriptğ‘‘â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜formulae-sequenceÂ whereÂ subscriptğ‘‘ğ‘‘12formulae-sequencesubscriptğ‘‘ğ‘‘12Â andÂ â„ğœ‹2subscriptğ‘‘r(x)=\frac{2h}{\pi}\sum_{k=-d_{-}}^{d_{+}}\frac{x\cdot\exp(hk)}{x+\exp(2hk)},~% {}~{}\text{ where }~{}~{}d_{+}=\left\lfloor\frac{d-1}{2}\right\rfloor,~{}~{}d_% {-}=\left\lceil\frac{d-1}{2}\right\rceil,~{}~{}\text{ and }~{}~{}h=\frac{\pi}{% \sqrt{2d_{+}}}.italic_r ( italic_x ) = divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_POSTSUPERSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG , where italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT = âŒŠ divide start_ARG italic_d - 1 end_ARG start_ARG 2 end_ARG âŒ‹ , italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT = âŒˆ divide start_ARG italic_d - 1 end_ARG start_ARG 2 end_ARG âŒ‰ , and italic_h = divide start_ARG italic_Ï€ end_ARG start_ARG square-root start_ARG 2 italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_ARG end_ARG . |  | (4.5)  
---|---|---|---  
  
###### Proof.

We invoke PropositionÂ 4.5. Let dâˆ’=âŒˆ(dâˆ’1)/2âŒ‰subscriptğ‘‘ğ‘‘12d_{-}=\lceil(d-1)/2\rceilitalic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT = âŒˆ ( italic_d - 1 ) / 2 âŒ‰ and d+=âŒŠ(dâˆ’1)/2âŒ‹subscriptğ‘‘ğ‘‘12d_{+}=\lfloor(d-1)/2\rflooritalic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT = âŒŠ ( italic_d - 1 ) / 2 âŒ‹ and let hâˆˆ(0,4.9)â„04.9h\in(0,4.9)italic_h âˆˆ ( 0 , 4.9 ) be determined later. Let râ¢(x)=rd+,dâˆ’,hâ¢(x)ğ‘Ÿğ‘¥subscriptğ‘Ÿsubscriptğ‘‘subscriptğ‘‘â„ğ‘¥r(x)=r_{d_{+},d_{-},h}(x)italic_r ( italic_x ) = italic_r start_POSTSUBSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT , italic_h end_POSTSUBSCRIPT ( italic_x ) be as in Equation 4.11. Clearly râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) is a rational function of degree d++dâˆ’+1=dsubscriptğ‘‘subscriptğ‘‘1ğ‘‘d_{+}+d_{-}+1=ditalic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT + italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT + 1 = italic_d with real coefficients and the poles are given by âˆ’expâ¡(2â¢hâ¢k)âˆˆ(âˆ’âˆ,0)2â„ğ‘˜0-\exp(2hk)\in(-\infty,0)\- roman_exp ( 2 italic_h italic_k ) âˆˆ ( - âˆ , 0 ) for kâˆˆ{âˆ’dâˆ’,âˆ’dâˆ’+1,â‹¯,d+}ğ‘˜subscriptğ‘‘subscriptğ‘‘1â‹¯subscriptğ‘‘k\in\\{-d_{-},-d_{-}+1,\cdots,d_{+}\\}italic_k âˆˆ { - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT , - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT + 1 , â‹¯ , italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT }. It remains to simplify the approximation guarantee and set hâ„hitalic_h. From Equation 4.11, for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with â„œâ¡(x)â‰¥0ğ‘¥0\Re(x)\geq 0roman_â„œ ( italic_x ) â‰¥ 0 and |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1, we have

| |râ¢(x)âˆ’x|ğ‘Ÿğ‘¥ğ‘¥\displaystyle|r(x)-\sqrt{x}|| italic_r ( italic_x ) - square-root start_ARG italic_x end_ARG | | â‰¤2â¢|x|â¢(1expâ¡((1âˆ’c)â¢Ï€2/h)âˆ’1+1expâ¡((1+c)â¢Ï€2/h)âˆ’1)absent2ğ‘¥11ğ‘superscriptğœ‹2â„111ğ‘superscriptğœ‹2â„1\displaystyle\leq 2\sqrt{|x|}\left(\frac{1}{\exp((1-c)\pi^{2}/h)-1}+\frac{1}{% \exp((1+c)\pi^{2}/h)-1}\right)â‰¤ 2 square-root start_ARG | italic_x | end_ARG ( divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 - italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG + divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 + italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG ) |   
---|---|---|---  
|  | +2â¢hÏ€â¢(expâ¡(h)âˆ’1)â¢(|x|â‹…expâ¡(âˆ’hâ¢d+)+expâ¡(âˆ’hâ¢dâˆ’))2â„ğœ‹â„1â‹…ğ‘¥â„subscriptğ‘‘â„subscriptğ‘‘\displaystyle~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}+\frac{2h}{\pi(\exp(h)-1)}\big{(}|x% |\cdot{\exp(-hd_{+})}+{\exp(-hd_{-})}\big{)}\+ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ ( roman_exp ( italic_h ) - 1 ) end_ARG ( | italic_x | â‹… roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) + roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT ) ) |   
|  | â‰¤2â¢(1expâ¡((1âˆ’|c|)â¢Ï€2/h)âˆ’1+1expâ¡((1+|c|)â¢Ï€2/h)âˆ’1)absent211ğ‘superscriptğœ‹2â„111ğ‘superscriptğœ‹2â„1\displaystyle\leq 2\left(\frac{1}{\exp((1-|c|)\pi^{2}/h)-1}+\frac{1}{\exp((1+|% c|)\pi^{2}/h)-1}\right)â‰¤ 2 ( divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 - | italic_c | ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG + divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 + | italic_c | ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG ) |  | (|x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1 & symmetry in cğ‘citalic_c)  
|  | +4â¢hâ¢expâ¡(âˆ’hâ¢d+)Ï€â¢(expâ¡(h)âˆ’1)4â„â„subscriptğ‘‘ğœ‹â„1\displaystyle~{}~{}~{}~{}~{}~{}~{}~{}~{}~{}+\frac{4h\exp(-hd_{+})}{\pi(\exp(h)% -1)}\+ divide start_ARG 4 italic_h roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ ( roman_exp ( italic_h ) - 1 ) end_ARG |  | (dâˆ’â‰¥d+subscriptğ‘‘subscriptğ‘‘d_{-}\geq d_{+}italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT â‰¥ italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT)  
|  | â‰¤2â¢(1expâ¡(Ï€2/2â¢h)âˆ’1+1expâ¡(Ï€2/h)âˆ’1)+4Ï€â‹…expâ¡(âˆ’hâ¢d+)â‹…hexpâ¡(h)âˆ’1absent21superscriptğœ‹22â„11superscriptğœ‹2â„1â‹…4ğœ‹â„subscriptğ‘‘â„â„1\displaystyle\leq 2\left(\frac{1}{\exp(\pi^{2}/2h)-1}+\frac{1}{\exp(\pi^{2}/h)% -1}\right)+\frac{4}{\pi}\cdot\exp(-hd_{+})\cdot\frac{h}{\exp(h)-1}â‰¤ 2 ( divide start_ARG 1 end_ARG start_ARG roman_exp ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / 2 italic_h ) - 1 end_ARG + divide start_ARG 1 end_ARG start_ARG roman_exp ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG ) + divide start_ARG 4 end_ARG start_ARG italic_Ï€ end_ARG â‹… roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) â‹… divide start_ARG italic_h end_ARG start_ARG roman_exp ( italic_h ) - 1 end_ARG |  | (|c|=|1Ï€â¢argâ¡(x)|â‰¤12ğ‘1ğœ‹ğ‘¥12|c|=|\frac{1}{\pi}\arg(x)|\leq\frac{1}{2}| italic_c | = | divide start_ARG 1 end_ARG start_ARG italic_Ï€ end_ARG roman_arg ( italic_x ) | â‰¤ divide start_ARG 1 end_ARG start_ARG 2 end_ARG)  
|  | â‰¤4â‹…expâ¡(âˆ’Ï€2/2â¢h)+4Ï€â‹…expâ¡(âˆ’hâ¢d+)absentâ‹…4superscriptğœ‹22â„â‹…4ğœ‹â„subscriptğ‘‘\displaystyle\leq 4\cdot\exp(-\pi^{2}/2h)+\frac{4}{\pi}\cdot\exp(-hd_{+})â‰¤ 4 â‹… roman_exp ( - italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / 2 italic_h ) + divide start_ARG 4 end_ARG start_ARG italic_Ï€ end_ARG â‹… roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) |  | (4.6)  
|  | =(4+4Ï€)â‹…expâ¡(âˆ’Ï€â¢d+2)absentâ‹…44ğœ‹ğœ‹subscriptğ‘‘2\displaystyle=\big{(}4+\frac{4}{\pi}\big{)}\cdot\exp\left(-\pi\sqrt{\frac{d_{+% }}{2}}\right)= ( 4 + divide start_ARG 4 end_ARG start_ARG italic_Ï€ end_ARG ) â‹… roman_exp ( - italic_Ï€ square-root start_ARG divide start_ARG italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_ARG start_ARG 2 end_ARG end_ARG ) |  | (4.7)  
|  | =(4+4Ï€)â‹…expâ¡(âˆ’Ï€â¢12â¢âŒŠdâˆ’12âŒ‹)absentâ‹…44ğœ‹ğœ‹12ğ‘‘12\displaystyle=\big{(}4+\frac{4}{\pi}\big{)}\cdot\exp\left(-\pi\sqrt{\frac{1}{2% }\left\lfloor\frac{d-1}{2}\right\rfloor}\right)= ( 4 + divide start_ARG 4 end_ARG start_ARG italic_Ï€ end_ARG ) â‹… roman_exp ( - italic_Ï€ square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 end_ARG âŒŠ divide start_ARG italic_d - 1 end_ARG start_ARG 2 end_ARG âŒ‹ end_ARG ) |   
|  | â‰¤6â‹…expâ¡(âˆ’Ï€2â¢dâˆ’1).absentâ‹…6ğœ‹2ğ‘‘1\displaystyle\leq 6\cdot\exp\left(-\frac{\pi}{2}\sqrt{d-1}\right).â‰¤ 6 â‹… roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 1 end_ARG ) . |   
  
The fourth inequality Eq.Â 4.6 follows from two simple facts: First,
hâ‰¥0â„0h\geq 0italic_h â‰¥ 0 implies
hexpâ¡(h)âˆ’1â‰¤1â„â„11\frac{h}{\exp(h)-1}\leq 1divide start_ARG italic_h
end_ARG start_ARG roman_exp ( italic_h ) - 1 end_ARG â‰¤ 1.Second,
1aâˆ’1+1a2âˆ’1â‰¤2a1ğ‘11superscriptğ‘212ğ‘\frac{1}{a-1}+\frac{1}{a^{2}-1}\leq\frac{2}{a}divide
start_ARG 1 end_ARG start_ARG italic_a - 1 end_ARG + divide start_ARG 1
end_ARG start_ARG italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 1
end_ARG â‰¤ divide start_ARG 2 end_ARG start_ARG italic_a end_ARG when
a=expâ¡(Ï€2/2â¢h)â‰¥1+3ğ‘superscriptğœ‹22â„13a=\exp(\pi^{2}/2h)\geq
1+\sqrt{3}italic_a = roman_exp ( italic_Ï€ start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT / 2 italic_h ) â‰¥ 1 + square-root start_ARG 3 end_ARG or,
equivalently,
hâ‰¤Ï€22â¢logâ¡(1+3)â‰ˆ4.91â„superscriptğœ‹22134.91h\leq\frac{\pi^{2}}{2\log(1+\sqrt{3})}\approx
4.91italic_h â‰¤ divide start_ARG italic_Ï€ start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT end_ARG start_ARG 2 roman_log ( 1 + square-root start_ARG
3 end_ARG ) end_ARG â‰ˆ 4.91. The penultimate equality Eq.Â 4.7 follows by
setting
h=Ï€2â¢d+â‰¤Ï€2<2.5â„ğœ‹2subscriptğ‘‘ğœ‹22.5h=\frac{\pi}{\sqrt{2d_{+}}}\leq\frac{\pi}{\sqrt{2}}<2.5italic_h
= divide start_ARG italic_Ï€ end_ARG start_ARG square-root start_ARG 2
italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_ARG end_ARG â‰¤ divide
start_ARG italic_Ï€ end_ARG start_ARG square-root start_ARG 2 end_ARG end_ARG
< 2.5. âˆ

######  Corollary 4.4 (Rescaling of TheoremÂ 4.3).

Let dâ‰¥2ğ‘‘2d\geq 2italic_d â‰¥ 2 be an integer. Then there exists a rational
function r~~ğ‘Ÿ\widetilde{r}over~ start_ARG italic_r end_ARG of degree
dğ‘‘ditalic_d with real coefficients such that all poles are simple and
>1absent1>1> 1 and we have

| |r~â¢(x)âˆ’1âˆ’x|â‰¤8â‹…expâ¡(âˆ’Ï€2â¢dâˆ’2)~ğ‘Ÿğ‘¥1ğ‘¥â‹…8ğœ‹2ğ‘‘2|\widetilde{r}(x)-\sqrt{1-x}|\leq 8\cdot\exp\left(-\frac{\pi}{2}\sqrt{d-2}\right)| over~ start_ARG italic_r end_ARG ( italic_x ) - square-root start_ARG 1 - italic_x end_ARG | â‰¤ 8 â‹… roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) |  | (4.8)  
---|---|---|---  
  
for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1. Specifically,

| r~â¢(x)=2â¢hâ¢2Ï€â¢âˆ‘k=âˆ’dâˆ’d+(1âˆ’x)â‹…expâ¡(hâ¢k)1âˆ’x+2â‹…expâ¡(2â¢hâ¢k)=2â¢hâ¢2Ï€â¢âˆ‘k=âˆ’dâˆ’d+expâ¡(hâ¢k)âˆ’2â‹…expâ¡(3â¢hâ¢k)1+2â‹…expâ¡(2â¢hâ¢k)âˆ’x~ğ‘Ÿğ‘¥2â„2ğœ‹superscriptsubscriptğ‘˜subscriptğ‘‘subscriptğ‘‘â‹…1ğ‘¥â„ğ‘˜1ğ‘¥â‹…22â„ğ‘˜2â„2ğœ‹superscriptsubscriptğ‘˜subscriptğ‘‘subscriptğ‘‘â„ğ‘˜â‹…23â„ğ‘˜1â‹…22â„ğ‘˜ğ‘¥\widetilde{r}(x)=\frac{2h\sqrt{2}}{\pi}\sum_{k=-d_{-}}^{d_{+}}\frac{(1-x)\cdot% \exp(hk)}{1-x+2\cdot\exp(2hk)}=\frac{2h\sqrt{2}}{\pi}\sum_{k=-d_{-}}^{d_{+}}% \exp(hk)-\frac{2\cdot\exp(3hk)}{1+2\cdot\exp(2hk)-x}over~ start_ARG italic_r end_ARG ( italic_x ) = divide start_ARG 2 italic_h square-root start_ARG 2 end_ARG end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_POSTSUPERSCRIPT divide start_ARG ( 1 - italic_x ) â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG 1 - italic_x + 2 â‹… roman_exp ( 2 italic_h italic_k ) end_ARG = divide start_ARG 2 italic_h square-root start_ARG 2 end_ARG end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_POSTSUPERSCRIPT roman_exp ( italic_h italic_k ) - divide start_ARG 2 â‹… roman_exp ( 3 italic_h italic_k ) end_ARG start_ARG 1 + 2 â‹… roman_exp ( 2 italic_h italic_k ) - italic_x end_ARG |  | (4.9)  
---|---|---|---  
  
where d+=âŒŠ(dâˆ’1)/2âŒ‹subscriptğ‘‘ğ‘‘12d_{+}=\lfloor(d-1)/2\rflooritalic_d
start_POSTSUBSCRIPT + end_POSTSUBSCRIPT = âŒŠ ( italic_d - 1 ) / 2 âŒ‹,
dâˆ’=âŒˆ(dâˆ’1)/2âŒ‰subscriptğ‘‘ğ‘‘12d_{-}=\lceil(d-1)/2\rceilitalic_d
start_POSTSUBSCRIPT - end_POSTSUBSCRIPT = âŒˆ ( italic_d - 1 ) / 2 âŒ‰, and
h=Ï€2â¢d+â„ğœ‹2subscriptğ‘‘h=\frac{\pi}{\sqrt{2d_{+}}}italic_h = divide
start_ARG italic_Ï€ end_ARG start_ARG square-root start_ARG 2 italic_d
start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_ARG end_ARG.

###### Proof.

Let rğ‘Ÿritalic_r be the rational function of degree â‰¤dabsentğ‘‘\leq dâ‰¤ italic_d promised by TheoremÂ 4.3. Define r~â¢(x)=2â‹…râ¢(1âˆ’x2)~ğ‘Ÿğ‘¥â‹…2ğ‘Ÿ1ğ‘¥2\widetilde{r}(x)=\sqrt{2}\cdot r(\tfrac{1-x}{2})over~ start_ARG italic_r end_ARG ( italic_x ) = square-root start_ARG 2 end_ARG â‹… italic_r ( divide start_ARG 1 - italic_x end_ARG start_ARG 2 end_ARG ). Suppose xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1. Then â„œâ¡(1âˆ’x2)=12âˆ’12â¢â„œâ¡(x)â‰¥01ğ‘¥21212ğ‘¥0\Re(\tfrac{1-x}{2})=\frac{1}{2}-\frac{1}{2}\Re(x)\geq 0roman_â„œ ( divide start_ARG 1 - italic_x end_ARG start_ARG 2 end_ARG ) = divide start_ARG 1 end_ARG start_ARG 2 end_ARG - divide start_ARG 1 end_ARG start_ARG 2 end_ARG roman_â„œ ( italic_x ) â‰¥ 0, |1âˆ’x2|â‰¤1+|x|2â‰¤11ğ‘¥21ğ‘¥21|\tfrac{1-x}{2}|\leq\tfrac{1+|x|}{2}\leq 1| divide start_ARG 1 - italic_x end_ARG start_ARG 2 end_ARG | â‰¤ divide start_ARG 1 + | italic_x | end_ARG start_ARG 2 end_ARG â‰¤ 1, and

| |r~â¢(x)âˆ’1âˆ’x|=2â‹…|râ¢(1âˆ’x2)âˆ’1âˆ’x2|â‰¤2â‹…(4+4Ï€)â‹…expâ¡(âˆ’Ï€â¢12â¢âŒˆdâˆ’12âŒ‰)â‰¤8â¢expâ¡(âˆ’Ï€2â¢dâˆ’1).~ğ‘Ÿğ‘¥1ğ‘¥â‹…2ğ‘Ÿ1ğ‘¥21ğ‘¥2â‹…244ğœ‹ğœ‹12ğ‘‘128ğœ‹2ğ‘‘1|\widetilde{r}(x)-\sqrt{1-x}|=\sqrt{2}\cdot\left|r(\tfrac{1-x}{2})-\sqrt{% \tfrac{1-x}{2}}\right|\leq\sqrt{2}\cdot\left(4+\frac{4}{\pi}\right)\cdot\exp% \left(-\pi\sqrt{\frac{1}{2}\left\lceil\frac{d-1}{2}\right\rceil}\right)\leq 8% \exp\left(-\frac{\pi}{2}\sqrt{d-1}\right).| over~ start_ARG italic_r end_ARG ( italic_x ) - square-root start_ARG 1 - italic_x end_ARG | = square-root start_ARG 2 end_ARG â‹… | italic_r ( divide start_ARG 1 - italic_x end_ARG start_ARG 2 end_ARG ) - square-root start_ARG divide start_ARG 1 - italic_x end_ARG start_ARG 2 end_ARG end_ARG | â‰¤ square-root start_ARG 2 end_ARG â‹… ( 4 + divide start_ARG 4 end_ARG start_ARG italic_Ï€ end_ARG ) â‹… roman_exp ( - italic_Ï€ square-root start_ARG divide start_ARG 1 end_ARG start_ARG 2 end_ARG âŒˆ divide start_ARG italic_d - 1 end_ARG start_ARG 2 end_ARG âŒ‰ end_ARG ) â‰¤ 8 roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 1 end_ARG ) . |   
---|---|---  
  
If x~~ğ‘¥\widetilde{x}over~ start_ARG italic_x end_ARG is a pole of
r~~ğ‘Ÿ\widetilde{r}over~ start_ARG italic_r end_ARG, then
1âˆ’x~21~ğ‘¥2\tfrac{1-\widetilde{x}}{2}divide start_ARG 1 - over~ start_ARG
italic_x end_ARG end_ARG start_ARG 2 end_ARG is a pole of rğ‘Ÿritalic_r; since
the poles of rğ‘Ÿritalic_r are negative we have
1âˆ’x~2<01~ğ‘¥20\tfrac{1-\widetilde{x}}{2}<0divide start_ARG 1 - over~
start_ARG italic_x end_ARG end_ARG start_ARG 2 end_ARG < 0 and, hence,
x~>1~ğ‘¥1\widetilde{x}>1over~ start_ARG italic_x end_ARG > 1. âˆ

The general form of the approximation promised by TheoremÂ 4.3 is given below.

######  Proposition 4.5.

Let d+,dâˆ’âˆˆâ„•subscriptğ‘‘subscriptğ‘‘â„•d_{+},d_{-}\in\mathbb{N}italic_d
start_POSTSUBSCRIPT + end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT -
end_POSTSUBSCRIPT âˆˆ blackboard_N and h>0â„0h>0italic_h > 0. For
xâˆˆâ„‚âˆ–[âˆ’expâ¡(2â¢d+â¢h),âˆ’expâ¡(âˆ’2â¢dâˆ’â¢h)]ğ‘¥â„‚2subscriptğ‘‘â„2subscriptğ‘‘â„x\in\mathbb{C}\setminus[-\exp(2d_{+}h),-\exp(-2d_{-}h)]italic_x
âˆˆ blackboard_C âˆ– [ - roman_exp ( 2 italic_d start_POSTSUBSCRIPT +
end_POSTSUBSCRIPT italic_h ) , - roman_exp ( - 2 italic_d start_POSTSUBSCRIPT
- end_POSTSUBSCRIPT italic_h ) ], define

| rd+,dâˆ’,hâ¢(x)â‰”2â¢hÏ€â¢âˆ‘k=âˆ’dâˆ’d+xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k).â‰”subscriptğ‘Ÿsubscriptğ‘‘subscriptğ‘‘â„ğ‘¥2â„ğœ‹superscriptsubscriptğ‘˜subscriptğ‘‘subscriptğ‘‘â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜r_{d_{+},d_{-},h}(x)\coloneqq\frac{2h}{\pi}\sum_{k=-d_{-}}^{d_{+}}\frac{x\cdot% \exp(hk)}{x+\exp(2hk)}.italic_r start_POSTSUBSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT , italic_h end_POSTSUBSCRIPT ( italic_x ) â‰” divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_POSTSUPERSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG . |  | (4.10)  
---|---|---|---  
  
Then, for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with
â„œâ¡(x)â‰¥0ğ‘¥0\Re(x)\geq 0roman_â„œ ( italic_x ) â‰¥ 0, we have

| |rd+,dâˆ’,hâ¢(x)âˆ’x|subscriptğ‘Ÿsubscriptğ‘‘subscriptğ‘‘â„ğ‘¥ğ‘¥\displaystyle|r_{d_{+},d_{-},h}(x)-\sqrt{x}|| italic_r start_POSTSUBSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT , italic_h end_POSTSUBSCRIPT ( italic_x ) - square-root start_ARG italic_x end_ARG | | â‰¤2â¢|x|â¢(1expâ¡((1âˆ’c)â¢Ï€2/h)âˆ’1+1expâ¡((1+c)â¢Ï€2/h)âˆ’1)absent2ğ‘¥11ğ‘superscriptğœ‹2â„111ğ‘superscriptğœ‹2â„1\displaystyle\leq 2\sqrt{|x|}\left(\frac{1}{\exp((1-c)\pi^{2}/h)-1}+\frac{1}{% \exp((1+c)\pi^{2}/h)-1}\right)â‰¤ 2 square-root start_ARG | italic_x | end_ARG ( divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 - italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG + divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 + italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG ) |   
---|---|---|---  
|  | +2â¢hÏ€â¢(expâ¡(h)âˆ’1)â¢(|x|â‹…expâ¡(âˆ’hâ¢d+)+expâ¡(âˆ’hâ¢dâˆ’)),2â„ğœ‹â„1â‹…ğ‘¥â„subscriptğ‘‘â„subscriptğ‘‘\displaystyle~{}~{}~{}~{}~{}+\frac{2h}{\pi(\exp(h)-1)}\big{(}|x|\cdot{\exp(-hd% _{+})}+{\exp(-hd_{-})}\big{)},\+ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ ( roman_exp ( italic_h ) - 1 ) end_ARG ( | italic_x | â‹… roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) + roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT ) ) , |  | (4.11)  
  
where
c=1Ï€â¢argâ¡(x)âˆˆ[âˆ’12,12]ğ‘1ğœ‹ğ‘¥1212c=\frac{1}{\pi}\arg(x)\in\left[-\frac{1}{2},\frac{1}{2}\right]italic_c
= divide start_ARG 1 end_ARG start_ARG italic_Ï€ end_ARG roman_arg ( italic_x
) âˆˆ [ - divide start_ARG 1 end_ARG start_ARG 2 end_ARG , divide start_ARG 1
end_ARG start_ARG 2 end_ARG ].

###### Proof.

Fix xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with
â„œâ¡(x)>0ğ‘¥0\Re(x)>0roman_â„œ ( italic_x ) > 0.202020For the proof we assume
â„œâ¡(x)>0ğ‘¥0\Re(x)>0roman_â„œ ( italic_x ) > 0. The case
â„œâ¡(x)=0ğ‘¥0\Re(x)=0roman_â„œ ( italic_x ) = 0 follows by continuity. Let
argâ¡(x)=tanâˆ’1â¡(â„‘â¡(x)â„œâ¡(x))=câ¢Ï€âˆˆ(âˆ’Ï€2,Ï€2)ğ‘¥superscript1ğ‘¥ğ‘¥ğ‘ğœ‹ğœ‹2ğœ‹2\arg(x)=\tan^{-1}\left(\frac{\Im(x)}{\Re(x)}\right)=c\pi\in\left(-\frac{\pi}{2%
},\frac{\pi}{2}\right)roman_arg ( italic_x ) = roman_tan start_POSTSUPERSCRIPT
- 1 end_POSTSUPERSCRIPT ( divide start_ARG roman_â„‘ ( italic_x ) end_ARG
start_ARG roman_â„œ ( italic_x ) end_ARG ) = italic_c italic_Ï€ âˆˆ ( - divide
start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG , divide start_ARG italic_Ï€
end_ARG start_ARG 2 end_ARG ).

We begin with the Cauchy distribution integral

| âˆ«0âˆ11+u2â¢du=âˆ«0âˆ(ddâ¢uâ¢tanâˆ’1â¡(u))â¢du=Ï€2.superscriptsubscript011superscriptğ‘¢2differential-dğ‘¢superscriptsubscript0ddğ‘¢superscript1ğ‘¢differential-dğ‘¢ğœ‹2\int_{0}^{\infty}\frac{1}{1+u^{2}}\mathrm{d}u=\int_{0}^{\infty}\left(\frac{% \mathrm{d}}{\mathrm{d}u}\tan^{-1}(u)\right)\mathrm{d}u=\frac{\pi}{2}.âˆ« start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG 1 + italic_u start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG roman_d italic_u = âˆ« start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT ( divide start_ARG roman_d end_ARG start_ARG roman_d italic_u end_ARG roman_tan start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ( italic_u ) ) roman_d italic_u = divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG . |   
---|---|---  
  
We perform the variable substitutions u=v/xğ‘¢ğ‘£ğ‘¥u=v/\sqrt{x}italic_u =
italic_v / square-root start_ARG italic_x end_ARG and v=expâ¡(s)ğ‘£ğ‘
v=\exp(s)italic_v = roman_exp ( italic_s ) and rearrange to obtain

| x=2Ï€â¢âˆ«0âˆxx+v2â¢dv=2Ï€â¢âˆ«âˆ’âˆâˆxâ‹…expâ¡(s)x+expâ¡(2â¢s)â¢ds.ğ‘¥2ğœ‹superscriptsubscript0ğ‘¥ğ‘¥superscriptğ‘£2differential-dğ‘£2ğœ‹superscriptsubscriptâ‹…ğ‘¥ğ‘ ğ‘¥2ğ‘ differential-dğ‘ \sqrt{x}=\frac{2}{\pi}\int_{0}^{\infty}\frac{x}{x+v^{2}}\mathrm{d}v=\frac{2}{% \pi}\int_{-\infty}^{\infty}\frac{x\cdot\exp(s)}{x+\exp(2s)}\mathrm{d}s.square-root start_ARG italic_x end_ARG = divide start_ARG 2 end_ARG start_ARG italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_x end_ARG start_ARG italic_x + italic_v start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG roman_d italic_v = divide start_ARG 2 end_ARG start_ARG italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_s ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_s ) end_ARG roman_d italic_s . |  | (4.12)  
---|---|---|---  
  
Now we make the approximation

| x=2Ï€â¢âˆ«âˆ’âˆâˆxâ‹…expâ¡(s)x+expâ¡(2â¢s)â¢dsâ‰ˆ2â¢hÏ€â¢âˆ‘kâˆˆâ„¤xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k)â‰ˆ2â¢hÏ€â¢âˆ‘k=âˆ’dâˆ’d+xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k)=rd+,dâˆ’,hâ¢(x).ğ‘¥2ğœ‹superscriptsubscriptâ‹…ğ‘¥ğ‘ ğ‘¥2ğ‘ differential-dğ‘ 2â„ğœ‹subscriptğ‘˜â„¤â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜2â„ğœ‹superscriptsubscriptğ‘˜subscriptğ‘‘subscriptğ‘‘â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜subscriptğ‘Ÿsubscriptğ‘‘subscriptğ‘‘â„ğ‘¥\sqrt{x}=\frac{2}{\pi}\int_{-\infty}^{\infty}\frac{x\cdot\exp(s)}{x+\exp(2s)}% \mathrm{d}s\approx\frac{2h}{\pi}\sum_{k\in\mathbb{Z}}\frac{x\cdot\exp(hk)}{x+% \exp(2hk)}\approx\frac{2h}{\pi}\sum_{k=-d_{-}}^{d_{+}}\frac{x\cdot\exp(hk)}{x+% \exp(2hk)}=r_{d_{+},d_{-},h}(x).square-root start_ARG italic_x end_ARG = divide start_ARG 2 end_ARG start_ARG italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_s ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_s ) end_ARG roman_d italic_s â‰ˆ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ blackboard_Z end_POSTSUBSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG â‰ˆ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_POSTSUPERSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG = italic_r start_POSTSUBSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT , italic_h end_POSTSUBSCRIPT ( italic_x ) . |  | (4.13)  
---|---|---|---  
  
Thus all that remains to complete the proof is to make the the two
approximations precise. Intuitively, the first approximation replaces the
continuous integral with a discrete-but-infinite Riemann sum. If the function
is smooth and hâ„hitalic_h is small, this approximation should be good. The
second approximation truncates the infinite sum, which is a good approximation
as long as the tails of the function decay rapidly and
hâ¢d+â„subscriptğ‘‘hd_{+}italic_h italic_d start_POSTSUBSCRIPT +
end_POSTSUBSCRIPT and hâ¢dâˆ’â„subscriptğ‘‘hd_{-}italic_h italic_d
start_POSTSUBSCRIPT - end_POSTSUBSCRIPT are large.

Define
fâ¢(z)â‰”2â¢hÏ€â¢xâ‹…expâ¡(hâ¢z)x+expâ¡(2â¢hâ¢z)â‰”ğ‘“ğ‘§2â„ğœ‹â‹…ğ‘¥â„ğ‘§ğ‘¥2â„ğ‘§f(z)\coloneqq\frac{2h}{\pi}\frac{x\cdot\exp(hz)}{x+\exp(2hz)}italic_f
( italic_z ) â‰” divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€
end_ARG divide start_ARG italic_x â‹… roman_exp ( italic_h italic_z ) end_ARG
start_ARG italic_x + roman_exp ( 2 italic_h italic_z ) end_ARG. Let

| f^â¢(t)^ğ‘“ğ‘¡\displaystyle\widehat{f}(t)over^ start_ARG italic_f end_ARG ( italic_t ) | â‰”âˆ«âˆ’âˆâˆfâ¢(z)â‹…expâ¡(âˆ’2â¢Ï€â¢zâ¢tâ¢âˆ’1)â¢dzâ‰”absentsuperscriptsubscriptâ‹…ğ‘“ğ‘§2ğœ‹ğ‘§ğ‘¡1differential-dğ‘§\displaystyle\coloneqq\int_{-\infty}^{\infty}f(z)\cdot\exp(-2\pi zt\sqrt{-1})% \mathrm{d}zâ‰” âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f ( italic_z ) â‹… roman_exp ( - 2 italic_Ï€ italic_z italic_t square-root start_ARG - 1 end_ARG ) roman_d italic_z |   
---|---|---|---  
|  | =âˆ«âˆ’âˆâˆ2â¢hÏ€â¢xâ‹…expâ¡(hâ¢zâˆ’2â¢Ï€â¢zâ¢tâ¢âˆ’1)x+expâ¡(2â¢hâ¢z)â¢dzabsentsuperscriptsubscript2â„ğœ‹â‹…ğ‘¥â„ğ‘§2ğœ‹ğ‘§ğ‘¡1ğ‘¥2â„ğ‘§differential-dğ‘§\displaystyle=\int_{-\infty}^{\infty}\frac{2h}{\pi}\frac{x\cdot\exp(hz-2\pi zt% \sqrt{-1})}{x+\exp(2hz)}\mathrm{d}z= âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG italic_x â‹… roman_exp ( italic_h italic_z - 2 italic_Ï€ italic_z italic_t square-root start_ARG - 1 end_ARG ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_z ) end_ARG roman_d italic_z |   
|  | =2â¢hÏ€â¢âˆ«âˆ’âˆâˆexpâ¡(âˆ’2â¢Ï€â¢zâ¢tâ¢âˆ’1)expâ¡(âˆ’hâ¢z)+expâ¡(hâ¢zâˆ’logâ¡x)â¢dzabsent2â„ğœ‹superscriptsubscript2ğœ‹ğ‘§ğ‘¡1â„ğ‘§â„ğ‘§ğ‘¥differential-dğ‘§\displaystyle=\frac{2h}{\pi}\int_{-\infty}^{\infty}\frac{\exp(-2\pi zt\sqrt{-1% })}{\exp(-hz)+\exp(hz-\log x)}\mathrm{d}z= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG roman_exp ( - 2 italic_Ï€ italic_z italic_t square-root start_ARG - 1 end_ARG ) end_ARG start_ARG roman_exp ( - italic_h italic_z ) + roman_exp ( italic_h italic_z - roman_log italic_x ) end_ARG roman_d italic_z |   
|  | =2â¢hÏ€â¢âˆ«âˆ’âˆâˆexpâ¡(âˆ’2â¢Ï€â¢(y+logâ¡x2â¢h)â¢tâ¢âˆ’1)expâ¡(âˆ’hâ¢yâˆ’12â¢logâ¡x)+expâ¡(hâ¢yâˆ’12â¢logâ¡x)â¢dyabsent2â„ğœ‹superscriptsubscript2ğœ‹ğ‘¦ğ‘¥2â„ğ‘¡1â„ğ‘¦12ğ‘¥â„ğ‘¦12ğ‘¥differential-dğ‘¦\displaystyle=\frac{2h}{\pi}\int_{-\infty}^{\infty}\frac{\exp(-2\pi(y+\frac{% \log x}{2h})t\sqrt{-1})}{\exp(-hy-\frac{1}{2}\log x)+\exp(hy-\frac{1}{2}\log x% )}\mathrm{d}y= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG roman_exp ( - 2 italic_Ï€ ( italic_y + divide start_ARG roman_log italic_x end_ARG start_ARG 2 italic_h end_ARG ) italic_t square-root start_ARG - 1 end_ARG ) end_ARG start_ARG roman_exp ( - italic_h italic_y - divide start_ARG 1 end_ARG start_ARG 2 end_ARG roman_log italic_x ) + roman_exp ( italic_h italic_y - divide start_ARG 1 end_ARG start_ARG 2 end_ARG roman_log italic_x ) end_ARG roman_d italic_y |  | (z=y+logâ¡x2â¢hğ‘§ğ‘¦ğ‘¥2â„z=y+\frac{\log x}{2h}italic_z = italic_y + divide start_ARG roman_log italic_x end_ARG start_ARG 2 italic_h end_ARG)  
|  | =xâ‹…2â¢hÏ€â‹…expâ¡(âˆ’Ï€â¢tâ¢logâ¡xhâ¢âˆ’1)â‹…âˆ«âˆ’âˆâˆexpâ¡(âˆ’2â¢Ï€â¢yâ¢tâ¢âˆ’1)expâ¡(âˆ’hâ¢y)+expâ¡(hâ¢y)â¢dyabsentâ‹…ğ‘¥2â„ğœ‹ğœ‹ğ‘¡ğ‘¥â„1superscriptsubscript2ğœ‹ğ‘¦ğ‘¡1â„ğ‘¦â„ğ‘¦differential-dğ‘¦\displaystyle=\sqrt{x}\cdot\frac{2h}{\pi}\cdot\exp\left(-\pi t\frac{\log x}{h}% \sqrt{-1}\right)\cdot\int_{-\infty}^{\infty}\frac{\exp(-2\pi yt\sqrt{-1})}{% \exp(-hy)+\exp(hy)}\mathrm{d}y= square-root start_ARG italic_x end_ARG â‹… divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG â‹… roman_exp ( - italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG square-root start_ARG - 1 end_ARG ) â‹… âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG roman_exp ( - 2 italic_Ï€ italic_y italic_t square-root start_ARG - 1 end_ARG ) end_ARG start_ARG roman_exp ( - italic_h italic_y ) + roman_exp ( italic_h italic_y ) end_ARG roman_d italic_y |   
|  | =xâ‹…2â¢hÏ€â‹…expâ¡(âˆ’Ï€â¢tâ¢logâ¡xhâ¢âˆ’1)â‹…12â¢âˆ«âˆ’âˆâˆexpâ¡(âˆ’2â¢Ï€â¢yâ¢tâ¢âˆ’1)coshâ¡(hâ¢y)â¢dyabsentâ‹…ğ‘¥2â„ğœ‹ğœ‹ğ‘¡ğ‘¥â„112superscriptsubscript2ğœ‹ğ‘¦ğ‘¡1â„ğ‘¦differential-dğ‘¦\displaystyle=\sqrt{x}\cdot\frac{2h}{\pi}\cdot\exp\left(-\pi t\frac{\log x}{h}% \sqrt{-1}\right)\cdot\frac{1}{2}\int_{-\infty}^{\infty}\frac{\exp(-2\pi yt% \sqrt{-1})}{\cosh(hy)}\mathrm{d}y= square-root start_ARG italic_x end_ARG â‹… divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG â‹… roman_exp ( - italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG square-root start_ARG - 1 end_ARG ) â‹… divide start_ARG 1 end_ARG start_ARG 2 end_ARG âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG roman_exp ( - 2 italic_Ï€ italic_y italic_t square-root start_ARG - 1 end_ARG ) end_ARG start_ARG roman_cosh ( italic_h italic_y ) end_ARG roman_d italic_y |   
|  | =xâ‹…2â¢hÏ€â‹…expâ¡(âˆ’Ï€â¢tâ¢logâ¡xhâ¢âˆ’1)â‹…Ï€2â¢hâ‹…coshâ¡(Ï€2â¢t/h)absentâ‹…ğ‘¥2â„ğœ‹ğœ‹ğ‘¡ğ‘¥â„1ğœ‹â‹…2â„superscriptğœ‹2ğ‘¡â„\displaystyle=\sqrt{x}\cdot\frac{2h}{\pi}\cdot\exp\left(-\pi t\frac{\log x}{h}% \sqrt{-1}\right)\cdot\frac{\pi}{2h\cdot\cosh(\pi^{2}t/h)}= square-root start_ARG italic_x end_ARG â‹… divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG â‹… roman_exp ( - italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG square-root start_ARG - 1 end_ARG ) â‹… divide start_ARG italic_Ï€ end_ARG start_ARG 2 italic_h â‹… roman_cosh ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG |  | (4.14)  
|  | =xâ‹…expâ¡(âˆ’Ï€â¢tâ¢logâ¡xhâ¢âˆ’1)â‹…1coshâ¡(Ï€2â¢t/h).absentâ‹…ğ‘¥ğœ‹ğ‘¡ğ‘¥â„11superscriptğœ‹2ğ‘¡â„\displaystyle=\sqrt{x}\cdot\exp\left(-\pi t\frac{\log x}{h}\sqrt{-1}\right)% \cdot\frac{1}{\cosh(\pi^{2}t/h)}.= square-root start_ARG italic_x end_ARG â‹… roman_exp ( - italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG square-root start_ARG - 1 end_ARG ) â‹… divide start_ARG 1 end_ARG start_ARG roman_cosh ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG . |   
  
The penultimate equality (4.14) is the Fourier transform of the hyperbolic
secant [cosh_fourier]. The Poisson summation formula states that

| âˆ‘kâˆˆâ„¤fâ¢(k)=âˆ‘tâˆˆâ„¤f^â¢(t).subscriptğ‘˜â„¤ğ‘“ğ‘˜subscriptğ‘¡â„¤^ğ‘“ğ‘¡\sum_{k\in\mathbb{Z}}f(k)=\sum_{t\in\mathbb{Z}}\widehat{f}(t).âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ blackboard_Z end_POSTSUBSCRIPT italic_f ( italic_k ) = âˆ‘ start_POSTSUBSCRIPT italic_t âˆˆ blackboard_Z end_POSTSUBSCRIPT over^ start_ARG italic_f end_ARG ( italic_t ) . |  | (4.15)  
---|---|---|---  
  
Per Equation 4.12, we have

| f^â¢(0)=âˆ«âˆ’âˆâˆfâ¢(z)â¢dz=âˆ«âˆ’âˆâˆ2â¢hÏ€â¢xâ‹…expâ¡(hâ¢z)x+expâ¡(2â¢hâ¢z)â¢dz=âˆ«âˆ’âˆâˆ2Ï€â¢xâ‹…expâ¡(s)x+expâ¡(2â¢s)â¢ds=x.^ğ‘“0superscriptsubscriptğ‘“ğ‘§differential-dğ‘§superscriptsubscript2â„ğœ‹â‹…ğ‘¥â„ğ‘§ğ‘¥2â„ğ‘§differential-dğ‘§superscriptsubscript2ğœ‹â‹…ğ‘¥ğ‘ ğ‘¥2ğ‘ differential-dğ‘ ğ‘¥\widehat{f}(0)=\int_{-\infty}^{\infty}f(z)\mathrm{d}z=\int_{-\infty}^{\infty}% \frac{2h}{\pi}\frac{x\cdot\exp(hz)}{x+\exp(2hz)}\mathrm{d}z=\int_{-\infty}^{% \infty}\frac{2}{\pi}\frac{x\cdot\exp(s)}{x+\exp(2s)}\mathrm{d}s=\sqrt{x}.over^ start_ARG italic_f end_ARG ( 0 ) = âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f ( italic_z ) roman_d italic_z = âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG italic_x â‹… roman_exp ( italic_h italic_z ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_z ) end_ARG roman_d italic_z = âˆ« start_POSTSUBSCRIPT - âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG 2 end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG italic_x â‹… roman_exp ( italic_s ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_s ) end_ARG roman_d italic_s = square-root start_ARG italic_x end_ARG . |   
---|---|---  
  
Thus the Poisson summation formula allows us to analyze the first
approximation in Equation 4.13. Namely,

| |xâˆ’2â¢hÏ€â¢âˆ‘kâˆˆâ„¤xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k)|ğ‘¥2â„ğœ‹subscriptğ‘˜â„¤â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜\displaystyle\left|\sqrt{x}-\frac{2h}{\pi}\sum_{k\in\mathbb{Z}}\frac{x\cdot% \exp(hk)}{x+\exp(2hk)}\right|| square-root start_ARG italic_x end_ARG - divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ blackboard_Z end_POSTSUBSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG | |   
---|---|---  
| =|f^â¢(0)âˆ’âˆ‘kâˆˆâ„¤fâ¢(k)|absent^ğ‘“0subscriptğ‘˜â„¤ğ‘“ğ‘˜\displaystyle=\left|\widehat{f}(0)-\sum_{k\in\mathbb{Z}}f(k)\right|= | over^ start_ARG italic_f end_ARG ( 0 ) - âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ blackboard_Z end_POSTSUBSCRIPT italic_f ( italic_k ) | |   
| =|f^â¢(0)âˆ’âˆ‘tâˆˆâ„¤f^â¢(t)|absent^ğ‘“0subscriptğ‘¡â„¤^ğ‘“ğ‘¡\displaystyle=\left|\widehat{f}(0)-\sum_{t\in\mathbb{Z}}\widehat{f}(t)\right|= | over^ start_ARG italic_f end_ARG ( 0 ) - âˆ‘ start_POSTSUBSCRIPT italic_t âˆˆ blackboard_Z end_POSTSUBSCRIPT over^ start_ARG italic_f end_ARG ( italic_t ) | |   
| â‰¤âˆ‘t=1âˆ|f^â¢(t)|+|f^â¢(âˆ’t)|absentsuperscriptsubscriptğ‘¡1^ğ‘“ğ‘¡^ğ‘“ğ‘¡\displaystyle\leq\sum_{t=1}^{\infty}|\widehat{f}(t)|+|\widehat{f}(-t)|â‰¤ âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | over^ start_ARG italic_f end_ARG ( italic_t ) | + | over^ start_ARG italic_f end_ARG ( - italic_t ) | |   
| =âˆ‘t=1âˆ|x|â‹…(|expâ¡(âˆ’Ï€â¢tâ¢logâ¡xhâ¢âˆ’1)|+|expâ¡(Ï€â¢tâ¢logâ¡xhâ¢âˆ’1)|)â‹…1coshâ¡(Ï€2â¢t/h)absentsuperscriptsubscriptğ‘¡1â‹…ğ‘¥ğœ‹ğ‘¡ğ‘¥â„1ğœ‹ğ‘¡ğ‘¥â„11superscriptğœ‹2ğ‘¡â„\displaystyle=\sum_{t=1}^{\infty}|\sqrt{x}|\cdot\left(\left|\exp\left(-\pi t% \frac{\log x}{h}\sqrt{-1}\right)\right|+\left|\exp\left(\pi t\frac{\log x}{h}% \sqrt{-1}\right)\right|\right)\cdot\frac{1}{\cosh(\pi^{2}t/h)}= âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | square-root start_ARG italic_x end_ARG | â‹… ( | roman_exp ( - italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG square-root start_ARG - 1 end_ARG ) | + | roman_exp ( italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG square-root start_ARG - 1 end_ARG ) | ) â‹… divide start_ARG 1 end_ARG start_ARG roman_cosh ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG |   
| =âˆ‘t=1âˆ|x|â‹…(expâ¡(â„‘â¡(Ï€â¢tâ¢logâ¡xh))+expâ¡(â„‘â¡(âˆ’Ï€â¢tâ¢logâ¡xh)))â‹…1coshâ¡(Ï€2â¢t/h)absentsuperscriptsubscriptğ‘¡1â‹…ğ‘¥ğœ‹ğ‘¡ğ‘¥â„ğœ‹ğ‘¡ğ‘¥â„1superscriptğœ‹2ğ‘¡â„\displaystyle=\sum_{t=1}^{\infty}|\sqrt{x}|\cdot\left(\exp\left(\Im\left(\pi t% \frac{\log x}{h}\right)\right)+\exp\left(\Im\left(-\pi t\frac{\log x}{h}\right% )\right)\right)\cdot\frac{1}{\cosh(\pi^{2}t/h)}= âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | square-root start_ARG italic_x end_ARG | â‹… ( roman_exp ( roman_â„‘ ( italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG ) ) + roman_exp ( roman_â„‘ ( - italic_Ï€ italic_t divide start_ARG roman_log italic_x end_ARG start_ARG italic_h end_ARG ) ) ) â‹… divide start_ARG 1 end_ARG start_ARG roman_cosh ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG |  | (|expâ¡(vâ¢âˆ’1)|=expâ¡(â„œâ¡(vâ¢âˆ’1))=expâ¡(â„‘â¡(âˆ’v))ğ‘£1ğ‘£1ğ‘£|\exp(v\sqrt{-1})|=\exp(\Re(v\sqrt{-1}))=\exp(\Im(-v))| roman_exp ( italic_v square-root start_ARG - 1 end_ARG ) | = roman_exp ( roman_â„œ ( italic_v square-root start_ARG - 1 end_ARG ) ) = roman_exp ( roman_â„‘ ( - italic_v ) ))  
| =|x|â¢âˆ‘t=1âˆ2â¢coshâ¡(Ï€â¢thâ¢â„‘â¡(logâ¡x))â‹…1coshâ¡(Ï€2â¢t/h)absentğ‘¥superscriptsubscriptğ‘¡1â‹…2ğœ‹ğ‘¡â„ğ‘¥1superscriptğœ‹2ğ‘¡â„\displaystyle=\sqrt{|x|}\sum_{t=1}^{\infty}2\cosh\left(\pi\frac{t}{h}\Im(\log x% )\right)\cdot\frac{1}{\cosh(\pi^{2}t/h)}= square-root start_ARG | italic_x | end_ARG âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT 2 roman_cosh ( italic_Ï€ divide start_ARG italic_t end_ARG start_ARG italic_h end_ARG roman_â„‘ ( roman_log italic_x ) ) â‹… divide start_ARG 1 end_ARG start_ARG roman_cosh ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG |   
| =|x|â¢âˆ‘t=1âˆ2â¢coshâ¡(Ï€â¢thâ‹…câ¢Ï€)â‹…1coshâ¡(Ï€2â¢t/h)absentğ‘¥superscriptsubscriptğ‘¡1â‹…2â‹…ğœ‹ğ‘¡â„ğ‘ğœ‹1superscriptğœ‹2ğ‘¡â„\displaystyle=\sqrt{|x|}\sum_{t=1}^{\infty}2\cosh\left(\pi\frac{t}{h}\cdot c% \pi\right)\cdot\frac{1}{\cosh(\pi^{2}t/h)}= square-root start_ARG | italic_x | end_ARG âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT 2 roman_cosh ( italic_Ï€ divide start_ARG italic_t end_ARG start_ARG italic_h end_ARG â‹… italic_c italic_Ï€ ) â‹… divide start_ARG 1 end_ARG start_ARG roman_cosh ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG |  | (â„‘â¡(logâ¡x)=argâ¡(x)=câ¢Ï€ğ‘¥ğ‘¥ğ‘ğœ‹\Im(\log x)=\arg(x)=c\piroman_â„‘ ( roman_log italic_x ) = roman_arg ( italic_x ) = italic_c italic_Ï€)  
| =2â¢|x|â¢âˆ‘t=1âˆexpâ¡(câ¢Ï€2â¢t/h)+expâ¡(âˆ’câ¢Ï€2â¢t/h)expâ¡(Ï€2â¢t/h)+expâ¡(âˆ’Ï€2â¢t/h)absent2ğ‘¥superscriptsubscriptğ‘¡1ğ‘superscriptğœ‹2ğ‘¡â„ğ‘superscriptğœ‹2ğ‘¡â„superscriptğœ‹2ğ‘¡â„superscriptğœ‹2ğ‘¡â„\displaystyle=2\sqrt{|x|}\sum_{t=1}^{\infty}\frac{\exp(c\pi^{2}t/h)+\exp(-c\pi% ^{2}t/h)}{\exp(\pi^{2}t/h)+\exp(-\pi^{2}t/h)}= 2 square-root start_ARG | italic_x | end_ARG âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG roman_exp ( italic_c italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) + roman_exp ( - italic_c italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG start_ARG roman_exp ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) + roman_exp ( - italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG |   
| â‰¤2â¢|x|â¢âˆ‘t=1âˆexpâ¡(câ¢Ï€2â¢t/h)+expâ¡(âˆ’câ¢Ï€2â¢t/h)expâ¡(Ï€2â¢t/h)+0absent2ğ‘¥superscriptsubscriptğ‘¡1ğ‘superscriptğœ‹2ğ‘¡â„ğ‘superscriptğœ‹2ğ‘¡â„superscriptğœ‹2ğ‘¡â„0\displaystyle\leq 2\sqrt{|x|}\sum_{t=1}^{\infty}\frac{\exp(c\pi^{2}t/h)+\exp(-% c\pi^{2}t/h)}{\exp(\pi^{2}t/h)+0}â‰¤ 2 square-root start_ARG | italic_x | end_ARG âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG roman_exp ( italic_c italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) + roman_exp ( - italic_c italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) end_ARG start_ARG roman_exp ( italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) + 0 end_ARG |   
| =2â¢|x|â¢âˆ‘t=1âˆexpâ¡(âˆ’(1âˆ’c)â¢Ï€2â¢t/h)+expâ¡(âˆ’(1+c)â¢Ï€2â¢t/h)absent2ğ‘¥superscriptsubscriptğ‘¡11ğ‘superscriptğœ‹2ğ‘¡â„1ğ‘superscriptğœ‹2ğ‘¡â„\displaystyle=2\sqrt{|x|}\sum_{t=1}^{\infty}\exp(-(1-c)\pi^{2}t/h)+\exp(-(1+c)% \pi^{2}t/h)= 2 square-root start_ARG | italic_x | end_ARG âˆ‘ start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT roman_exp ( - ( 1 - italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) + roman_exp ( - ( 1 + italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_t / italic_h ) |   
| =2â¢|x|â¢(1expâ¡((1âˆ’c)â¢Ï€2/h)âˆ’1+1expâ¡((1+c)â¢Ï€2/h)âˆ’1).absent2ğ‘¥11ğ‘superscriptğœ‹2â„111ğ‘superscriptğœ‹2â„1\displaystyle=2\sqrt{|x|}\left(\frac{1}{\exp((1-c)\pi^{2}/h)-1}+\frac{1}{\exp(% (1+c)\pi^{2}/h)-1}\right).= 2 square-root start_ARG | italic_x | end_ARG ( divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 - italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG + divide start_ARG 1 end_ARG start_ARG roman_exp ( ( 1 + italic_c ) italic_Ï€ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / italic_h ) - 1 end_ARG ) . |  | (4.16)  
  
The final equality (4.16) follows from the usual geometric series formula: If
a>0ğ‘0a>0italic_a > 0, then
âˆ‘t=1âˆexpâ¡(âˆ’aâ¢t)=expâ¡(âˆ’a)1âˆ’expâ¡(âˆ’a)=1expâ¡(a)âˆ’1superscriptsubscriptğ‘¡1ğ‘ğ‘¡ğ‘1ğ‘1ğ‘1\sum_{t=1}^{\infty}\exp(-at)=\frac{\exp(-a)}{1-\exp(-a)}=\frac{1}{\exp(a)-1}âˆ‘
start_POSTSUBSCRIPT italic_t = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ
end_POSTSUPERSCRIPT roman_exp ( - italic_a italic_t ) = divide start_ARG
roman_exp ( - italic_a ) end_ARG start_ARG 1 - roman_exp ( - italic_a )
end_ARG = divide start_ARG 1 end_ARG start_ARG roman_exp ( italic_a ) - 1
end_ARG.

Next we analyze the second approximation in Equation 4.13, which requires
bounding the tails of fğ‘“fitalic_f. On one side, for
kâˆˆâ„•ğ‘˜â„•k\in\mathbb{N}italic_k âˆˆ blackboard_N, we have

| |fâ¢(k)|ğ‘“ğ‘˜\displaystyle|f(k)|| italic_f ( italic_k ) | | =|2â¢hÏ€â¢xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k)|absent2â„ğœ‹â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜\displaystyle=\left|\frac{2h}{\pi}\frac{x\cdot\exp(hk)}{x+\exp(2hk)}\right|= | divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG | |   
---|---|---|---  
|  | =2â¢hÏ€â¢|x||xâ‹…expâ¡(âˆ’hâ¢k)+expâ¡(hâ¢k)|absent2â„ğœ‹ğ‘¥â‹…ğ‘¥â„ğ‘˜â„ğ‘˜\displaystyle=\frac{2h}{\pi}\frac{|x|}{|x\cdot\exp(-hk)+\exp(hk)|}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG | italic_x | end_ARG start_ARG | italic_x â‹… roman_exp ( - italic_h italic_k ) + roman_exp ( italic_h italic_k ) | end_ARG |   
|  | =2â¢hÏ€â¢|x|â„œ(xâ‹…exp(âˆ’hk)+exp(hk))2+â„‘(xâ‹…exp(âˆ’hk)+exp(hk))2\displaystyle=\frac{2h}{\pi}\frac{|x|}{\sqrt{\Re(x\cdot\exp(-hk)+\exp(hk))^{2}% +\Im(x\cdot\exp(-hk)+\exp(hk))^{2}}}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG | italic_x | end_ARG start_ARG square-root start_ARG roman_â„œ ( italic_x â‹… roman_exp ( - italic_h italic_k ) + roman_exp ( italic_h italic_k ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + roman_â„‘ ( italic_x â‹… roman_exp ( - italic_h italic_k ) + roman_exp ( italic_h italic_k ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG end_ARG |   
|  | â‰¤2â¢hÏ€â¢|x||â„œ(xâ‹…exp(âˆ’hk)+exp(hk)|\displaystyle\leq\frac{2h}{\pi}\frac{|x|}{|\Re(x\cdot\exp(-hk)+\exp(hk)|}â‰¤ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG | italic_x | end_ARG start_ARG | roman_â„œ ( italic_x â‹… roman_exp ( - italic_h italic_k ) + roman_exp ( italic_h italic_k ) | end_ARG |   
|  | =2â¢hÏ€â¢|x||â„œâ¡(x)â‹…expâ¡(âˆ’hâ¢k)+expâ¡(hâ¢k)|absent2â„ğœ‹ğ‘¥â‹…ğ‘¥â„ğ‘˜â„ğ‘˜\displaystyle=\frac{2h}{\pi}\frac{|x|}{|\Re(x)\cdot\exp(-hk)+\exp(hk)|}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG | italic_x | end_ARG start_ARG | roman_â„œ ( italic_x ) â‹… roman_exp ( - italic_h italic_k ) + roman_exp ( italic_h italic_k ) | end_ARG |  | (hâ¢kâˆˆâ„â„ğ‘˜â„hk\in\mathbb{R}italic_h italic_k âˆˆ blackboard_R)  
|  | =2â¢hÏ€â¢|x|â„œâ¡(x)â‹…expâ¡(âˆ’hâ¢k)+expâ¡(hâ¢k)absent2â„ğœ‹ğ‘¥â‹…ğ‘¥â„ğ‘˜â„ğ‘˜\displaystyle=\frac{2h}{\pi}\frac{|x|}{\Re(x)\cdot\exp(-hk)+\exp(hk)}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG | italic_x | end_ARG start_ARG roman_â„œ ( italic_x ) â‹… roman_exp ( - italic_h italic_k ) + roman_exp ( italic_h italic_k ) end_ARG |  | (â„œâ¡(x)>0ğ‘¥0\Re(x)>0roman_â„œ ( italic_x ) > 0)  
|  | â‰¤2â¢hÏ€â¢|x|expâ¡(hâ¢k).absent2â„ğœ‹ğ‘¥â„ğ‘˜\displaystyle\leq\frac{2h}{\pi}\frac{|x|}{\exp(hk)}.â‰¤ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG | italic_x | end_ARG start_ARG roman_exp ( italic_h italic_k ) end_ARG . |  | (4.17)  
  
On the other side, for kâˆˆâ„•ğ‘˜â„•k\in\mathbb{N}italic_k âˆˆ blackboard_N,
we have

| |fâ¢(âˆ’k)|ğ‘“ğ‘˜\displaystyle|f(-k)|| italic_f ( - italic_k ) | | =|2â¢hÏ€â¢xâ‹…expâ¡(âˆ’hâ¢k)x+expâ¡(âˆ’2â¢hâ¢k)|absent2â„ğœ‹â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜\displaystyle=\left|\frac{2h}{\pi}\frac{x\cdot\exp(-hk)}{x+\exp(-2hk)}\right|= | divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG italic_x â‹… roman_exp ( - italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( - 2 italic_h italic_k ) end_ARG | |   
---|---|---|---  
|  | =2â¢hÏ€â¢expâ¡(âˆ’hâ¢k)|1+expâ¡(âˆ’2â¢hâ¢k)/x|absent2â„ğœ‹â„ğ‘˜12â„ğ‘˜ğ‘¥\displaystyle=\frac{2h}{\pi}\frac{\exp(-hk)}{|1+\exp(-2hk)/x|}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG roman_exp ( - italic_h italic_k ) end_ARG start_ARG | 1 + roman_exp ( - 2 italic_h italic_k ) / italic_x | end_ARG |   
|  | â‰¤2â¢hÏ€â¢expâ¡(âˆ’hâ¢k)|â„œâ¡(1+expâ¡(âˆ’2â¢hâ¢k)/x)|absent2â„ğœ‹â„ğ‘˜12â„ğ‘˜ğ‘¥\displaystyle\leq\frac{2h}{\pi}\frac{\exp(-hk)}{|\Re(1+\exp(-2hk)/x)|}â‰¤ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG roman_exp ( - italic_h italic_k ) end_ARG start_ARG | roman_â„œ ( 1 + roman_exp ( - 2 italic_h italic_k ) / italic_x ) | end_ARG |   
|  | =2â¢hÏ€â¢expâ¡(âˆ’hâ¢k)|1+expâ¡(âˆ’2â¢hâ¢k)/â„œâ¡(x)|absent2â„ğœ‹â„ğ‘˜12â„ğ‘˜ğ‘¥\displaystyle=\frac{2h}{\pi}\frac{\exp(-hk)}{|1+\exp(-2hk)/\Re(x)|}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG roman_exp ( - italic_h italic_k ) end_ARG start_ARG | 1 + roman_exp ( - 2 italic_h italic_k ) / roman_â„œ ( italic_x ) | end_ARG |  | (â„œâ¡(1/x)=1/â„œâ¡(x)1ğ‘¥1ğ‘¥\Re(1/x)=1/\Re(x)roman_â„œ ( 1 / italic_x ) = 1 / roman_â„œ ( italic_x ))  
|  | =2â¢hÏ€â¢expâ¡(âˆ’hâ¢k)1+expâ¡(âˆ’2â¢hâ¢k)/â„œâ¡(x)absent2â„ğœ‹â„ğ‘˜12â„ğ‘˜ğ‘¥\displaystyle=\frac{2h}{\pi}\frac{\exp(-hk)}{1+\exp(-2hk)/\Re(x)}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG roman_exp ( - italic_h italic_k ) end_ARG start_ARG 1 + roman_exp ( - 2 italic_h italic_k ) / roman_â„œ ( italic_x ) end_ARG |  | (â„œâ¡(x)>0ğ‘¥0\Re(x)>0roman_â„œ ( italic_x ) > 0)  
|  | â‰¤2â¢hÏ€â¢expâ¡(âˆ’hâ¢k).absent2â„ğœ‹â„ğ‘˜\displaystyle\leq\frac{2h}{\pi}\exp(-hk).â‰¤ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG roman_exp ( - italic_h italic_k ) . |  | (4.18)  
  
Combining Equations 4.17 and 4.18, we have

| |2â¢hÏ€â¢âˆ‘kâˆˆâ„¤xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k)âˆ’rd+,dâˆ’,hâ¢(x)|2â„ğœ‹subscriptğ‘˜â„¤â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜subscriptğ‘Ÿsubscriptğ‘‘subscriptğ‘‘â„ğ‘¥\displaystyle\left|\frac{2h}{\pi}\sum_{k\in\mathbb{Z}}\frac{x\cdot\exp(hk)}{x+% \exp(2hk)}-r_{d_{+},d_{-},h}(x)\right|| divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ blackboard_Z end_POSTSUBSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG - italic_r start_POSTSUBSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT , italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT , italic_h end_POSTSUBSCRIPT ( italic_x ) | | =2â¢hÏ€â¢|âˆ‘kâˆˆâ„¤xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k)âˆ’âˆ‘k=âˆ’dâˆ’d+xâ‹…expâ¡(hâ¢k)x+expâ¡(2â¢hâ¢k)|absent2â„ğœ‹subscriptğ‘˜â„¤â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜superscriptsubscriptğ‘˜subscriptğ‘‘subscriptğ‘‘â‹…ğ‘¥â„ğ‘˜ğ‘¥2â„ğ‘˜\displaystyle=\frac{2h}{\pi}\left|\sum_{k\in\mathbb{Z}}\frac{x\cdot\exp(hk)}{x% +\exp(2hk)}-\sum_{k=-d_{-}}^{d_{+}}\frac{x\cdot\exp(hk)}{x+\exp(2hk)}\right|= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG | âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ blackboard_Z end_POSTSUBSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG - âˆ‘ start_POSTSUBSCRIPT italic_k = - italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_POSTSUPERSCRIPT divide start_ARG italic_x â‹… roman_exp ( italic_h italic_k ) end_ARG start_ARG italic_x + roman_exp ( 2 italic_h italic_k ) end_ARG | |   
---|---|---|---  
|  | =|âˆ‘k=d++1âˆfâ¢(k)+âˆ‘k=dâˆ’+1âˆfâ¢(âˆ’k)|absentsuperscriptsubscriptğ‘˜subscriptğ‘‘1ğ‘“ğ‘˜superscriptsubscriptğ‘˜subscriptğ‘‘1ğ‘“ğ‘˜\displaystyle=\left|\sum_{k=d_{+}+1}^{\infty}f(k)+\sum_{k=d_{-}+1}^{\infty}f(-% k)\right|= | âˆ‘ start_POSTSUBSCRIPT italic_k = italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT + 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f ( italic_k ) + âˆ‘ start_POSTSUBSCRIPT italic_k = italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT + 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_f ( - italic_k ) | |   
|  | â‰¤âˆ‘k=d++1âˆ|fâ¢(k)|+âˆ‘k=dâˆ’+1âˆ|fâ¢(âˆ’k)|absentsuperscriptsubscriptğ‘˜subscriptğ‘‘1ğ‘“ğ‘˜superscriptsubscriptğ‘˜subscriptğ‘‘1ğ‘“ğ‘˜\displaystyle\leq\sum_{k=d_{+}+1}^{\infty}|f(k)|+\sum_{k=d_{-}+1}^{\infty}|f(-% k)|â‰¤ âˆ‘ start_POSTSUBSCRIPT italic_k = italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT + 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | italic_f ( italic_k ) | + âˆ‘ start_POSTSUBSCRIPT italic_k = italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT + 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT | italic_f ( - italic_k ) | |   
|  | â‰¤2â¢hÏ€â¢âˆ‘k=d++1âˆ|x|expâ¡(hâ¢k)+2â¢hÏ€â¢âˆ‘k=dâˆ’+1âˆexpâ¡(âˆ’hâ¢k)absent2â„ğœ‹superscriptsubscriptğ‘˜subscriptğ‘‘1ğ‘¥â„ğ‘˜2â„ğœ‹superscriptsubscriptğ‘˜subscriptğ‘‘1â„ğ‘˜\displaystyle\leq\frac{2h}{\pi}\sum_{k=d_{+}+1}^{\infty}\frac{|x|}{\exp(hk)}+% \frac{2h}{\pi}\sum_{k=d_{-}+1}^{\infty}\exp(-hk)â‰¤ divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT + 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT divide start_ARG | italic_x | end_ARG start_ARG roman_exp ( italic_h italic_k ) end_ARG + divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG âˆ‘ start_POSTSUBSCRIPT italic_k = italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT + 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT roman_exp ( - italic_h italic_k ) |   
|  | =2â¢hÏ€â¢|x|â¢expâ¡(âˆ’hâ¢(d++1))1âˆ’expâ¡(âˆ’h)+2â¢hÏ€â¢expâ¡(âˆ’hâ¢(dâˆ’+1))1âˆ’expâ¡(âˆ’h)absent2â„ğœ‹ğ‘¥â„subscriptğ‘‘11â„2â„ğœ‹â„subscriptğ‘‘11â„\displaystyle=\frac{2h}{\pi}|x|\frac{\exp(-h(d_{+}+1))}{1-\exp(-h)}+\frac{2h}{% \pi}\frac{\exp(-h(d_{-}+1))}{1-\exp(-h)}= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG | italic_x | divide start_ARG roman_exp ( - italic_h ( italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT + 1 ) ) end_ARG start_ARG 1 - roman_exp ( - italic_h ) end_ARG + divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ end_ARG divide start_ARG roman_exp ( - italic_h ( italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT + 1 ) ) end_ARG start_ARG 1 - roman_exp ( - italic_h ) end_ARG |  | (4.19)  
|  | =2â¢hÏ€â¢(expâ¡(h)âˆ’1)â¢(|x|â‹…expâ¡(âˆ’hâ¢d+)+expâ¡(âˆ’hâ¢dâˆ’)).absent2â„ğœ‹â„1â‹…ğ‘¥â„subscriptğ‘‘â„subscriptğ‘‘\displaystyle=\frac{2h}{\pi(\exp(h)-1)}\big{(}|x|\cdot{\exp(-hd_{+})}+{\exp(-% hd_{-})}\big{)}.= divide start_ARG 2 italic_h end_ARG start_ARG italic_Ï€ ( roman_exp ( italic_h ) - 1 ) end_ARG ( | italic_x | â‹… roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT + end_POSTSUBSCRIPT ) + roman_exp ( - italic_h italic_d start_POSTSUBSCRIPT - end_POSTSUBSCRIPT ) ) . |  | (4.20)  
  
Combining Equations 4.16 and 4.20 yields the result in Equation 4.11. âˆ

###  4.3 Putting Everything Together

Now we can assemble the tools we have developed to prove our main result
(TheoremÂ 1.1). In SectionÂ 4.1 we connected near-optimal lower triangular
Toeplitz matrix factorizations to approximating the square root function. In
SectionsÂ 3.1 andÂ 3.3 we connected low-degree rational functions to efficient
streaming algorithms. In SectionÂ 4.2 we gave a low-degree rational function
that approximates the square root function. The combination of these three
tools gives a near-optimal matrix factorization with a corresponding efficient
streaming algorithm.

######  Theorem 4.6 (Main Theorem - Formal version of TheoremÂ 1.1).

Let n,d,mâˆˆâ„•ğ‘›ğ‘‘ğ‘šâ„•n,d,m\in\mathbb{N}italic_n , italic_d , italic_m
âˆˆ blackboard_N satisfy nâ‰¥5ğ‘›5n\geq 5italic_n â‰¥ 5 and
dâ‰¥2+(12+4â¢logâ¡nÏ€)2ğ‘‘2superscript124ğ‘›ğœ‹2d\geq 2+\left(\frac{12+4\log
n}{\pi}\right)^{2}italic_d â‰¥ 2 + ( divide start_ARG 12 + 4 roman_log
italic_n end_ARG start_ARG italic_Ï€ end_ARG ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT. There exists a lower triangular Toeplitz matrix
factorization
B,C,A=Bâ¢Câˆˆâ„nÃ—nğµğ¶ğ´ğµğ¶superscriptâ„ğ‘›ğ‘›B,C,A=BC\in\mathbb{R}^{n\times
n}italic_B , italic_C , italic_A = italic_B italic_C âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT with the
following properties.

  * â€¢

Near-Optimality: Let
Bâˆ—=Câˆ—=Mâ¢(f,n)superscriptğµsuperscriptğ¶ğ‘€ğ‘“ğ‘›B^{*}=C^{*}=M(f,n)italic_B
start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT = italic_C start_POSTSUPERSCRIPT
âˆ— end_POSTSUPERSCRIPT = italic_M ( italic_f , italic_n ) for
fâ¢(x)=1/1âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)=1/\sqrt{1-x}italic_f ( italic_x ) = 1 / square-
root start_ARG 1 - italic_x end_ARG be the optimal lower triangular Toeplitz
matrix factorization of size nğ‘›nitalic_n. Then

| â€–Bâ€–2â†’âˆsubscriptnormğµâ†’2\displaystyle\|B\|_{2\to\infty}âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | â‰¤â€–Bâˆ—â€–2â†’âˆ+16â¢nâ¢expâ¡(âˆ’Ï€2â¢dâˆ’2),absentsubscriptnormsuperscriptğµâ†’216ğ‘›ğœ‹2ğ‘‘2\displaystyle\leq\|B^{*}\|_{2\to\infty}+16\sqrt{n}\exp\left(-\frac{\pi}{2}% \sqrt{d-2}\right),â‰¤ âˆ¥ italic_B start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT + 16 square-root start_ARG italic_n end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) , |   
---|---|---|---  
| â€–Câ€–1â†’2subscriptnormğ¶â†’12\displaystyle\|C\|_{1\to 2}âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | â‰¤â€–Câˆ—â€–1â†’2+16â¢nâ¢expâ¡(âˆ’Ï€2â¢dâˆ’2).absentsubscriptnormsuperscriptğ¶â†’1216ğ‘›ğœ‹2ğ‘‘2\displaystyle\leq\|C^{*}\|_{1\to 2}+16\sqrt{n}\exp\left(-\frac{\pi}{2}\sqrt{d-% 2}\right).â‰¤ âˆ¥ italic_C start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT + 16 square-root start_ARG italic_n end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) . |   
  
  * â€¢

Efficiency: There is an algorithm that takes as input a stream
Z1,â‹…,Z2,â‹…,â‹¯,Zn,â‹…âˆˆâ„1Ã—msubscriptğ‘1â‹…subscriptğ‘2â‹…â‹¯subscriptğ‘ğ‘›â‹…superscriptâ„1ğ‘šZ_{1,\cdot},Z_{2,\cdot},\cdots,Z_{n,\cdot}\in\mathbb{R}^{1\times
m}italic_Z start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 2 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT and outputs a stream
Z^1,â‹…,Z^2,â‹…,â‹¯,Z^n,â‹…âˆˆâ„1Ã—msubscript^ğ‘1â‹…subscript^ğ‘2â‹…â‹¯subscript^ğ‘ğ‘›â‹…superscriptâ„1ğ‘š\widehat{Z}_{1,\cdot},\widehat{Z}_{2,\cdot},\cdots,\widehat{Z}_{n,\cdot}\in%
\mathbb{R}^{1\times m}over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT 1 ,
â‹… end_POSTSUBSCRIPT , over^ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT 2
, â‹… end_POSTSUBSCRIPT , â‹¯ , over^ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT italic_n , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT such that
Z^=Câˆ’1â¢Z^ğ‘superscriptğ¶1ğ‘\widehat{Z}=C^{-1}Zover^ start_ARG italic_Z
end_ARG = italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_Z and
the space and time (per iteration) required by the algorithm is
Oâ¢(dâ¢m)ğ‘‚ğ‘‘ğ‘šO(dm)italic_O ( italic_d italic_m ).

To obtain TheoremÂ 1.1 in the introduction from TheoremÂ 4.6, we simply need
to set d=Oâ¢(logâ¡(n/Î¼))2ğ‘‘ğ‘‚superscriptğ‘›ğœ‡2d=O(\log(n/\mu))^{2}italic_d
= italic_O ( roman_log ( italic_n / italic_Î¼ ) ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT such that
dâ‰¥2+(12+4â¢logâ¡nÏ€)2ğ‘‘2superscript124ğ‘›ğœ‹2d\geq 2+\left(\frac{12+4\log
n}{\pi}\right)^{2}italic_d â‰¥ 2 + ( divide start_ARG 12 + 4 roman_log
italic_n end_ARG start_ARG italic_Ï€ end_ARG ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT and
16â¢nâ¢expâ¡(âˆ’Ï€2â¢dâˆ’2)â‰¤Î¼4+logâ¡(n)16ğ‘›ğœ‹2ğ‘‘2ğœ‡4ğ‘›16\sqrt{n}\exp\left(-\frac{\pi}{2}\sqrt{d-2}\right)\leq\frac{\mu}{4+\log(n)}16
square-root start_ARG italic_n end_ARG roman_exp ( - divide start_ARG
italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2
end_ARG ) â‰¤ divide start_ARG italic_Î¼ end_ARG start_ARG 4 + roman_log (
italic_n ) end_ARG.

###### Proof.

CorollaryÂ 4.4 gives us a rational function rğ‘Ÿritalic_r of degree
dğ‘‘ditalic_d with real coefficients such that

| |râ¢(x)âˆ’1âˆ’x|â‰¤8â‹…expâ¡(âˆ’Ï€2â¢dâˆ’2)ğ‘Ÿğ‘¥1ğ‘¥â‹…8ğœ‹2ğ‘‘2|{r}(x)-\sqrt{1-x}|\leq 8\cdot\exp\left(-\frac{\pi}{2}\sqrt{d-2}\right)| italic_r ( italic_x ) - square-root start_ARG 1 - italic_x end_ARG | â‰¤ 8 â‹… roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) |   
---|---|---  
  
for all xâˆˆâ„‚ğ‘¥â„‚x\in\mathbb{C}italic_x âˆˆ blackboard_C with |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1.

Let
bâ¢(x)â‰”râ¢(x)1âˆ’xâ‰”ğ‘ğ‘¥ğ‘Ÿğ‘¥1ğ‘¥b(x)\coloneqq\frac{r(x)}{1-x}italic_b (
italic_x ) â‰” divide start_ARG italic_r ( italic_x ) end_ARG start_ARG 1 -
italic_x end_ARG and
câ¢(x)â‰”1râ¢(x)â‰”ğ‘ğ‘¥1ğ‘Ÿğ‘¥c(x)\coloneqq\frac{1}{r(x)}italic_c ( italic_x
) â‰” divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) end_ARG and
fâ¢(x)â‰”11âˆ’xâ‰”ğ‘“ğ‘¥11ğ‘¥f(x)\coloneqq\frac{1}{\sqrt{1-x}}italic_f (
italic_x ) â‰” divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 -
italic_x end_ARG end_ARG and
gâ¢(x)â‰”1/(1âˆ’x)=bâ¢(x)â¢câ¢(x)â‰”ğ‘”ğ‘¥11ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥g(x)\coloneqq
1/(1-x)=b(x)c(x)italic_g ( italic_x ) â‰” 1 / ( 1 - italic_x ) = italic_b (
italic_x ) italic_c ( italic_x ). Let
Bâ‰”Mâ¢(b,n),Câ‰”Mâ¢(c,n)âˆˆâ„nÃ—nformulae-
sequenceâ‰”ğµğ‘€ğ‘ğ‘›â‰”ğ¶ğ‘€ğ‘ğ‘›superscriptâ„ğ‘›ğ‘›B\coloneqq
M(b,n),C\coloneqq M(c,n)\in\mathbb{R}^{n\times n}italic_B â‰” italic_M (
italic_b , italic_n ) , italic_C â‰” italic_M ( italic_c , italic_n ) âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT be
as in EquationÂ 3.1. By LemmaÂ 3.1, this is a valid matrix factorization, as
Bâ‹…C=Mâ¢(b,n)â‹…Mâ¢(c,n)=Mâ¢(g,n)â‹…ğµğ¶â‹…ğ‘€ğ‘ğ‘›ğ‘€ğ‘ğ‘›ğ‘€ğ‘”ğ‘›B\cdot
C=M(b,n)\cdot M(c,n)=M(g,n)italic_B â‹… italic_C = italic_M ( italic_b ,
italic_n ) â‹… italic_M ( italic_c , italic_n ) = italic_M ( italic_g ,
italic_n ).

Let Ï„>0ğœ0\tau>0italic_Ï„ > 0 and

| Î³Ï„â‰”sup{|r(x)âˆ’1âˆ’x|:xâˆˆâ„‚,|x|=exp(âˆ’Ï„)}â‰¤8â‹…exp(âˆ’Ï€2dâˆ’2).\gamma_{\tau}\coloneqq\sup\left\\{|r(x)-\sqrt{1-x}|:x\in\mathbb{C},|x|=\exp(-% \tau)\right\\}\leq 8\cdot\exp\left(-\frac{\pi}{2}\sqrt{d-2}\right).italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‰” roman_sup { | italic_r ( italic_x ) - square-root start_ARG 1 - italic_x end_ARG | : italic_x âˆˆ blackboard_C , | italic_x | = roman_exp ( - italic_Ï„ ) } â‰¤ 8 â‹… roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) . |   
---|---|---  
  
By PropositionÂ 4.1, if
Î³Ï„â‰¤(1âˆ’expâ¡(âˆ’2â¢Ï„)4)2subscriptğ›¾ğœsuperscript12ğœ42\gamma_{\tau}\leq\left(\frac{1-\exp(-2\tau)}{4}\right)^{2}italic_Î³
start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‰¤ ( divide start_ARG 1 -
roman_exp ( - 2 italic_Ï„ ) end_ARG start_ARG 4 end_ARG )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT, then

| â€–Mâ¢(b,n)â€–2â†’âˆsubscriptnormğ‘€ğ‘ğ‘›â†’2\displaystyle\|M(b,n)\|_{2\to\infty}âˆ¥ italic_M ( italic_b , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | â‰¤â€–Mâ¢(f,n)â€–2â†’âˆ+expâ¡(Ï„â¢n)â‹…Î³Ï„expâ¡(2â¢Ï„)âˆ’1,absentsubscriptnormğ‘€ğ‘“ğ‘›â†’2â‹…ğœğ‘›subscriptğ›¾ğœ2ğœ1\displaystyle\leq\|M(f,n)\|_{2\to\infty}+\frac{\exp(\tau n)\cdot\gamma_{\tau}}% {\sqrt{\exp(2\tau)-1}},â‰¤ âˆ¥ italic_M ( italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT + divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG roman_exp ( 2 italic_Ï„ ) - 1 end_ARG end_ARG , |   
---|---|---|---  
| â€–Mâ¢(c,n)â€–1â†’2subscriptnormğ‘€ğ‘ğ‘›â†’12\displaystyle\|M(c,n)\|_{1\to 2}âˆ¥ italic_M ( italic_c , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | â‰¤â€–Mâ¢(f,n)â€–1â†’2+expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)âˆ’1)2âˆ’27/2â¢Î³Ï„â¢expâ¡(4â¢Ï„)4.absentsubscriptnormğ‘€ğ‘“ğ‘›â†’12â‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ12superscript272subscriptğ›¾ğœ4ğœ\displaystyle\leq\|M(f,n)\|_{1\to 2}+\frac{\exp(\tau n)\cdot\gamma_{\tau}}{% \sqrt[4]{(\exp(2\tau)-1)^{2}-2^{7/2}\gamma_{\tau}\exp(4\tau)}}.â‰¤ âˆ¥ italic_M ( italic_f , italic_n ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT + divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2 italic_Ï„ ) - 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 4 italic_Ï„ ) end_ARG end_ARG . |   
  
Set Ï„=12â¢nğœ12ğ‘›\tau=\frac{1}{2n}italic_Ï„ = divide start_ARG 1 end_ARG
start_ARG 2 italic_n end_ARG. Then
expâ¡(2â¢Ï„)âˆ’1â‰¥1/n2ğœ11ğ‘›\exp(2\tau)-1\geq 1/nroman_exp ( 2 italic_Ï„ ) -
1 â‰¥ 1 / italic_n and expâ¡(Ï„â¢n)=expâ¡(1/2)ğœğ‘›12\exp(\tau
n)=\exp(1/2)roman_exp ( italic_Ï„ italic_n ) = roman_exp ( 1 / 2 ). Thus

| expâ¡(Ï„â¢n)â‹…Î³Ï„expâ¡(2â¢Ï„)âˆ’1â‰¤nâ‹…expâ¡(1/2)â‹…Î³Ï„<2â¢nâ¢Î³Ï„â‹…ğœğ‘›subscriptğ›¾ğœ2ğœ1â‹…ğ‘›12subscriptğ›¾ğœ2ğ‘›subscriptğ›¾ğœ\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt{\exp(2\tau)-1}}\leq\sqrt{n}\cdot% \exp(1/2)\cdot\gamma_{\tau}<2\sqrt{n}\gamma_{\tau}divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG square-root start_ARG roman_exp ( 2 italic_Ï„ ) - 1 end_ARG end_ARG â‰¤ square-root start_ARG italic_n end_ARG â‹… roman_exp ( 1 / 2 ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT < 2 square-root start_ARG italic_n end_ARG italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT |   
---|---|---  
  
and, if nâ‰¥5ğ‘›5n\geq 5italic_n â‰¥ 5 and
Î³Ï„â‰¤(16â‹…n)2subscriptğ›¾ğœsuperscript1â‹…6ğ‘›2\gamma_{\tau}\leq\left(\frac{1}{6\cdot
n}\right)^{2}italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‰¤ (
divide start_ARG 1 end_ARG start_ARG 6 â‹… italic_n end_ARG )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT, then

| expâ¡(Ï„â¢n)â‹…Î³Ï„(expâ¡(2â¢Ï„)âˆ’1)2âˆ’27/2â¢Î³Ï„â¢expâ¡(4â¢Ï„)4â‰¤expâ¡(1/2)â‹…Î³Ï„1/n2âˆ’27/2â¢Î³Ï„â¢expâ¡(2/n)4â‰¤expâ¡(1/2)â¢Î³Ï„1n2âˆ’27/2â¢expâ¡(2/5)36â¢n24<2â¢nâ¢Î³Ï„.â‹…ğœğ‘›subscriptğ›¾ğœ4superscript2ğœ12superscript272subscriptğ›¾ğœ4ğœâ‹…12subscriptğ›¾ğœ41superscriptğ‘›2superscript272subscriptğ›¾ğœ2ğ‘›12subscriptğ›¾ğœ41superscriptğ‘›2superscript2722536superscriptğ‘›22ğ‘›subscriptğ›¾ğœ\frac{\exp(\tau n)\cdot\gamma_{\tau}}{\sqrt[4]{(\exp(2\tau)-1)^{2}-2^{7/2}% \gamma_{\tau}\exp(4\tau)}}\leq\frac{\exp(1/2)\cdot\gamma_{\tau}}{\sqrt[4]{1/n^% {2}-2^{7/2}\gamma_{\tau}\exp(2/n)}}\leq\frac{\exp(1/2)\gamma_{\tau}}{\sqrt[4]{% \frac{1}{n^{2}}-\frac{2^{7/2}\exp(2/5)}{36n^{2}}}}<2\sqrt{n}\gamma_{\tau}.divide start_ARG roman_exp ( italic_Ï„ italic_n ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG ( roman_exp ( 2 italic_Ï„ ) - 1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 4 italic_Ï„ ) end_ARG end_ARG â‰¤ divide start_ARG roman_exp ( 1 / 2 ) â‹… italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG 1 / italic_n start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - 2 start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT roman_exp ( 2 / italic_n ) end_ARG end_ARG â‰¤ divide start_ARG roman_exp ( 1 / 2 ) italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT end_ARG start_ARG nth-root start_ARG 4 end_ARG start_ARG divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG - divide start_ARG 2 start_POSTSUPERSCRIPT 7 / 2 end_POSTSUPERSCRIPT roman_exp ( 2 / 5 ) end_ARG start_ARG 36 italic_n start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG end_ARG end_ARG < 2 square-root start_ARG italic_n end_ARG italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT . |   
---|---|---  
  
Assuming nâ‰¥5ğ‘›5n\geq 5italic_n â‰¥ 5 and
dâ‰¥2+(2Ï€â¢logâ¡(8â‹…(6â¢n)2))2ğ‘‘2superscript2ğœ‹â‹…8superscript6ğ‘›22d\geq
2+\left(\frac{2}{\pi}\log(8\cdot(6n)^{2})\right)^{2}italic_d â‰¥ 2 + ( divide
start_ARG 2 end_ARG start_ARG italic_Ï€ end_ARG roman_log ( 8 â‹… ( 6 italic_n
) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT, we have
Î³Ï„â‰¤(16â¢n)2â‰¤(1âˆ’expâ¡(âˆ’2â¢Ï„)4)2subscriptğ›¾ğœsuperscript16ğ‘›2superscript12ğœ42\gamma_{\tau}\leq\left(\frac{1}{6n}\right)^{2}\leq\left(\frac{1-\exp(-2\tau)}{%
4}\right)^{2}italic_Î³ start_POSTSUBSCRIPT italic_Ï„ end_POSTSUBSCRIPT â‰¤ (
divide start_ARG 1 end_ARG start_ARG 6 italic_n end_ARG )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ ( divide start_ARG 1 -
roman_exp ( - 2 italic_Ï„ ) end_ARG start_ARG 4 end_ARG )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT, which means all the above
inequalities hold. Combining inequalities yields the first part of the result.

Per 3.3, we can write

| râ¢(x)=t+pâ¢(x)qâ¢(x)ğ‘Ÿğ‘¥ğ‘¡ğ‘ğ‘¥ğ‘ğ‘¥r(x)=t+\frac{p(x)}{q(x)}italic_r ( italic_x ) = italic_t + divide start_ARG italic_p ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG |   
---|---|---  
  
where degâ¡(p)<ddegreeğ‘ğ‘‘\deg(p)<droman_deg ( italic_p ) < italic_d and
degâ¡(q)â‰¤ddegreeğ‘ğ‘‘\deg(q)\leq droman_deg ( italic_q ) â‰¤ italic_d and
tâˆˆâ„ğ‘¡â„t\in\mathbb{R}italic_t âˆˆ blackboard_R. LemmaÂ 3.2 states that
there exist u,vâˆˆâ„dğ‘¢ğ‘£superscriptâ„ğ‘‘u,v\in\mathbb{R}^{d}italic_u ,
italic_v âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT
and Wâˆˆâ„dÃ—dğ‘Šsuperscriptâ„ğ‘‘ğ‘‘W\in\mathbb{R}^{d\times d}italic_W âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_d end_POSTSUPERSCRIPT
such that we can express

| râ¢(x)=âˆ‘k=0âˆrkâ¢xkâ¢Â forÂ â¢rk=uTâ¢Wkâ¢v+tâ¢ğ•€â¢[k=0].ğ‘Ÿğ‘¥superscriptsubscriptğ‘˜0subscriptğ‘Ÿğ‘˜superscriptğ‘¥ğ‘˜Â forÂ subscriptğ‘Ÿğ‘˜superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£ğ‘¡ğ•€delimited-[]ğ‘˜0r(x)=\sum_{k=0}^{\infty}r_{k}x^{k}~{}~{}~{}\text{ for }~{}~{}~{}r_{k}=u^{T}W^{% k}v+t\mathbb{I}[k=0].italic_r ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT for italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v + italic_t blackboard_I [ italic_k = 0 ] . |   
---|---|---  
  
Furthermore Wğ‘ŠWitalic_W is sparse in the sense that each row has only two
nonzero entries. Now we can feed u,v,W,tğ‘¢ğ‘£ğ‘Šğ‘¡u,v,W,titalic_u , italic_v
, italic_W , italic_t as parameters to AlgorithmÂ 1. LemmaÂ 3.4 tells us that
AlgorithmÂ 1 receives the rows of
Zâˆˆâ„nÃ—mğ‘superscriptâ„ğ‘›ğ‘šZ\in\mathbb{R}^{n\times m}italic_Z âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_m end_POSTSUPERSCRIPT as
a stream and returns the rows of
Z^âˆˆâ„nÃ—m^ğ‘superscriptâ„ğ‘›ğ‘š\widehat{Z}\in\mathbb{R}^{n\times m}over^
start_ARG italic_Z end_ARG âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_m end_POSTSUPERSCRIPT as a stream, where
Z^=Mâ¢(r,n)â¢Z=Câˆ’1â¢Z^ğ‘ğ‘€ğ‘Ÿğ‘›ğ‘superscriptğ¶1ğ‘\widehat{Z}=M(r,n)Z=C^{-1}Zover^
start_ARG italic_Z end_ARG = italic_M ( italic_r , italic_n ) italic_Z =
italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT italic_Z. (The fact
that Mâ¢(r,n)=Câˆ’1ğ‘€ğ‘Ÿğ‘›superscriptğ¶1M(r,n)=C^{-1}italic_M ( italic_r ,
italic_n ) = italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT follows
from LemmaÂ 3.1.) The space required by the algorithm is
Oâ¢(dâ¢m)ğ‘‚ğ‘‘ğ‘šO(dm)italic_O ( italic_d italic_m ) and the time per
iteration is dominated by computing the matrix multiplication
Wâ¢Sğ‘Šğ‘†WSitalic_W italic_S for
Sâˆˆâ„dÃ—mğ‘†superscriptâ„ğ‘‘ğ‘šS\in\mathbb{R}^{d\times m}italic_S âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_m end_POSTSUPERSCRIPT.
Since Wğ‘ŠWitalic_W is sparse, this takes Oâ¢(dâ¢m)ğ‘‚ğ‘‘ğ‘šO(dm)italic_O (
italic_d italic_m ) time. âˆ

##  5 Factorizations via Direct Optimization

In this section, we begin (in Â§5.1) by showing the following result:

######  Theorem 5.1 (Informal).

Let rğ‘Ÿritalic_r be a rational generating function. Then, for the matrix
factorization of Ağ´Aitalic_A given by
B=Mâ¡(râ¢(x)/(1âˆ’x),n)ğµMğ‘Ÿğ‘¥1ğ‘¥ğ‘›B=\operatorname{M}(r(x)/(1-x),n)italic_B
= roman_M ( italic_r ( italic_x ) / ( 1 - italic_x ) , italic_n ) and
C=Mâ¡(1/râ¢(x),n)ğ¶M1ğ‘Ÿğ‘¥ğ‘›C=\operatorname{M}(1/r(x),n)italic_C = roman_M (
1 / italic_r ( italic_x ) , italic_n ), we can compute in â€œclosed-formâ€
(more specifically, in time
ğ’ªâ¢(polyâ¡(d)â¢logâ¡n)ğ’ªpolyğ‘‘ğ‘›\mathcal{O}(\operatorname{poly}(d)\log
n)caligraphic_O ( roman_poly ( italic_d ) roman_log italic_n )) the
sensitivity and error of this matrix factorization, namely
â€–Bâ€–2â†’âˆ2subscriptsuperscriptnormğµ2â†’2\|B\|^{2}_{2\to\infty}âˆ¥
italic_B âˆ¥ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 2
â†’ âˆ end_POSTSUBSCRIPT and
â€–Câ€–1â†’22subscriptsuperscriptnormğ¶2â†’12\|C\|^{2}_{1\to 2}âˆ¥ italic_C
âˆ¥ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 â†’ 2
end_POSTSUBSCRIPT.

###### Proof.

The result follows from LemmasÂ 5.2, 5.3 andÂ 5.4. âˆ

We remark that the logâ¡nğ‘›\log nroman_log italic_n dependence in TheoremÂ
5.1 comes (only) from the need to compute quantities like
Î¸ksuperscriptğœƒğ‘˜\theta^{k}italic_Î¸ start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT for Î¸âˆˆâ„ğœƒâ„\theta\in\mathbb{R}italic_Î¸ âˆˆ
blackboard_R and kâ‰¤nğ‘˜ğ‘›k\leq nitalic_k â‰¤ italic_n, which can be done
via iterated squaring. For practical nğ‘›nitalic_n and modern hardware, this
term can essentially be ignored, making the running time practically
independent of nğ‘›nitalic_n. If the roots of the numerator and denominator of
rğ‘Ÿritalic_r are already known (as assumed in LemmaÂ 5.2) then
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr can be computed in time
ğ’ªâ¢(d2â¢logâ¡(n))ğ’ªsuperscriptğ‘‘2ğ‘›\mathcal{O}(d^{2}\log(n))caligraphic_O
( italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_log ( italic_n )
); and such roots can always be found in time
ğ’ªâ¢(polyâ¡(d))ğ’ªpolyğ‘‘\mathcal{O}(\operatorname{poly}(d))caligraphic_O (
roman_poly ( italic_d ) ) (omitting the dependence on the desired numerical
accuracy).

In SectionÂ 5.2 we then show how TheoremÂ 5.1 can be used to directly optimize
the parameters of a BLT factorization to minimize
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr for a specific nğ‘›nitalic_n.

###  5.1 Fast and Exact Error Computation

In addition to enabling efficient streaming multiplication, the rational
function structure of the matrix factorizations we consider allows us to
compute the total error of these mechanisms efficiently for any nğ‘›nitalic_n.

######  Lemma 5.2.

Let râ¢(x)=pâ¢(x)/qâ¢(x)ğ‘Ÿğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥r(x)=p(x)/q(x)italic_r ( italic_x ) =
italic_p ( italic_x ) / italic_q ( italic_x ) be a rational function where
degâ¡(p)=degâ¡(q)=ddegreeğ‘degreeğ‘ğ‘‘\deg(p)=\deg(q)=droman_deg ( italic_p )
= roman_deg ( italic_q ) = italic_d with
qâ¢(0)=pâ¢(0)=1ğ‘0ğ‘01q(0)=p(0)=1italic_q ( 0 ) = italic_p ( 0 ) = 1. Further,
suppose pğ‘pitalic_p and qğ‘qitalic_q have pairwise distinct real roots, in
particular there exist
Î¸i,Î¸^iâˆˆ(0,1]subscriptğœƒğ‘–subscript^ğœƒğ‘–01\theta_{i},\hat{\theta}_{i}\in(0,1]italic_Î¸
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , over^ start_ARG italic_Î¸
end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆˆ ( 0 , 1 ] for
iâˆˆ[d]ğ‘–delimited-[]ğ‘‘i\in[d]italic_i âˆˆ [ italic_d ] such that

| pâ¢(x)ğ‘ğ‘¥\displaystyle p(x)italic_p ( italic_x ) | =(1âˆ’Î¸^0â¢x)â¢(1âˆ’Î¸^1â¢x)â¢â‹¯â¢(1âˆ’Î¸^dâˆ’1â¢x),absent1subscript^ğœƒ0ğ‘¥1subscript^ğœƒ1ğ‘¥â‹¯1subscript^ğœƒğ‘‘1ğ‘¥\displaystyle=(1-\hat{\theta}_{0}x)(1-\hat{\theta}_{1}x)\cdots(1-\hat{\theta}_% {d-1}x),= ( 1 - over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT italic_x ) ( 1 - over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_x ) â‹¯ ( 1 - over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT italic_x ) , |   
---|---|---|---  
| qâ¢(x)ğ‘ğ‘¥\displaystyle q(x)italic_q ( italic_x ) | =(1âˆ’Î¸0â¢x)â¢(1âˆ’Î¸1â¢x)â¢â‹¯â¢(1âˆ’Î¸dâˆ’1â¢x)absent1subscriptğœƒ0ğ‘¥1subscriptğœƒ1ğ‘¥â‹¯1subscriptğœƒğ‘‘1ğ‘¥\displaystyle=(1-\theta_{0}x)(1-\theta_{1}x)\cdots(1-\theta_{d-1}x)= ( 1 - italic_Î¸ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT italic_x ) ( 1 - italic_Î¸ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_x ) â‹¯ ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT italic_x ) |   
  
with Î¸iâ‰ Î¸jsubscriptğœƒğ‘–subscriptğœƒğ‘—\theta_{i}\neq\theta_{j}italic_Î¸
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT â‰ italic_Î¸
start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT and Î¸^iâ‰
Î¸^jsubscript^ğœƒğ‘–subscript^ğœƒğ‘—\hat{\theta}_{i}\neq\hat{\theta}_{j}over^
start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT â‰
over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_j
end_POSTSUBSCRIPT when iâ‰ jğ‘–ğ‘—i\neq jitalic_i â‰ italic_j. Then, there
exist
Ï‰i,Ï‰^iâˆˆâ„subscriptğœ”ğ‘–subscript^ğœ”ğ‘–â„\omega_{i},\hat{\omega}_{i}\in\mathbb{R}italic_Ï‰
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , over^ start_ARG italic_Ï‰
end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆˆ blackboard_R for
iâˆˆ[d]ğ‘–delimited-[]ğ‘‘i\in[d]italic_i âˆˆ [ italic_d ] such that

| râ¢(x)=1+xâ¢(âˆ‘i=0dâˆ’1Ï‰i1âˆ’Î¸iâ¢x)andsâ¢(x)â‰”1râ¢(x)=1+xâ¢(âˆ‘i=0dâˆ’1Ï‰^i1âˆ’Î¸^iâ¢x).formulae-sequenceğ‘Ÿğ‘¥1ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğœ”ğ‘–1subscriptğœƒğ‘–ğ‘¥andâ‰”ğ‘ ğ‘¥1ğ‘Ÿğ‘¥1ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscript^ğœ”ğ‘–1subscript^ğœƒğ‘–ğ‘¥r(x)=1+x\left(\sum_{i=0}^{d-1}\frac{\omega_{i}}{1-\theta_{i}x}\right)\qquad% \text{and}\qquad s(x)\coloneqq\frac{1}{r(x)}=1+x\left(\sum_{i=0}^{d-1}\frac{% \hat{\omega}_{i}}{1-\hat{\theta}_{i}x}\right).italic_r ( italic_x ) = 1 + italic_x ( âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x end_ARG ) and italic_s ( italic_x ) â‰” divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) end_ARG = 1 + italic_x ( âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT divide start_ARG over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG 1 - over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x end_ARG ) . |  | (5.1)  
---|---|---|---  
  
These
Ï‰i,Ï‰^isubscriptğœ”ğ‘–subscript^ğœ”ğ‘–\omega_{i},\hat{\omega}_{i}italic_Ï‰
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , over^ start_ARG italic_Ï‰
end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT can in fact be computed
in closed form, Eq.Â 5.3. Further, the coefficients of the corresponding
sequences can be computed directly as

| ri={1i=0âˆ‘jâˆˆ[d]Ï‰jâ¢Î¸jiâˆ’1i>0.andsi={1i=0âˆ‘jâˆˆ[d]Ï‰^jâ¢Î¸^jiâˆ’1i>0.formulae-sequencesubscriptğ‘Ÿğ‘–cases1ğ‘–0subscriptğ‘—delimited-[]ğ‘‘subscriptğœ”ğ‘—superscriptsubscriptğœƒğ‘—ğ‘–1ğ‘–0andsubscriptğ‘ ğ‘–cases1ğ‘–0subscriptğ‘—delimited-[]ğ‘‘subscript^ğœ”ğ‘—superscriptsubscript^ğœƒğ‘—ğ‘–1ğ‘–0r_{i}=\begin{cases}1&i=0\\\ \sum_{j\in[d]}\omega_{j}\theta_{j}^{i-1}&i>0.\end{cases}\quad\text{and}\quad s% _{i}=\begin{cases}1&i=0\\\ \sum_{j\in[d]}\hat{\omega}_{j}\hat{\theta}_{j}^{i-1}&i>0.\end{cases}italic_r start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = { start_ROW start_CELL 1 end_CELL start_CELL italic_i = 0 end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT end_CELL start_CELL italic_i > 0 . end_CELL end_ROW and italic_s start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = { start_ROW start_CELL 1 end_CELL start_CELL italic_i = 0 end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT end_CELL start_CELL italic_i > 0 . end_CELL end_ROW |  | (5.2)  
---|---|---|---  
  
Before giving a proof, we observe that Eq.Â 5.2 yields a diagonalized
companion matrix of the form of LemmaÂ 3.2, and using the representation of
3.3 we can take
t=1âˆ’âˆ‘i=0dâˆ’1Ï‰i/Î¸iğ‘¡1superscriptsubscriptğ‘–0ğ‘‘1subscriptğœ”ğ‘–subscriptğœƒğ‘–t=1-\sum_{i=0}^{d-1}\omega_{i}/\theta_{i}italic_t
= 1 - âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_Ï‰
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT / italic_Î¸ start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT so

| rk=tâ¢ğ•€â¢[k=0]+uTâ¢Wkâ¢vâ‰”[11â‹®1]Tâ¢[Î¸00000Î¸10â‹®â‹®0â‹±000â€¦Î¸dâˆ’1]kâ¢[Ï‰0/Î¸0Ï‰1/Î¸1â‹®Ï‰dâˆ’1/Î¸dâˆ’1],subscriptğ‘Ÿğ‘˜ğ‘¡ğ•€delimited-[]ğ‘˜0superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£â‰”superscriptmatrix11â‹®1ğ‘‡superscriptmatrixsubscriptğœƒ00000subscriptğœƒ10â‹®â‹®0â‹±000â€¦subscriptğœƒğ‘‘1ğ‘˜matrixsubscriptğœ”0subscriptğœƒ0subscriptğœ”1subscriptğœƒ1â‹®subscriptğœ”ğ‘‘1subscriptğœƒğ‘‘1r_{k}=t\mathbb{I}[k=0]+u^{T}W^{k}v\coloneqq\begin{bmatrix}1\\\ 1\\\ \vdots\\\ 1\end{bmatrix}^{T}\begin{bmatrix}\theta_{0}&0&0&0\\\ 0&\theta_{1}&0&\vdots\\\ \vdots&0&\ddots&0\\\ 0&0&\dots&\theta_{d-1}\\\ \end{bmatrix}^{k}\begin{bmatrix}\omega_{0}/\theta_{0}\\\ \omega_{1}/\theta_{1}\\\ \vdots\\\ \omega_{d-1}/\theta_{d-1}\end{bmatrix},italic_r start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT = italic_t blackboard_I [ italic_k = 0 ] + italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v â‰” [ start_ARG start_ROW start_CELL 1 end_CELL end_ROW start_ROW start_CELL 1 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 1 end_CELL end_ROW end_ARG ] start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT [ start_ARG start_ROW start_CELL italic_Î¸ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL italic_Î¸ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL start_CELL 0 end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL 0 end_CELL start_CELL â‹± end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â€¦ end_CELL start_CELL italic_Î¸ start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT [ start_ARG start_ROW start_CELL italic_Ï‰ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT / italic_Î¸ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_Ï‰ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT / italic_Î¸ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_Ï‰ start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT / italic_Î¸ start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ] , |   
---|---|---  
  
and hence we can efficiently multiply by Mâ¢(r)ğ‘€ğ‘ŸM(r)italic_M ( italic_r )
using AlgorithmÂ 1; a similar construction with
(Ï‰^,Î¸^)^ğœ”^ğœƒ(\hat{\omega},\hat{\theta})( over^ start_ARG italic_Ï‰
end_ARG , over^ start_ARG italic_Î¸ end_ARG ) enables efficient multiplication
by Mâ¢(1/r)ğ‘€1ğ‘ŸM(1/r)italic_M ( 1 / italic_r ) using only dğ‘‘ditalic_d
buffers.

This construction is particularly useful for optimization, but assumes we
already have factored pğ‘pitalic_p and qğ‘qitalic_q; one can of course always
find the roots of pğ‘pitalic_p and qğ‘qitalic_q if they are given in some
other polynomial representation.212121While we only need to consider real
roots in our constructions and our optimization, the results of this section
go through for complex roots as well. Specifically, if one is instead given
the matrix-power representation of rğ‘Ÿritalic_r, PropositionÂ 5.6 of SectionÂ
5.3 shows these can directly be converted to a parameterization of 1/r1ğ‘Ÿ1/r1
/ italic_r.

###### Proof of LemmaÂ 5.2.

Eq.Â 5.2 follows from Eq.Â 5.1 and the Taylor series

| Ï‰â¢x1âˆ’Î¸â¢x=âˆ‘i=1âˆÏ‰â¢Î¸iâˆ’1â¢xi.ğœ”ğ‘¥1ğœƒğ‘¥superscriptsubscriptğ‘–1ğœ”superscriptğœƒğ‘–1superscriptğ‘¥ğ‘–\frac{\omega x}{1-\theta x}=\sum_{i=1}^{\infty}\omega\theta^{i-1}x^{i}.divide start_ARG italic_Ï‰ italic_x end_ARG start_ARG 1 - italic_Î¸ italic_x end_ARG = âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_Ï‰ italic_Î¸ start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT . |   
---|---|---  
  
It remains to show we can find Ï‰isubscriptğœ”ğ‘–\omega_{i}italic_Ï‰
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT to instantiate Eq.Â 5.1 for
râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) (the case of
Ï‰^isubscript^ğœ”ğ‘–\hat{\omega}_{i}over^ start_ARG italic_Ï‰ end_ARG
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT for sâ¢(x)ğ‘ ğ‘¥s(x)italic_s (
italic_x ) is completely symmetric). Letting

| q(âˆ’i)â¢(x)â‰”qâ¢(x)1âˆ’Î¸iâ¢x=âˆjâˆˆ[d]jâ‰ i(1âˆ’Î¸jâ¢x),â‰”superscriptğ‘ğ‘–ğ‘¥ğ‘ğ‘¥1subscriptğœƒğ‘–ğ‘¥subscriptproductğ‘—delimited-[]ğ‘‘ğ‘—ğ‘–1subscriptğœƒğ‘—ğ‘¥q^{(-i)}(x)\coloneqq\frac{q(x)}{1-\theta_{i}x}=\prod_{\begin{subarray}{c}j\in[% d]\\\ j\neq i\end{subarray}}(1-\theta_{j}x),italic_q start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) â‰” divide start_ARG italic_q ( italic_x ) end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x end_ARG = âˆ start_POSTSUBSCRIPT start_ARG start_ROW start_CELL italic_j âˆˆ [ italic_d ] end_CELL end_ROW start_ROW start_CELL italic_j â‰ italic_i end_CELL end_ROW end_ARG end_POSTSUBSCRIPT ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_x ) , |   
---|---|---  
  
we need Ï‰isubscriptğœ”ğ‘–\omega_{i}italic_Ï‰ start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT that satisfy

| 1+xâ¢(âˆ‘i=0dâˆ’1Ï‰i1âˆ’Î¸iâ¢x)=qâ¢(x)+âˆ‘i=0dâˆ’1Ï‰iâ¢xâ¢q(âˆ’i)â¢(x)qâ¢(x)=pâ¢(x)qâ¢(x).1ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğœ”ğ‘–1subscriptğœƒğ‘–ğ‘¥ğ‘ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğœ”ğ‘–ğ‘¥superscriptğ‘ğ‘–ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥1+x\left(\sum_{i=0}^{d-1}\frac{\omega_{i}}{1-\theta_{i}x}\right)=\frac{q(x)+% \sum_{i=0}^{d-1}\omega_{i}xq^{(-i)}(x)}{q(x)}=\frac{p(x)}{q(x)}.1 + italic_x ( âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x end_ARG ) = divide start_ARG italic_q ( italic_x ) + âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x italic_q start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG = divide start_ARG italic_p ( italic_x ) end_ARG start_ARG italic_q ( italic_x ) end_ARG . |   
---|---|---  
  
Since pâ¢(0)=qâ¢(0)=1ğ‘0ğ‘01p(0)=q(0)=1italic_p ( 0 ) = italic_q ( 0 ) = 1,
pâ¢(x)âˆ’qâ¢(x)ğ‘ğ‘¥ğ‘ğ‘¥p(x)-q(x)italic_p ( italic_x ) - italic_q ( italic_x
) is divisible by xğ‘¥xitalic_x, so
fâ¢(x)â‰”1xâ¢(pâ¢(x)âˆ’qâ¢(x))â‰”ğ‘“ğ‘¥1ğ‘¥ğ‘ğ‘¥ğ‘ğ‘¥f(x)\coloneqq\frac{1}{x}(p(x)-q(x))italic_f
( italic_x ) â‰” divide start_ARG 1 end_ARG start_ARG italic_x end_ARG (
italic_p ( italic_x ) - italic_q ( italic_x ) ) is a polynomial of degree
dâˆ’1ğ‘‘1d-1italic_d - 1. Hence, we wish to solve

| âˆ‘i=0dâˆ’1Ï‰iâ¢q(âˆ’i)â¢(x)=fâ¢(x)superscriptsubscriptğ‘–0ğ‘‘1subscriptğœ”ğ‘–superscriptğ‘ğ‘–ğ‘¥ğ‘“ğ‘¥\sum_{i=0}^{d-1}\omega_{i}q^{(-i)}(x)=f(x)âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_q start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) = italic_f ( italic_x ) |   
---|---|---  
  
for
Ï‰0,â€¦,Ï‰dâˆ’1subscriptğœ”0â€¦subscriptğœ”ğ‘‘1\omega_{0},\dots,\omega_{d-1}italic_Ï‰
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â€¦ , italic_Ï‰ start_POSTSUBSCRIPT
italic_d - 1 end_POSTSUBSCRIPT. Equating the polynomial coefficients, this is
a linear system of dğ‘‘ditalic_d equations and dğ‘‘ditalic_d unknowns. It
remains to show that this system has full-rank or, equivalently, that the set
of polynomials
{q(âˆ’i)}iâˆˆ[d]subscriptsuperscriptğ‘ğ‘–ğ‘–delimited-[]ğ‘‘\\{q^{(-i)}\\}_{i\in[d]}{
italic_q start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT }
start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT forms a basis
for the vector space of polynomials of degree â‰¤dâˆ’1absentğ‘‘1\leq d-1â‰¤
italic_d - 1.

Let
zâ‰”âˆiâˆˆ[d]âˆ’Î¸iâ‰”ğ‘§subscriptproductğ‘–delimited-[]ğ‘‘subscriptğœƒğ‘–z\coloneqq\prod_{i\in[d]}-\theta_{i}italic_z
â‰” âˆ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT -
italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT and wiâ‰”(âˆjâ‰
i(Î¸iâˆ’1âˆ’Î¸jâˆ’1))âˆ’1â‰”subscriptğ‘¤ğ‘–superscriptsubscriptproductğ‘—ğ‘–superscriptsubscriptğœƒğ‘–1superscriptsubscriptğœƒğ‘—11w_{i}\coloneqq\left(\prod_{j\neq
i}(\theta_{i}^{-1}-\theta_{j}^{-1})\right)^{-1}italic_w start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT â‰” ( âˆ start_POSTSUBSCRIPT italic_j â‰ italic_i
end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT - italic_Î¸ start_POSTSUBSCRIPT
italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) )
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT and define

| â„“â¢(x)â‰”qâ¢(x)z=(xâˆ’Î¸0âˆ’1)â¢(xâˆ’Î¸1âˆ’1)â¢â‹¯â¢(xâˆ’Î¸dâˆ’1âˆ’1)andâ„“(âˆ’i)â¢(x)â‰”â„“â¢(x)â¢wixâˆ’Î¸iâˆ’1.formulae-sequenceâ‰”â„“ğ‘¥ğ‘ğ‘¥ğ‘§ğ‘¥superscriptsubscriptğœƒ01ğ‘¥superscriptsubscriptğœƒ11â‹¯ğ‘¥superscriptsubscriptğœƒğ‘‘11â‰”andsuperscriptâ„“ğ‘–ğ‘¥â„“ğ‘¥subscriptğ‘¤ğ‘–ğ‘¥superscriptsubscriptğœƒğ‘–1\ell(x)\coloneqq\frac{q(x)}{z}=(x-\theta_{0}^{-1})(x-\theta_{1}^{-1})\cdots(x-% \theta_{d-1}^{-1})\quad\text{and}\quad\ell^{(-i)}(x)\coloneqq\ell(x)\frac{w_{i% }}{x-\theta_{i}^{-1}}.roman_â„“ ( italic_x ) â‰” divide start_ARG italic_q ( italic_x ) end_ARG start_ARG italic_z end_ARG = ( italic_x - italic_Î¸ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) ( italic_x - italic_Î¸ start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) â‹¯ ( italic_x - italic_Î¸ start_POSTSUBSCRIPT italic_d - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) and roman_â„“ start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) â‰” roman_â„“ ( italic_x ) divide start_ARG italic_w start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG italic_x - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT end_ARG . |   
---|---|---  
  
Then
{â„“(âˆ’i)}iâˆˆ[d]subscriptsuperscriptâ„“ğ‘–ğ‘–delimited-[]ğ‘‘\\{\ell^{(-i)}\\}_{i\in[d]}{
roman_â„“ start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT }
start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT is exactly the
Lagrange polynomial basis for interpolating points at
Î¸0âˆ’1,â€¦,Î¸dâˆ’1âˆ’1superscriptsubscriptğœƒ01â€¦superscriptsubscriptğœƒğ‘‘11\theta_{0}^{-1},\dots,\theta_{d-1}^{-1}italic_Î¸
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1
end_POSTSUPERSCRIPT , â€¦ , italic_Î¸ start_POSTSUBSCRIPT italic_d - 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT; further, we
have

| q(âˆ’i)â¢(x)=qâ¢(x)âˆ’Î¸iâ¢(xâˆ’Î¸iâˆ’1)=âˆ’zÎ¸iâ¢wiâ¢â„“(âˆ’i)â¢(x),superscriptğ‘ğ‘–ğ‘¥ğ‘ğ‘¥subscriptğœƒğ‘–ğ‘¥superscriptsubscriptğœƒğ‘–1ğ‘§subscriptğœƒğ‘–subscriptğ‘¤ğ‘–superscriptâ„“ğ‘–ğ‘¥q^{(-i)}(x)=\frac{q(x)}{-\theta_{i}(x-\theta_{i}^{-1})}=\frac{-z}{\theta_{i}w_% {i}}\ell^{(-i)}(x),italic_q start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) = divide start_ARG italic_q ( italic_x ) end_ARG start_ARG - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_x - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) end_ARG = divide start_ARG - italic_z end_ARG start_ARG italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_w start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG roman_â„“ start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) , |   
---|---|---  
  
and since the Î¸isubscriptğœƒğ‘–\theta_{i}italic_Î¸ start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT are distinct and non-zero,
âˆ’Î¸iâ¢zwisubscriptğœƒğ‘–ğ‘§subscriptğ‘¤ğ‘–\frac{-\theta_{i}z}{w_{i}}divide
start_ARG - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_z
end_ARG start_ARG italic_w start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT
end_ARG is non-zero. It follows from Lagrange interpolation that

| fâ¢(x)=âˆ‘iâˆˆ[d]fâ¢(Î¸iâˆ’1)â¢â„“(âˆ’i)â¢(x)=âˆ‘iâˆˆ[d]fâ¢(Î¸iâˆ’1)â¢âˆ’Î¸iâ¢wizâ¢q(âˆ’i)â¢(x)ğ‘“ğ‘¥subscriptğ‘–delimited-[]ğ‘‘ğ‘“superscriptsubscriptğœƒğ‘–1superscriptâ„“ğ‘–ğ‘¥subscriptğ‘–delimited-[]ğ‘‘ğ‘“superscriptsubscriptğœƒğ‘–1subscriptğœƒğ‘–subscriptğ‘¤ğ‘–ğ‘§superscriptğ‘ğ‘–ğ‘¥f(x)=\sum_{i\in[d]}f(\theta_{i}^{-1})\ell^{(-i)}(x)=\sum_{i\in[d]}f(\theta_{i}% ^{-1})\frac{-\theta_{i}w_{i}}{z}q^{(-i)}(x)italic_f ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_f ( italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) roman_â„“ start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_f ( italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) divide start_ARG - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_w start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG italic_z end_ARG italic_q start_POSTSUPERSCRIPT ( - italic_i ) end_POSTSUPERSCRIPT ( italic_x ) |   
---|---|---  
  
and so

| Ï‰i=fâ¢(Î¸iâˆ’1)â¢âˆ’Î¸iâ¢wiz.subscriptğœ”ğ‘–ğ‘“superscriptsubscriptğœƒğ‘–1subscriptğœƒğ‘–subscriptğ‘¤ğ‘–ğ‘§\omega_{i}=f(\theta_{i}^{-1})\frac{-\theta_{i}w_{i}}{z}.italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = italic_f ( italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT ) divide start_ARG - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_w start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG italic_z end_ARG . |  | (5.3)  
---|---|---|---  
  
âˆ

It will be useful to define the prefix sums of the geometric series by

| Î³nâ¢(Î¸)â‰”1+Î¸+Î¸2+â‹¯+Î¸nâˆ’1=âˆ‘i=0nâˆ’1Î¸i.â‰”subscriptğ›¾ğ‘›ğœƒ1ğœƒsuperscriptğœƒ2â‹¯superscriptğœƒğ‘›1superscriptsubscriptğ‘–0ğ‘›1superscriptğœƒğ‘–\gamma_{n}(\theta)\coloneqq 1+\theta+\theta^{2}+\dots+\theta^{n-1}=\sum_{i=0}^% {n-1}\theta^{i}.italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ ) â‰” 1 + italic_Î¸ + italic_Î¸ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + â‹¯ + italic_Î¸ start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Î¸ start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT . |   
---|---|---  
  
with Î³âˆâ¢(Î¸)=1/(1âˆ’Î¸)subscriptğ›¾ğœƒ11ğœƒ\gamma_{\infty}(\theta)=1/(1-\theta)italic_Î³ start_POSTSUBSCRIPT âˆ end_POSTSUBSCRIPT ( italic_Î¸ ) = 1 / ( 1 - italic_Î¸ ) and Î³0â¢(Î¸)=0subscriptğ›¾0ğœƒ0\gamma_{0}(\theta)=0italic_Î³ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT ( italic_Î¸ ) = 0. When |Î¸|<1ğœƒ1|\theta|<1| italic_Î¸ | < 1, we have of course

| Î³nâ¢(Î¸)=âˆ‘i=0nâˆ’1Î¸i=1âˆ’Î¸n1âˆ’Î¸.subscriptğ›¾ğ‘›ğœƒsuperscriptsubscriptğ‘–0ğ‘›1superscriptğœƒğ‘–1superscriptğœƒğ‘›1ğœƒ\gamma_{n}(\theta)=\sum_{i=0}^{n-1}\theta^{i}=\frac{1-\theta^{n}}{1-\theta}.italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ ) = âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Î¸ start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT = divide start_ARG 1 - italic_Î¸ start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT end_ARG start_ARG 1 - italic_Î¸ end_ARG . |  | (5.4)  
---|---|---|---  
  
(This use of Î³ğ›¾\gammaitalic_Î³ is unrelated to the
Î³2â¢(A)subscriptğ›¾2ğ´\gamma_{2}(A)italic_Î³ start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT ( italic_A ) factorization norm discussed earlier.)

######  Lemma 5.3.

Let C(n)=Mâ¡(sâ¢(x),n)superscriptğ¶ğ‘›Mğ‘
ğ‘¥ğ‘›C^{(n)}=\operatorname{M}(s(x),n)italic_C start_POSTSUPERSCRIPT (
italic_n ) end_POSTSUPERSCRIPT = roman_M ( italic_s ( italic_x ) , italic_n )
for a rational function

| sâ¢(x)=1+xâ¢(âˆ‘i=0dâˆ’1Ï‰^i1âˆ’Î¸^iâ¢x),ğ‘ ğ‘¥1ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscript^ğœ”ğ‘–1subscript^ğœƒğ‘–ğ‘¥s(x)=1+x\left(\sum_{i=0}^{d-1}\frac{\hat{\omega}_{i}}{1-\hat{\theta}_{i}x}% \right),italic_s ( italic_x ) = 1 + italic_x ( âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT divide start_ARG over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG 1 - over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x end_ARG ) , |   
---|---|---  
  
for distinct Î¸^isubscript^ğœƒğ‘–\hat{\theta}_{i}over^ start_ARG italic_Î¸
end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT as per the assumptions
of LemmaÂ 5.2. Then, there exists a closed form expression for the sensitivity
of C(n)superscriptğ¶ğ‘›C^{(n)}italic_C start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT,
sensâ¡(C(n))=â€–C(n)â€–1â†’2senssuperscriptğ¶ğ‘›subscriptnormsuperscriptğ¶ğ‘›â†’12\operatorname{sens}(C^{(n)})=\|C^{(n)}\|_{1\to
2}roman_sens ( italic_C start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT
) = âˆ¥ italic_C start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT âˆ¥
start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT allowing computation in time and
space ğ’ªâ¢(d2â¢logâ¡n)ğ’ªsuperscriptğ‘‘2ğ‘›\mathcal{O}(d^{2}\log
n)caligraphic_O ( italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT
roman_log italic_n ).

###### Proof.

The squared sensitivity can be computed as

| sens2â¡(C)=âˆ‘i=0nâˆ’1si2superscriptsens2ğ¶superscriptsubscriptğ‘–0ğ‘›1superscriptsubscriptğ‘ ğ‘–2\displaystyle\operatorname{sens}^{2}(C)=\sum_{i=0}^{n-1}s_{i}^{2}roman_sens start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_C ) = âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_s start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | =1+âˆ‘i=0nâˆ’2(âˆ‘jâˆˆ[d]Ï‰^jâ¢Î¸^ji)2absent1superscriptsubscriptğ‘–0ğ‘›2superscriptsubscriptğ‘—delimited-[]ğ‘‘subscript^ğœ”ğ‘—subscriptsuperscript^ğœƒğ‘–ğ‘—2\displaystyle=1+\sum_{i=0}^{n-2}\left(\sum_{j\in[d]}\hat{\omega}_{j}\hat{% \theta}^{i}_{j}\right)^{2}= 1 + âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 2 end_POSTSUPERSCRIPT ( âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Î¸ end_ARG start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | by Eq.Â 5.2 |   
---|---|---|---|---  
|  | =1+âˆ‘i=0nâˆ’2(âˆ‘jâˆˆ[d]âˆ‘kâˆˆ[d]Ï‰^jâ¢Ï‰^kâ¢Î¸^jiâ¢Î¸^ki)absent1superscriptsubscriptğ‘–0ğ‘›2subscriptğ‘—delimited-[]ğ‘‘subscriptğ‘˜delimited-[]ğ‘‘subscript^ğœ”ğ‘—subscript^ğœ”ğ‘˜subscriptsuperscript^ğœƒğ‘–ğ‘—subscriptsuperscript^ğœƒğ‘–ğ‘˜\displaystyle=1+\sum_{i=0}^{n-2}\left(\sum_{j\in[d]}\sum_{k\in[d]}\hat{\omega}% _{j}\hat{\omega}_{k}\hat{\theta}^{i}_{j}\hat{\theta}^{i}_{k}\right)= 1 + âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 2 end_POSTSUPERSCRIPT ( âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ [ italic_d ] end_POSTSUBSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT over^ start_ARG italic_Î¸ end_ARG start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Î¸ end_ARG start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) |   
|  | =1+âˆ‘jâˆˆ[d]âˆ‘kâˆˆ[d](âˆ‘i=0nâˆ’2Ï‰^jâ¢Ï‰^kâ¢(Î¸^jâ¢Î¸^k)i)absent1subscriptğ‘—delimited-[]ğ‘‘subscriptğ‘˜delimited-[]ğ‘‘superscriptsubscriptğ‘–0ğ‘›2subscript^ğœ”ğ‘—subscript^ğœ”ğ‘˜superscriptsubscript^ğœƒğ‘—subscript^ğœƒğ‘˜ğ‘–\displaystyle=1+\sum_{j\in[d]}\sum_{k\in[d]}\left(\sum_{i=0}^{n-2}\hat{\omega}% _{j}\hat{\omega}_{k}(\hat{\theta}_{j}\hat{\theta}_{k})^{i}\right)= 1 + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ [ italic_d ] end_POSTSUBSCRIPT ( âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 2 end_POSTSUPERSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) |   
|  | =1+âˆ‘jâˆˆ[d]âˆ‘kâˆˆ[d]Ï‰^jâ¢Ï‰^kâ¢Î³nâˆ’1â¢(Î¸^jâ¢Î¸^k),absent1subscriptğ‘—delimited-[]ğ‘‘subscriptğ‘˜delimited-[]ğ‘‘subscript^ğœ”ğ‘—subscript^ğœ”ğ‘˜subscriptğ›¾ğ‘›1subscript^ğœƒğ‘—subscript^ğœƒğ‘˜\displaystyle=1+\sum_{j\in[d]}\sum_{k\in[d]}\hat{\omega}_{j}\hat{\omega}_{k}% \gamma_{n-1}(\hat{\theta}_{j}\hat{\theta}_{k}),= 1 + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ [ italic_d ] end_POSTSUBSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT ( over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT over^ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) , |   
  
and taking a square root completes the proof. âˆ

######  Lemma 5.4.

Let
B(n)=A(n)â¢(C(n))âˆ’1=A(n)â¢Mâ¡(râ¢(x),n)=Mâ¡(râ¢(x)/(1âˆ’x),n)superscriptğµğ‘›superscriptğ´ğ‘›superscriptsuperscriptğ¶ğ‘›1superscriptğ´ğ‘›Mğ‘Ÿğ‘¥ğ‘›Mğ‘Ÿğ‘¥1ğ‘¥ğ‘›B^{(n)}=A^{(n)}(C^{(n)})^{-1}=A^{(n)}\operatorname{M}(r(x),n)=\operatorname{M}%
(r(x)/(1-x),n)italic_B start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT
= italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT ( italic_C
start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT
- 1 end_POSTSUPERSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT roman_M ( italic_r ( italic_x ) , italic_n ) = roman_M (
italic_r ( italic_x ) / ( 1 - italic_x ) , italic_n ) for a rational function

| râ¢(x)=1+xâ¢(âˆ‘i=0dâˆ’1Ï‰i1âˆ’Î¸iâ¢x)ğ‘Ÿğ‘¥1ğ‘¥superscriptsubscriptğ‘–0ğ‘‘1subscriptğœ”ğ‘–1subscriptğœƒğ‘–ğ‘¥r(x)=1+x\left(\sum_{i=0}^{d-1}\frac{\omega_{i}}{1-\theta_{i}x}\right)italic_r ( italic_x ) = 1 + italic_x ( âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_d - 1 end_POSTSUPERSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_x end_ARG ) |   
---|---|---  
  
for distinct Î¸isubscriptğœƒğ‘–\theta_{i}italic_Î¸ start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT as per the assumptions of LemmaÂ 5.2. Then, there
exists a closed form expression for the variance induced in the
nğ‘›nitalic_nth prefix sum,
â€–B(n)â€–2â†’âˆ2subscriptsuperscriptnormsuperscriptğµğ‘›2â†’2\|B^{(n)}\|^{2}_{2\to\infty}âˆ¥
italic_B start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT âˆ¥
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 2 â†’ âˆ
end_POSTSUBSCRIPT allowing computation in time and space
ğ’ªâ¢(d2â¢logâ¡n)ğ’ªsuperscriptğ‘‘2ğ‘›\mathcal{O}(d^{2}\log n)caligraphic_O (
italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_log italic_n ).

###### Proof.

In order to make our notation more compact, we will compute sensitivity for an
arbitrary row index nğ‘›nitalic_n of
Mâ¡(râ¢(x)/(1âˆ’x),n+1)Mğ‘Ÿğ‘¥1ğ‘¥ğ‘›1\operatorname{M}(r(x)/(1-x),n+1)roman_M
( italic_r ( italic_x ) / ( 1 - italic_x ) , italic_n + 1 ). Since
multiplication by (1âˆ’x)âˆ’1superscript1ğ‘¥1(1-x)^{-1}( 1 - italic_x )
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT corresponds to taking prefix
sums, we know B=Mâ¡(t)ğµMğ‘¡B=\operatorname{M}(t)italic_B = roman_M ( italic_t
) where t0=r0=1subscriptğ‘¡0subscriptğ‘Ÿ01t_{0}=r_{0}=1italic_t
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT = italic_r start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT = 1 and for any n>0ğ‘›0n>0italic_n > 0,

| tnâ‰”âˆ‘i=0nri=1+âˆ‘jâˆˆ[d]âˆ‘i=0nâˆ’1Ï‰jâ¢Î¸ji=1+âˆ‘jâˆˆ[d]Ï‰jâ¢Î³nâ¢(Î¸j)â‰”subscriptğ‘¡ğ‘›superscriptsubscriptğ‘–0ğ‘›subscriptğ‘Ÿğ‘–1subscriptğ‘—delimited-[]ğ‘‘superscriptsubscriptğ‘–0ğ‘›1subscriptğœ”ğ‘—subscriptsuperscriptğœƒğ‘–ğ‘—1subscriptğ‘—delimited-[]ğ‘‘subscriptğœ”ğ‘—subscriptğ›¾ğ‘›subscriptğœƒğ‘—t_{n}\coloneqq\sum_{i=0}^{n}r_{i}=1+\sum_{j\in[d]}\sum_{i=0}^{n-1}\omega_{j}% \theta^{i}_{j}=1+\sum_{j\in[d]}\omega_{j}\gamma_{n}(\theta_{j})italic_t start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT â‰” âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT italic_r start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î¸ start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT = 1 + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) |  | (5.5)  
---|---|---|---  
  
and we calculate

| tn2=(1+âˆ‘jâˆˆ[d]Ï‰jâ¢Î³nâ¢(Î¸j))2=1+2â¢âˆ‘jâˆˆ[d]Ï‰jâ¢Î³nâ¢(Î¸j)+âˆ‘jâˆˆ[d]âˆ‘kâˆˆ[d]Ï‰jâ¢Î³nâ¢(Î¸j)â¢Ï‰kâ¢Î³nâ¢(Î¸k).superscriptsubscriptğ‘¡ğ‘›2superscript1subscriptğ‘—delimited-[]ğ‘‘subscriptğœ”ğ‘—subscriptğ›¾ğ‘›subscriptğœƒğ‘—212subscriptğ‘—delimited-[]ğ‘‘subscriptğœ”ğ‘—subscriptğ›¾ğ‘›subscriptğœƒğ‘—subscriptğ‘—delimited-[]ğ‘‘subscriptğ‘˜delimited-[]ğ‘‘subscriptğœ”ğ‘—subscriptğ›¾ğ‘›subscriptğœƒğ‘—subscriptğœ”ğ‘˜subscriptğ›¾ğ‘›subscriptğœƒğ‘˜t_{n}^{2}=\left(1+\sum_{j\in[d]}\omega_{j}\gamma_{n}(\theta_{j})\right)^{2}=1+% 2\sum_{j\in[d]}\omega_{j}\gamma_{n}(\theta_{j})+\sum_{j\in[d]}\sum_{k\in[d]}% \omega_{j}\gamma_{n}(\theta_{j})\omega_{k}\gamma_{n}(\theta_{k}).italic_t start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = ( 1 + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = 1 + 2 âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) . |  | (5.6)  
---|---|---|---  
  
It is thus sufficient to compute

| â€–Bn,:â€–22superscriptsubscriptnormsubscriptğµğ‘›:22\displaystyle\left\|B_{n,:}\right\|_{2}^{2}âˆ¥ italic_B start_POSTSUBSCRIPT italic_n , : end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | =âˆ‘i=0nâˆ’1ti2absentsuperscriptsubscriptğ‘–0ğ‘›1superscriptsubscriptğ‘¡ğ‘–2\displaystyle=\sum_{i=0}^{n-1}t_{i}^{2}= âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |  | (5.7)  
---|---|---|---|---  
|  | =1+âˆ‘i=1nâˆ’1ti2absent1superscriptsubscriptğ‘–1ğ‘›1subscriptsuperscriptğ‘¡2ğ‘–\displaystyle=1+\sum_{i=1}^{n-1}t^{2}_{i}= 1 + âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_t start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT |   
|  | =1+âˆ‘i=1nâˆ’1(1+2â¢âˆ‘jâˆˆ[d]Ï‰jâ¢Î³iâ¢(Î¸j)+âˆ‘jâˆˆ[d]âˆ‘kâˆˆ[d]Ï‰jâ¢Î³iâ¢(Î¸j)â¢Ï‰kâ¢Î³iâ¢(Î¸k)).absent1superscriptsubscriptğ‘–1ğ‘›112subscriptğ‘—delimited-[]ğ‘‘subscriptğœ”ğ‘—subscriptğ›¾ğ‘–subscriptğœƒğ‘—subscriptğ‘—delimited-[]ğ‘‘subscriptğ‘˜delimited-[]ğ‘‘subscriptğœ”ğ‘—subscriptğ›¾ğ‘–subscriptğœƒğ‘—subscriptğœ”ğ‘˜subscriptğ›¾ğ‘–subscriptğœƒğ‘˜\displaystyle=1+\sum_{i=1}^{n-1}\left(1+2\sum_{j\in[d]}\omega_{j}\gamma_{i}(% \theta_{j})+\sum_{j\in[d]}\sum_{k\in[d]}\omega_{j}\gamma_{i}(\theta_{j})\omega% _{k}\gamma_{i}(\theta_{k})\right).= 1 + âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( 1 + 2 âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) ) . |   
  
where we used Eq.Â 5.6 for the last step. Bringing the sum over iğ‘–iitalic_i
inside the sums over the buffers jğ‘—jitalic_j and kğ‘˜kitalic_k, it will be
sufficient to consider the following terms. For any
jâˆˆ[b]ğ‘—delimited-[]ğ‘j\in[b]italic_j âˆˆ [ italic_b ],

| Î“jsubscriptÎ“ğ‘—\displaystyle\Gamma_{j}roman_Î“ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT | â‰”âˆ‘i=1nâˆ’1Ï‰jâ¢Î³iâ¢(Î¸j)=âˆ‘i=1nâˆ’1Ï‰jâ¢(1âˆ’Î¸ji)1âˆ’Î¸jâ¢assumingÂ 0â‰¤Î¸<1â‰”absentsuperscriptsubscriptğ‘–1ğ‘›1subscriptğœ”ğ‘—subscriptğ›¾ğ‘–subscriptğœƒğ‘—superscriptsubscriptğ‘–1ğ‘›1subscriptğœ”ğ‘—1superscriptsubscriptğœƒğ‘—ğ‘–1subscriptğœƒğ‘—assumingÂ 0â‰¤Î¸<1\displaystyle\coloneqq\sum_{i=1}^{n-1}\omega_{j}\gamma_{i}(\theta_{j})=\sum_{i% =1}^{n-1}\frac{\omega_{j}(1-\theta_{j}^{i})}{1-\theta_{j}}~{}~{}\text{assuming% $0\leq\theta<1$}â‰” âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) = âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG assuming 0 â‰¤ italic_Î¸ < 1 |   
---|---|---|---  
|  | =Ï‰j1âˆ’Î¸jâ¢((nâˆ’1)âˆ’âˆ‘i=1nâˆ’1Î¸ji)absentsubscriptğœ”ğ‘—1subscriptğœƒğ‘—ğ‘›1superscriptsubscriptğ‘–1ğ‘›1superscriptsubscriptğœƒğ‘—ğ‘–\displaystyle=\frac{\omega_{j}}{1-\theta_{j}}\left((n-1)-\sum_{i=1}^{n-1}% \theta_{j}^{i}\right)= divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG ( ( italic_n - 1 ) - âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) |   
|  | =Ï‰j1âˆ’Î¸j(nâˆ’Î³n(1,Î¸j)))\displaystyle=\frac{\omega_{j}}{1-\theta_{j}}\left(n-\gamma_{n}(1,\theta_{j}))\right)= divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG ( italic_n - italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( 1 , italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) ) ) |  | (5.8)  
  
Similarly, for any jâˆˆ[d],kâˆˆ[d]formulae-
sequenceğ‘—delimited-[]ğ‘‘ğ‘˜delimited-[]ğ‘‘j\in[d],k\in[d]italic_j âˆˆ [
italic_d ] , italic_k âˆˆ [ italic_d ], let

| Î“j,kâ‰”âˆ‘i=1nâˆ’1â‰”subscriptÎ“ğ‘—ğ‘˜superscriptsubscriptğ‘–1ğ‘›1\displaystyle\Gamma_{j,k}\coloneqq\sum_{i=1}^{n-1}roman_Î“ start_POSTSUBSCRIPT italic_j , italic_k end_POSTSUBSCRIPT â‰” âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT | Ï‰jâ¢Î³iâ¢(Î¸j)â¢Ï‰kâ¢Î³iâ¢(Î¸k)subscriptğœ”ğ‘—subscriptğ›¾ğ‘–subscriptğœƒğ‘—subscriptğœ”ğ‘˜subscriptğ›¾ğ‘–subscriptğœƒğ‘˜\displaystyle\omega_{j}\gamma_{i}(\theta_{j})\omega_{k}\gamma_{i}(\theta_{k})italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT italic_Î³ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) |   
---|---|---|---  
|  | =âˆ‘i=1nâˆ’1Ï‰jâ¢(1âˆ’Î¸ji)1âˆ’Î¸jâ¢Ï‰kâ¢(1âˆ’Î¸ki)1âˆ’Î¸kabsentsuperscriptsubscriptğ‘–1ğ‘›1subscriptğœ”ğ‘—1superscriptsubscriptğœƒğ‘—ğ‘–1subscriptğœƒğ‘—subscriptğœ”ğ‘˜1superscriptsubscriptğœƒğ‘˜ğ‘–1subscriptğœƒğ‘˜\displaystyle=\sum_{i=1}^{n-1}\frac{\omega_{j}(1-\theta_{j}^{i})}{1-\theta_{j}% }\frac{\omega_{k}(1-\theta_{k}^{i})}{1-\theta_{k}}= âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG | since 0â‰¤Î¸<10ğœƒ10\leq\theta<10 â‰¤ italic_Î¸ < 1 |   
|  | =Ï‰jâ¢Ï‰k(1âˆ’Î¸j)â¢(1âˆ’Î¸k)â¢âˆ‘i=1nâˆ’1(1âˆ’Î¸jiâˆ’Î¸ki+(Î¸jâ¢Î¸k)i)absentsubscriptğœ”ğ‘—subscriptğœ”ğ‘˜1subscriptğœƒğ‘—1subscriptğœƒğ‘˜superscriptsubscriptğ‘–1ğ‘›11superscriptsubscriptğœƒğ‘—ğ‘–superscriptsubscriptğœƒğ‘˜ğ‘–superscriptsubscriptğœƒğ‘—subscriptğœƒğ‘˜ğ‘–\displaystyle=\frac{\omega_{j}\omega_{k}}{(1-\theta_{j})(1-\theta_{k})}\sum_{i% =1}^{n-1}\big{(}1-\theta_{j}^{i}-\theta_{k}^{i}+(\theta_{j}\theta_{k})^{i}\big% {)}= divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG start_ARG ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) end_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT + ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) |   
|  | =Ï‰jâ¢Ï‰k(1âˆ’Î¸j)â¢(1âˆ’Î¸k)â¢âˆ‘i=0nâˆ’1(1âˆ’Î¸jiâˆ’Î¸ki+(Î¸jâ¢Î¸k)i)absentsubscriptğœ”ğ‘—subscriptğœ”ğ‘˜1subscriptğœƒğ‘—1subscriptğœƒğ‘˜superscriptsubscriptğ‘–0ğ‘›11superscriptsubscriptğœƒğ‘—ğ‘–superscriptsubscriptğœƒğ‘˜ğ‘–superscriptsubscriptğœƒğ‘—subscriptğœƒğ‘˜ğ‘–\displaystyle=\frac{\omega_{j}\omega_{k}}{(1-\theta_{j})(1-\theta_{k})}\sum_{i% =0}^{n-1}\big{(}1-\theta_{j}^{i}-\theta_{k}^{i}+(\theta_{j}\theta_{k})^{i}\big% {)}= divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG start_ARG ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) end_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT + ( italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) |   
|  | =Ï‰jâ¢Ï‰k(1âˆ’Î¸j)â¢(1âˆ’Î¸k)â¢(nâˆ’Î³nâ¢(1,Î¸j)âˆ’Î³nâ¢(1,Î¸k)+Î³nâ¢(1,Î¸jâ¢Î¸k)).absentsubscriptğœ”ğ‘—subscriptğœ”ğ‘˜1subscriptğœƒğ‘—1subscriptğœƒğ‘˜ğ‘›subscriptğ›¾ğ‘›1subscriptğœƒğ‘—subscriptğ›¾ğ‘›1subscriptğœƒğ‘˜subscriptğ›¾ğ‘›1subscriptğœƒğ‘—subscriptğœƒğ‘˜\displaystyle=\frac{\omega_{j}\omega_{k}}{(1-\theta_{j})(1-\theta_{k})}\big{(}% n-\gamma_{n}(1,\theta_{j})-\gamma_{n}(1,\theta_{k})+\gamma_{n}(1,\theta_{j}% \theta_{k})\big{)}.= divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG start_ARG ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) end_ARG ( italic_n - italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( 1 , italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) - italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( 1 , italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) + italic_Î³ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT ( 1 , italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) ) . |  | (5.9)  
  
Putting everything together we have

| â€–Bn,:â€–22=âˆ‘i=0nâˆ’1ti2=n+2â¢âˆ‘jâˆˆ[d]Î“j+âˆ‘jâˆˆ[d]âˆ‘kâˆˆ[d]Î“j,k.superscriptsubscriptnormsubscriptğµğ‘›:22superscriptsubscriptğ‘–0ğ‘›1superscriptsubscriptğ‘¡ğ‘–2ğ‘›2subscriptğ‘—delimited-[]ğ‘‘subscriptÎ“ğ‘—subscriptğ‘—delimited-[]ğ‘‘subscriptğ‘˜delimited-[]ğ‘‘subscriptÎ“ğ‘—ğ‘˜\left\|B_{n,:}\right\|_{2}^{2}=\sum_{i=0}^{n-1}t_{i}^{2}=n+2\sum_{j\in[d]}% \Gamma_{j}+\sum_{j\in[d]}\sum_{k\in[d]}\Gamma_{j,k}.âˆ¥ italic_B start_POSTSUBSCRIPT italic_n , : end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT italic_t start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = italic_n + 2 âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ [ italic_d ] end_POSTSUBSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_j , italic_k end_POSTSUBSCRIPT . |  | (5.10)  
---|---|---|---  
  
Since Eq.Â 5.10 computes the L2subscriptğ¿2L_{2}italic_L start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT-norm squared for the row indexed by nğ‘›nitalic_n, and this
quantity is non-decreasing in nğ‘›nitalic_n, it follows that

| â€–B(n)â€–2â†’âˆ=â€–Bnâˆ’1,:â€–22,subscriptnormsuperscriptğµğ‘›â†’2superscriptsubscriptnormsubscriptğµğ‘›1:22\|B^{(n)}\|_{2\to\infty}=\sqrt{\left\|B_{n-1,:}\right\|_{2}^{2}},âˆ¥ italic_B start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT = square-root start_ARG âˆ¥ italic_B start_POSTSUBSCRIPT italic_n - 1 , : end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG , |   
---|---|---  
  
which can be computed using Eq.Â 5.10. âˆ

######  Remark 5.5.

Rearranging Eq.Â 5.10 and in particular expanding the terms
Î“jsubscriptÎ“ğ‘—\Gamma_{j}roman_Î“ start_POSTSUBSCRIPT italic_j
end_POSTSUBSCRIPT (Eq.Â 5.8) and Î“j,ksubscriptÎ“ğ‘—ğ‘˜\Gamma_{j,k}roman_Î“
start_POSTSUBSCRIPT italic_j , italic_k end_POSTSUBSCRIPT (Eq.Â 5.9) reveals
there exists constants
Î±0,Î±1âˆˆâ„subscriptğ›¼0subscriptğ›¼1â„\alpha_{0},\alpha_{1}\in\mathbb{R}italic_Î±
start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , italic_Î± start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT âˆˆ blackboard_R and Ï‰~iâˆˆâ„,Î¸~iâˆˆ(0,1]formulae-
sequencesubscript~ğœ”ğ‘–â„subscript~ğœƒğ‘–01\tilde{\omega}_{i}\in\mathbb{R},\tilde{\theta}_{i}\in(0,1]over~
start_ARG italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆˆ
blackboard_R , over~ start_ARG italic_Î¸ end_ARG start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT âˆˆ ( 0 , 1 ] for
iâˆˆ[d+d2]ğ‘–delimited-[]ğ‘‘superscriptğ‘‘2i\in[d+d^{2}]italic_i âˆˆ [
italic_d + italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ] such that

| â€–B(n)â€–2â†’âˆ=Î±0+Î±1â‹…n+âˆ‘iâˆˆ[d+d2]Ï‰~â¢Î¸~nâˆ’1subscriptnormsuperscriptğµğ‘›â†’2subscriptğ›¼0â‹…subscriptğ›¼1ğ‘›subscriptğ‘–delimited-[]ğ‘‘superscriptğ‘‘2~ğœ”superscript~ğœƒğ‘›1\|B^{(n)}\|_{2\to\infty}=\alpha_{0}+\alpha_{1}\cdot n+\sum_{i\in[d+d^{2}]}% \tilde{\omega}\tilde{\theta}^{n-1}âˆ¥ italic_B start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT = italic_Î± start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT + italic_Î± start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â‹… italic_n + âˆ‘ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d + italic_d start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT over~ start_ARG italic_Ï‰ end_ARG over~ start_ARG italic_Î¸ end_ARG start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT |   
---|---|---  
  
where in particular

| Î±1=1+2â¢âˆ‘jâˆˆ[d]Ï‰j1âˆ’Î¸j+âˆ‘jâˆˆ[d]âˆ‘kâˆˆ[d]Ï‰jâ¢Ï‰k(1âˆ’Î¸j)â¢(1âˆ’Î¸k).subscriptğ›¼112subscriptğ‘—delimited-[]ğ‘‘subscriptğœ”ğ‘—1subscriptğœƒğ‘—subscriptğ‘—delimited-[]ğ‘‘subscriptğ‘˜delimited-[]ğ‘‘subscriptğœ”ğ‘—subscriptğœ”ğ‘˜1subscriptğœƒğ‘—1subscriptğœƒğ‘˜\alpha_{1}=1+2\sum_{j\in[d]}\frac{\omega_{j}}{1-\theta_{j}}+\sum_{j\in[d]}\sum% _{k\in[d]}\frac{\omega_{j}\omega_{k}}{(1-\theta_{j})(1-\theta_{k})}.italic_Î± start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 1 + 2 âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG start_ARG 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT end_ARG + âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_d ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_k âˆˆ [ italic_d ] end_POSTSUBSCRIPT divide start_ARG italic_Ï‰ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT italic_Ï‰ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT end_ARG start_ARG ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_j end_POSTSUBSCRIPT ) ( 1 - italic_Î¸ start_POSTSUBSCRIPT italic_k end_POSTSUBSCRIPT ) end_ARG . |   
---|---|---  
  
We must have Î±1â‰¥0subscriptğ›¼10\alpha_{1}\geq 0italic_Î±
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â‰¥ 0 as for a valid factorization the
norm must remain positive for all nğ‘›nitalic_n, and
limnâ†’âˆÏ‰~iâ¢Î¸~nâˆ’1=0subscriptâ†’ğ‘›subscript~ğœ”ğ‘–superscript~ğœƒğ‘›10\lim_{n\rightarrow\infty}\tilde{\omega}_{i}\tilde{\theta}^{n-1}=0roman_lim
start_POSTSUBSCRIPT italic_n â†’ âˆ end_POSTSUBSCRIPT over~ start_ARG
italic_Ï‰ end_ARG start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT over~
start_ARG italic_Î¸ end_ARG start_POSTSUPERSCRIPT italic_n - 1
end_POSTSUPERSCRIPT = 0 (or another constant
Ï‰~isubscript~ğœ”ğ‘–\tilde{\omega}_{i}over~ start_ARG italic_Ï‰ end_ARG
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT if
Î¸~i=1subscript~ğœƒğ‘–1\tilde{\theta}_{i}=1over~ start_ARG italic_Î¸ end_ARG
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1). For all the BLTs we
consider (and we believe all useful BLTs), we find
Î±1>0subscriptğ›¼10\alpha_{1}>0italic_Î± start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT > 0. Since sensitivity, LemmaÂ 5.3, is non-decreasing in
nğ‘›nitalic_n, for any such BLT, eventually
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr must grow linearly. Hence, one
must either increase dğ‘‘ditalic_d with nğ‘›nitalic_n or optimize the BLT for
a specific nğ‘›nitalic_n in order to hope for good performance. In particular,
by optimizing for a specific nğ‘›nitalic_n (Â§5.2), we must keep
Î±ğ›¼\alphaitalic_Î± small enough that the
Î±1â¢nsubscriptğ›¼1ğ‘›\alpha_{1}nitalic_Î± start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT italic_n term remains relatively small (say, of the same
order as Î±0)\alpha_{0})italic_Î± start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT ).
However, for larger nğ‘›nitalic_n this term can quickly explode; we see
exactly this behavior in FigureÂ 3 (Left column).

###  5.2 Direct Optimization of BLTs

Inspection of LemmasÂ 5.2, 5.3 andÂ 5.4 reveals that the function
(Î¸,Î¸^)â†’MaxErrâ†’ğœƒ^ğœƒMaxErr(\theta,\hat{\theta})\rightarrow\operatorname{MaxErr}(
italic_Î¸ , over^ start_ARG italic_Î¸ end_ARG ) â†’ roman_MaxErr is in fact
differentiable. With this result, together with the automatic differentiation
capabilities of JAX \parencitejax2018github, we can in fact directly optimize
for rational functions of a given degree dğ‘‘ditalic_d which minimize
MaxErrMaxErr\operatorname{MaxErr}roman_MaxErr for a given number of steps
nğ‘›nitalic_n.

Some care is needed in the implementation. In particular, we find:

  * â€¢

Using float64 precision is necessary, particularly when optimizing for
n>106ğ‘›superscript106n>10^{6}italic_n > 10 start_POSTSUPERSCRIPT 6
end_POSTSUPERSCRIPT.

  * â€¢

As nğ‘›nitalic_n becomes large,
maxiâˆˆ[d]â¡Î¸isubscriptğ‘–delimited-[]ğ‘‘subscriptğœƒğ‘–\max_{i\in[d]}\theta_{i}roman_max
start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT italic_Î¸
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT tends to 1. Eqs.Â 5.4, 5.8 andÂ
5.9 can be numerically unstable in such situations; this can be remedied by
switching to a Taylor-series approximation taken around
Î¸=1ğœƒ1\theta=1italic_Î¸ = 1 for Î¸ğœƒ\thetaitalic_Î¸ sufficiently near (or
equal to) 1.

  * â€¢

The optimization is more stable (particularly for larger nğ‘›nitalic_n) if we
add a barrier function

| â„“â¢(Î¸,Ï‰)=10âˆ’7â¢âˆ‘iâˆˆ[d]âˆ’logâ¡(Î¸i)âˆ’logâ¡(Ï‰i)â„“ğœƒğœ”superscript107subscriptğ‘–delimited-[]ğ‘‘subscriptğœƒğ‘–subscriptğœ”ğ‘–\ell(\theta,\omega)=10^{-7}\sum_{i\in[d]}-\log(\theta_{i})-\log(\omega_{i})roman_â„“ ( italic_Î¸ , italic_Ï‰ ) = 10 start_POSTSUPERSCRIPT - 7 end_POSTSUPERSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i âˆˆ [ italic_d ] end_POSTSUBSCRIPT - roman_log ( italic_Î¸ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) - roman_log ( italic_Ï‰ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) |   
---|---|---  
  
to ensure these parameters remain strictly positive.

  * â€¢

For large nğ‘›nitalic_n (e.g n>107ğ‘›superscript107n>10^{7}italic_n > 10
start_POSTSUPERSCRIPT 7 end_POSTSUPERSCRIPT), larger numbers of buffers
dğ‘‘ditalic_d can make the optimization less stable. For example, with our
current implementation we find for n=108ğ‘›superscript108n=10^{8}italic_n = 10
start_POSTSUPERSCRIPT 8 end_POSTSUPERSCRIPT, optimizing for more than
d=6ğ‘‘6d=6italic_d = 6 buffers actually slightly decreases performance (while
theoretically it should only help).

With the above setup, we find the L-BFGS optimizer works well. Convergence
generally takes less than a second running on CPUs on a modern
workstration222222There is approximately 5-15 seconds of overhead for JAX to
just-in-time compile the loss function; this is only incurred once even if
mechanisms are optimized for many different nğ‘›nitalic_n., even from a naive
initialization (initialization from SectionÂ 4 would likely require even fewer
iterations). Numerical results for these Opt-BLT mechanisms are given in
FiguresÂ 1 andÂ 3.

Proving the convergence properties of this approach and deriving more robust
optimization algorithms are interesting directions for future work.

###  5.3 Derivation of the Inverse BLT Parameterization

We now show that the matrix-power representation of a rational function
râ¢(x)ğ‘Ÿğ‘¥r(x)italic_r ( italic_x ) (see LemmaÂ 3.2) can be converted to a
matrix-power representation for its reciprocal 1/râ¢(x)1ğ‘Ÿğ‘¥1/r(x)1 /
italic_r ( italic_x ). This is useful for our algorithm. Note that the
dimension of the representation increases by one.

######  Proposition 5.6 (Representation of the reciprocal of a rational
generating function).

Let u,vâˆˆâ„dğ‘¢ğ‘£superscriptâ„ğ‘‘u,v\in\mathbb{R}^{d}italic_u , italic_v âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d end_POSTSUPERSCRIPT and
Wâˆˆâ„dÃ—dğ‘Šsuperscriptâ„ğ‘‘ğ‘‘W\in\mathbb{R}^{d\times d}italic_W âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_d Ã— italic_d end_POSTSUPERSCRIPT.
Assume âŸ¨u,vâŸ©=1ğ‘¢ğ‘£1\langle u,v\rangle=1âŸ¨ italic_u , italic_v âŸ© =
1.232323This assumption is only made for simplicity and holds without loss of
generality, as we can always rescale the function by
râ¢(0)=uTâ¢vğ‘Ÿ0superscriptğ‘¢ğ‘‡ğ‘£r(0)=u^{T}vitalic_r ( 0 ) = italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_v: That is, let
r^â¢(x)â‰”râ¢(x)/râ¢(0)â‰”^ğ‘Ÿğ‘¥ğ‘Ÿğ‘¥ğ‘Ÿ0\widehat{r}(x)\coloneqq
r(x)/r(0)over^ start_ARG italic_r end_ARG ( italic_x ) â‰” italic_r ( italic_x
) / italic_r ( 0 ), apply the result, and rescale back
1/râ¢(x)=râ¢(0)â‹…1/r^â¢(x)1ğ‘Ÿğ‘¥â‹…ğ‘Ÿ01^ğ‘Ÿğ‘¥1/r(x)=r(0)\cdot
1/\widehat{r}(x)1 / italic_r ( italic_x ) = italic_r ( 0 ) â‹… 1 / over^
start_ARG italic_r end_ARG ( italic_x ). Define
râ¢(x)=âˆ‘k=0âˆuTâ¢Wkâ¢vâ‹…xkğ‘Ÿğ‘¥superscriptsubscriptğ‘˜0â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£superscriptğ‘¥ğ‘˜r(x)=\sum_{k=0}^{\infty}u^{T}W^{k}v\cdot
x^{k}italic_r ( italic_x ) = âˆ‘ start_POSTSUBSCRIPT italic_k = 0
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v â‹… italic_x
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT. Then

| 1râ¢(x)1ğ‘Ÿğ‘¥\displaystyle\frac{1}{r(x)}divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) end_ARG | =1âˆ’âˆ‘â„“=1âˆuTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1â¢vâ‹…xâ„“absent1superscriptsubscriptâ„“1â‹…superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘£superscriptğ‘¥â„“\displaystyle=1-\sum_{\ell=1}^{\infty}u^{T}W(W-vu^{T}W)^{\ell-1}v\cdot x^{\ell}= 1 - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_v â‹… italic_x start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT |  | (5.11)  
---|---|---|---|---  
|  | =âˆ‘k=0âˆu~Tâ¢W~0kâ¢v~â‹…xkabsentsuperscriptsubscriptğ‘˜0â‹…superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0ğ‘˜~ğ‘£superscriptğ‘¥ğ‘˜\displaystyle=\sum_{k=0}^{\infty}\widetilde{u}^{T}\widetilde{W}_{0}^{k}% \widetilde{v}\cdot x^{k}= âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG â‹… italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT |  | (5.12)  
  
and

| 1râ¢(x)â‹…(1âˆ’x)=âˆ‘k=0âˆu~Tâ¢W~1kâ¢v~â‹…xk1â‹…ğ‘Ÿğ‘¥1ğ‘¥superscriptsubscriptğ‘˜0â‹…superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š1ğ‘˜~ğ‘£superscriptğ‘¥ğ‘˜\frac{1}{r(x)\cdot(1-x)}=\sum_{k=0}^{\infty}\widetilde{u}^{T}\widetilde{W}_{1}% ^{k}\widetilde{v}\cdot x^{k}divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) â‹… ( 1 - italic_x ) end_ARG = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG â‹… italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT |  | (5.13)  
---|---|---|---  
  
where, for both Î²âˆˆ{0,1}ğ›½01\beta\in\\{0,1\\}italic_Î² âˆˆ { 0 , 1 },

| W~Î²subscript~ğ‘Šğ›½\displaystyle\widetilde{W}_{\beta}over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT italic_Î² end_POSTSUBSCRIPT | =(Î²0â¢â‹¯â¢0vWâˆ’vâ¢uTâ¢W)âˆˆâ„(d+1)Ã—(d+1),absentğ›½0â‹¯0ğ‘£ğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptâ„ğ‘‘1ğ‘‘1\displaystyle=\left(\begin{array}[]{cc}\beta&0\cdots 0\\\ v&W-vu^{T}W\end{array}\right)\in\mathbb{R}^{(d+1)\times(d+1)},= ( start_ARRAY start_ROW start_CELL italic_Î² end_CELL start_CELL 0 â‹¯ 0 end_CELL end_ROW start_ROW start_CELL italic_v end_CELL start_CELL italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_d + 1 ) Ã— ( italic_d + 1 ) end_POSTSUPERSCRIPT , |  | (5.16)  
---|---|---|---|---  
| u~~ğ‘¢\displaystyle\widetilde{u}over~ start_ARG italic_u end_ARG | =(1âˆ’WTâ¢u)âˆˆâ„d+1,absent1superscriptğ‘Šğ‘‡ğ‘¢superscriptâ„ğ‘‘1\displaystyle=\left(\begin{array}[]{c}1\\\ -W^{T}u\end{array}\right)\in\mathbb{R}^{d+1},= ( start_ARRAY start_ROW start_CELL 1 end_CELL end_ROW start_ROW start_CELL - italic_W start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_u end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d + 1 end_POSTSUPERSCRIPT , |  | (5.19)  
| v~~ğ‘£\displaystyle\widetilde{v}over~ start_ARG italic_v end_ARG | =(10â‹®0)âˆˆâ„d+1.absent10â‹®0superscriptâ„ğ‘‘1\displaystyle=\left(\begin{array}[]{c}1\\\ 0\\\ \vdots\\\ 0\end{array}\right)\in\mathbb{R}^{d+1}.= ( start_ARRAY start_ROW start_CELL 1 end_CELL end_ROW start_ROW start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL 0 end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_d + 1 end_POSTSUPERSCRIPT . |  | (5.24)  
  
###### Proof.

To prove the first part of the result (5.11) it suffices to show that

| râ¢(x)â‹…(1âˆ’âˆ‘â„“=1âˆuTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1â¢vâ‹…xâ„“)=1.â‹…ğ‘Ÿğ‘¥1superscriptsubscriptâ„“1â‹…superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘£superscriptğ‘¥â„“1r(x)\cdot\left(1-\sum_{\ell=1}^{\infty}u^{T}W(W-vu^{T}W)^{\ell-1}v\cdot x^{% \ell}\right)=1.italic_r ( italic_x ) â‹… ( 1 - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_v â‹… italic_x start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT ) = 1 . |   
---|---|---  
  
We have

| râ¢(x)â‹…(1âˆ’âˆ‘â„“=1âˆuTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1â¢vâ‹…xâ„“)â‹…ğ‘Ÿğ‘¥1superscriptsubscriptâ„“1â‹…superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘£superscriptğ‘¥â„“\displaystyle\\!\\!r(x)\cdot\left(1-\sum_{\ell=1}^{\infty}u^{T}W(W-vu^{T}W)^{% \ell-1}v\cdot x^{\ell}\right)italic_r ( italic_x ) â‹… ( 1 - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_v â‹… italic_x start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT ) |   
---|---|---  
| =âˆ‘k=0âˆuTâ¢Wkâ¢vâ‹…xkâ‹…(1âˆ’âˆ‘â„“=1âˆuTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1â¢vâ‹…xâ„“)absentsuperscriptsubscriptğ‘˜0â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘˜ğ‘£superscriptğ‘¥ğ‘˜1superscriptsubscriptâ„“1â‹…superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘£superscriptğ‘¥â„“\displaystyle=\sum_{k=0}^{\infty}u^{T}W^{k}v\cdot x^{k}\cdot\left(1-\sum_{\ell% =1}^{\infty}u^{T}W(W-vu^{T}W)^{\ell-1}v\cdot x^{\ell}\right)= âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT italic_v â‹… italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT â‹… ( 1 - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_v â‹… italic_x start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT ) |   
| =âˆ‘i=0âˆ(uTâ¢Wiâ¢vâˆ’âˆ‘â„“=1iuTâ¢Wiâˆ’â„“â¢vâ‹…uTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1â¢v)â‹…xiabsentsuperscriptsubscriptğ‘–0â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘–ğ‘£superscriptsubscriptâ„“1ğ‘–â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘–â„“ğ‘£superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘£superscriptğ‘¥ğ‘–\displaystyle=\sum_{i=0}^{\infty}\left(u^{T}W^{i}v-\sum_{\ell=1}^{i}u^{T}W^{i-% \ell}v\cdot u^{T}W(W-vu^{T}W)^{\ell-1}v\right)\cdot x^{i}= âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT ( italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_v - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_v ) â‹… italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT |   
| =âˆ‘i=0âˆ(uTâ¢Wiâ¢vâˆ’uTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)iâˆ’1â¢vâˆ’âˆ‘â„“=1iâˆ’1uTâ¢Wiâˆ’â„“â¢vâ‹…uTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1â¢v)â‹…xiabsentsuperscriptsubscriptğ‘–0â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘–ğ‘£superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘–1ğ‘£superscriptsubscriptâ„“1ğ‘–1â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘–â„“ğ‘£superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘£superscriptğ‘¥ğ‘–\displaystyle=\sum_{i=0}^{\infty}\left(u^{T}W^{i}v-u^{T}W(W-vu^{T}W)^{i-1}v-% \sum_{\ell=1}^{i-1}u^{T}W^{i-\ell}v\cdot u^{T}W(W-vu^{T}W)^{\ell-1}v\right)% \cdot x^{i}= âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT ( italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_v - italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_v - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_v ) â‹… italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT |   
| =uTâ¢v+âˆ‘i=1âˆuTâ¢(Wiâˆ’Wâ¢(Wâˆ’vâ¢uTâ¢W)iâˆ’1âˆ’âˆ‘â„“=1iâˆ’1Wiâˆ’â„“â¢vâ‹…uTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1)â¢vâ‹…xiabsentsuperscriptğ‘¢ğ‘‡ğ‘£superscriptsubscriptğ‘–1â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘–ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘–1superscriptsubscriptâ„“1ğ‘–1â‹…superscriptğ‘Šğ‘–â„“ğ‘£superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘£superscriptğ‘¥ğ‘–\displaystyle=u^{T}v+\sum_{i=1}^{\infty}u^{T}\left(W^{i}-W(W-vu^{T}W)^{i-1}-% \sum_{\ell=1}^{i-1}W^{i-\ell}v\cdot u^{T}W(W-vu^{T}W)^{\ell-1}\right)v\cdot x^% {i}= italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_v + âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT - italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT ) italic_v â‹… italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT |   
| =1+âˆ‘i=1âˆuTâ¢(Wiâˆ’1âˆ’(Wâˆ’Wâ¢vâ¢uT)iâˆ’1âˆ’âˆ‘â„“=1iâˆ’1Wiâˆ’â„“â¢vâ‹…uTâ¢(Wâˆ’Wâ¢vâ¢uT)â„“âˆ’1)â¢Wâ¢vâ‹…xi,absent1superscriptsubscriptğ‘–1â‹…superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘–1superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–1superscriptsubscriptâ„“1ğ‘–1â‹…superscriptğ‘Šğ‘–â„“ğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡â„“1ğ‘Šğ‘£superscriptğ‘¥ğ‘–\displaystyle=1+\sum_{i=1}^{\infty}u^{T}\left(W^{i-1}-(W-Wvu^{T})^{i-1}-\sum_{% \ell=1}^{i-1}W^{i-\ell}v\cdot u^{T}(W-Wvu^{T})^{\ell-1}\right)Wv\cdot x^{i},= 1 + âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT - ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT ) italic_W italic_v â‹… italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT , |   
  
where the final equality uses the fact

| Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“âˆ’1=Wâ¢((Iâˆ’vâ¢uT)â¢W)â„“âˆ’1=(Wâ¢(Iâˆ’vâ¢uT))â„“âˆ’1â¢W=(Wâˆ’Wâ¢vâ¢uT)â„“âˆ’1â¢W.ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1ğ‘Šsuperscriptğ¼ğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“1superscriptğ‘Šğ¼ğ‘£superscriptğ‘¢ğ‘‡â„“1ğ‘Šsuperscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡â„“1ğ‘ŠW(W-vu^{T}W)^{\ell-1}=W((I-vu^{T})W)^{\ell-1}=(W(I-vu^{T}))^{\ell-1}W=(W-Wvu^{% T})^{\ell-1}W.italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT = italic_W ( ( italic_I - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) italic_W ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT = ( italic_W ( italic_I - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_W = ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_W . |   
---|---|---  
  
Now it suffices to show that, for all iâ‰¥1ğ‘–1i\geq 1italic_i â‰¥ 1, we have

| Wiâˆ’1=(Wâˆ’Wâ¢vâ¢uT)iâˆ’1+âˆ‘â„“=1iâˆ’1Wiâˆ’â„“â¢vâ‹…uTâ¢(Wâˆ’Wâ¢vâ¢uT)â„“âˆ’1.superscriptğ‘Šğ‘–1superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–1superscriptsubscriptâ„“1ğ‘–1â‹…superscriptğ‘Šğ‘–â„“ğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡â„“1W^{i-1}=(W-Wvu^{T})^{i-1}+\sum_{\ell=1}^{i-1}W^{i-\ell}v\cdot u^{T}(W-Wvu^{T})% ^{\ell-1}.italic_W start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT = ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT . |  | (5.25)  
---|---|---|---  
  
We prove EquationÂ 5.25 by induction on iğ‘–iitalic_i. For i=1ğ‘–1i=1italic_i
= 1, the equation is trivially true (both sides are the identity). Assuming
EquationÂ 5.25 holds for a given iâ‰¥1ğ‘–1i\geq 1italic_i â‰¥ 1, we have

| Wisuperscriptğ‘Šğ‘–\displaystyle W^{i}italic_W start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT | =Wâ‹…Wiâˆ’1=((Wâˆ’Wâ¢vâ¢uT)+Wâ¢vâ¢uT)â‹…Wiabsentâ‹…ğ‘Šsuperscriptğ‘Šğ‘–1â‹…ğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘–\displaystyle=W\cdot W^{i-1}=((W-Wvu^{T})+Wvu^{T})\cdot W^{i}= italic_W â‹… italic_W start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT = ( ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) + italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) â‹… italic_W start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT |   
---|---|---|---  
|  | =((Wâˆ’Wâ¢vâ¢uT)+Wâ¢vâ¢uT)â‹…(Wâˆ’Wâ¢vâ¢uT)iâˆ’1+Wâ‹…âˆ‘â„“=1iâˆ’1Wiâˆ’â„“â¢vâ‹…uTâ¢(Wâˆ’Wâ¢vâ¢uT)â„“âˆ’1absentâ‹…ğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–1â‹…ğ‘Šsuperscriptsubscriptâ„“1ğ‘–1â‹…superscriptğ‘Šğ‘–â„“ğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡â„“1\displaystyle=((W-Wvu^{T})+Wvu^{T})\cdot(W-Wvu^{T})^{i-1}+W\cdot\sum_{\ell=1}^% {i-1}W^{i-\ell}v\cdot u^{T}(W-Wvu^{T})^{\ell-1}= ( ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) + italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) â‹… ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT + italic_W â‹… âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT |   
|  | =(Wâˆ’Wâ¢vâ¢uT)i+Wâ¢vâ¢uTâ‹…(Wâˆ’Wâ¢vâ¢uT)iâˆ’1+âˆ‘â„“=1iâˆ’1Wi+1âˆ’â„“â¢vâ‹…uTâ¢(Wâˆ’Wâ¢vâ¢uT)â„“âˆ’1absentsuperscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–â‹…ğ‘Šğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–1superscriptsubscriptâ„“1ğ‘–1â‹…superscriptğ‘Šğ‘–1â„“ğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡â„“1\displaystyle=(W-Wvu^{T})^{i}+Wvu^{T}\cdot(W-Wvu^{T})^{i-1}+\sum_{\ell=1}^{i-1% }W^{i+1-\ell}v\cdot u^{T}(W-Wvu^{T})^{\ell-1}= ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT + italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT â‹… ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i + 1 - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT |   
|  | =(Wâˆ’Wâ¢vâ¢uT)i+âˆ‘â„“=1iWi+1âˆ’â„“â¢vâ‹…uTâ¢(Wâˆ’Wâ¢vâ¢uT)â„“âˆ’1absentsuperscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–superscriptsubscriptâ„“1ğ‘–â‹…superscriptğ‘Šğ‘–1â„“ğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡â„“1\displaystyle=(W-Wvu^{T})^{i}+\sum_{\ell=1}^{i}W^{i+1-\ell}v\cdot u^{T}(W-Wvu^% {T})^{\ell-1}= ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i + 1 - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT |   
|  | âˆ’Wi+1âˆ’iâ¢vâ‹…uTâ¢(Wâˆ’Wâ¢vâ¢uT)iâˆ’1+Wâ¢vâ¢uTâ‹…(Wâˆ’Wâ¢vâ¢uT)iâˆ’1â‹…superscriptğ‘Šğ‘–1ğ‘–ğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–1â‹…ğ‘Šğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–1\displaystyle~{}~{}~{}~{}~{}-W^{i+1-i}v\cdot u^{T}(W-Wvu^{T})^{i-1}+Wvu^{T}% \cdot(W-Wvu^{T})^{i-1}\- italic_W start_POSTSUPERSCRIPT italic_i + 1 - italic_i end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT + italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT â‹… ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT |   
|  | =(Wâˆ’Wâ¢vâ¢uT)i+âˆ‘â„“=1iWi+1âˆ’â„“â¢vâ‹…uTâ¢(Wâˆ’Wâ¢vâ¢uT)â„“âˆ’1,absentsuperscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘–superscriptsubscriptâ„“1ğ‘–â‹…superscriptğ‘Šğ‘–1â„“ğ‘£superscriptğ‘¢ğ‘‡superscriptğ‘Šğ‘Šğ‘£superscriptğ‘¢ğ‘‡â„“1\displaystyle=(W-Wvu^{T})^{i}+\sum_{\ell=1}^{i}W^{i+1-\ell}v\cdot u^{T}(W-Wvu^% {T})^{\ell-1},= ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT italic_W start_POSTSUPERSCRIPT italic_i + 1 - roman_â„“ end_POSTSUPERSCRIPT italic_v â‹… italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ( italic_W - italic_W italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT , |   
  
which establishes that EquationÂ 5.25 holds for the next value of
iğ‘–iitalic_i.

To prove EquationÂ 5.12, we must show that
u~Tâ¢W~00â¢v~=1superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š00~ğ‘£1\widetilde{u}^{T}\widetilde{W}_{0}^{0}\widetilde{v}=1over~
start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT
over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG =
1 and
u~Tâ¢W~0kâ¢v~=âˆ’uTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)kâˆ’1â¢vsuperscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0ğ‘˜~ğ‘£superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘˜1ğ‘£\widetilde{u}^{T}\widetilde{W}_{0}^{k}\widetilde{v}=-u^{T}W(W-vu^{T}W)^{k-1}vover~
start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT
over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG italic_v
end_ARG = - italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT
italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT italic_k - 1
end_POSTSUPERSCRIPT italic_v for kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1. We
immediately have
u~Tâ¢v~=1superscript~ğ‘¢ğ‘‡~ğ‘£1\widetilde{u}^{T}\widetilde{v}=1over~
start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT
over~ start_ARG italic_v end_ARG = 1. By induction we can show that, for all
kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1, we have

| W~0k=(00â¢â‹¯â¢0(Wâˆ’vâ¢uTâ¢W)kâˆ’1â¢v(Wâˆ’vâ¢uTâ¢W)k)âˆˆâ„(d+1)Ã—(d+1).superscriptsubscript~ğ‘Š0ğ‘˜00â‹¯0superscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘˜1ğ‘£superscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘˜superscriptâ„ğ‘‘1ğ‘‘1\widetilde{W}_{0}^{k}=\left(\begin{array}[]{cc}0&0\cdots 0\\\ (W-vu^{T}W)^{k-1}v&(W-vu^{T}W)^{k}\end{array}\right)\in\mathbb{R}^{(d+1)\times% (d+1)}.over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL 0 â‹¯ 0 end_CELL end_ROW start_ROW start_CELL ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT italic_v end_CELL start_CELL ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_d + 1 ) Ã— ( italic_d + 1 ) end_POSTSUPERSCRIPT . |   
---|---|---  
  
From this it follows that
u~Tâ¢W~0kâ¢v~=âˆ’uTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)kâˆ’1â¢vsuperscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0ğ‘˜~ğ‘£superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘˜1ğ‘£\widetilde{u}^{T}\widetilde{W}_{0}^{k}\widetilde{v}=-u^{T}W(W-vu^{T}W)^{k-1}vover~
start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT
over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG italic_v
end_ARG = - italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT
italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT italic_k - 1
end_POSTSUPERSCRIPT italic_v for all kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1, as
required.

More generally, for all Î²âˆˆâ„ğ›½â„\beta\in\mathbb{R}italic_Î² âˆˆ
blackboard_R and kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1,

| W~Î²k=(Î²k0â¢â‹¯â¢0âˆ‘â„“=0kâˆ’1Î²kâˆ’1âˆ’â„“â¢(Wâˆ’vâ¢uTâ¢W)â„“â¢v(Wâˆ’vâ¢uTâ¢W)k)âˆˆâ„(d+1)Ã—(d+1).superscriptsubscript~ğ‘Šğ›½ğ‘˜superscriptğ›½ğ‘˜0â‹¯0superscriptsubscriptâ„“0ğ‘˜1superscriptğ›½ğ‘˜1â„“superscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“ğ‘£superscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šğ‘˜superscriptâ„ğ‘‘1ğ‘‘1\widetilde{W}_{\beta}^{k}=\left(\begin{array}[]{cc}\beta^{k}&0\cdots 0\\\ \sum_{\ell=0}^{k-1}\beta^{k-1-\ell}(W-vu^{T}W)^{\ell}v&(W-vu^{T}W)^{k}\end{% array}\right)\in\mathbb{R}^{(d+1)\times(d+1)}.over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT italic_Î² end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_Î² start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT end_CELL start_CELL 0 â‹¯ 0 end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT italic_Î² start_POSTSUPERSCRIPT italic_k - 1 - roman_â„“ end_POSTSUPERSCRIPT ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT italic_v end_CELL start_CELL ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_d + 1 ) Ã— ( italic_d + 1 ) end_POSTSUPERSCRIPT . |   
---|---|---  
  
Setting Î²=1ğ›½1\beta=1italic_Î² = 1 still gives
u~Tâ¢W~10â¢v~=1superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š10~ğ‘£1\widetilde{u}^{T}\widetilde{W}_{1}^{0}\widetilde{v}=1over~
start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT
over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG =
1 and now

| u~Tâ¢W~1kâ¢v~=1âˆ’âˆ‘â„“=0kâˆ’1uTâ¢Wâ¢(Wâˆ’vâ¢uTâ¢W)â„“â¢v=1+âˆ‘â„“=0kâˆ’1u~Tâ¢W~0â„“+1â¢v~=âˆ‘j=0ku~Tâ¢W~0jâ¢v~superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š1ğ‘˜~ğ‘£1superscriptsubscriptâ„“0ğ‘˜1superscriptğ‘¢ğ‘‡ğ‘Šsuperscriptğ‘Šğ‘£superscriptğ‘¢ğ‘‡ğ‘Šâ„“ğ‘£1superscriptsubscriptâ„“0ğ‘˜1superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0â„“1~ğ‘£superscriptsubscriptğ‘—0ğ‘˜superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0ğ‘—~ğ‘£\widetilde{u}^{T}\widetilde{W}_{1}^{k}\widetilde{v}=1-\sum_{\ell=0}^{k-1}u^{T}% W(W-vu^{T}W)^{\ell}v=1+\sum_{\ell=0}^{k-1}\widetilde{u}^{T}\widetilde{W}_{0}^{% \ell+1}\widetilde{v}=\sum_{j=0}^{k}\widetilde{u}^{T}\widetilde{W}_{0}^{j}% \widetilde{v}over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG = 1 - âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ( italic_W - italic_v italic_u start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT italic_W ) start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT italic_v = 1 + âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ + 1 end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG = âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG |   
---|---|---  
  
for kâ‰¥1ğ‘˜1k\geq 1italic_k â‰¥ 1.

We have
1râ¢(x)=âˆ‘k=0âˆu~Tâ¢W~0kâ¢v~â‹…xk1ğ‘Ÿğ‘¥superscriptsubscriptğ‘˜0â‹…superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0ğ‘˜~ğ‘£superscriptğ‘¥ğ‘˜\frac{1}{r(x)}=\sum_{k=0}^{\infty}\widetilde{u}^{T}\widetilde{W}_{0}^{k}%
\widetilde{v}\cdot x^{k}divide start_ARG 1 end_ARG start_ARG italic_r (
italic_x ) end_ARG = âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG
start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W
end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG â‹… italic_x
start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT and, hence,

| 1râ¢(x)â‹…(1âˆ’x)=(âˆ‘k=0âˆu~Tâ¢W~0kâ¢v~â‹…xk)â‹…(âˆ‘i=0âˆxi)=âˆ‘â„“=0âˆxâ„“â¢âˆ‘j=0â„“u~Tâ¢W~0jâ¢v~=âˆ‘â„“=0âˆu~Tâ¢W~1â„“â¢v~â‹…xâ„“,1â‹…ğ‘Ÿğ‘¥1ğ‘¥â‹…superscriptsubscriptğ‘˜0â‹…superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0ğ‘˜~ğ‘£superscriptğ‘¥ğ‘˜superscriptsubscriptğ‘–0superscriptğ‘¥ğ‘–superscriptsubscriptâ„“0superscriptğ‘¥â„“superscriptsubscriptğ‘—0â„“superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š0ğ‘—~ğ‘£superscriptsubscriptâ„“0â‹…superscript~ğ‘¢ğ‘‡superscriptsubscript~ğ‘Š1â„“~ğ‘£superscriptğ‘¥â„“\frac{1}{r(x)\cdot(1-x)}=\left(\sum_{k=0}^{\infty}\widetilde{u}^{T}\widetilde{% W}_{0}^{k}\widetilde{v}\cdot x^{k}\right)\cdot\left(\sum_{i=0}^{\infty}x^{i}% \right)=\sum_{\ell=0}^{\infty}x^{\ell}\sum_{j=0}^{\ell}\widetilde{u}^{T}% \widetilde{W}_{0}^{j}\widetilde{v}=\sum_{\ell=0}^{\infty}\widetilde{u}^{T}% \widetilde{W}_{1}^{\ell}\widetilde{v}\cdot x^{\ell},divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) â‹… ( 1 - italic_x ) end_ARG = ( âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG â‹… italic_x start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT ) â‹… ( âˆ‘ start_POSTSUBSCRIPT italic_i = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT ) = âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT italic_x start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_j end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG = âˆ‘ start_POSTSUBSCRIPT roman_â„“ = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ end_POSTSUPERSCRIPT over~ start_ARG italic_u end_ARG start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT over~ start_ARG italic_W end_ARG start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT over~ start_ARG italic_v end_ARG â‹… italic_x start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT , |   
---|---|---  
  
which completes the proof. âˆ

##  6 Generalizing the Binary Tree Approach

In this section we prove TheoremÂ 1.2. Compared to TheoremÂ 1.1 this attains a
weaker approximation to the optimal matrix factorization, but is
asymptotically better in terms of space usage.

Our starting point is the binary tree mechanism of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textciteDwork-
continual,CSS11-continual. The binary tree mechanism can be viewed as a
recursive construction of a matrix factorization; see EquationÂ 2.5 for a
precise statement. A recursion of depth â„“â„“\ellroman_â„“ yields a matrix
factorization of size n=2â„“ğ‘›superscript2â„“n=2^{\ell}italic_n = 2
start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT and an algorithm running
in time and space Oâ¢(â„“)ğ‘‚â„“O(\ell)italic_O ( roman_â„“ ). The binary tree
mechanism is within a constant factor of optimal; we will improve the constant
factor to be arbitrarily close to optimal. Our approach is to combine a
recursive construction with the factorization we already developed to prove
TheoremÂ 1.1. We will start with a matrix factorization of size
n1subscriptğ‘›1n_{1}italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT and,
after a recursion of depth â„“â„“\ellroman_â„“, we obtain a matrix
factorization of size n1â„“superscriptsubscriptğ‘›1â„“n_{1}^{\ell}italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“
end_POSTSUPERSCRIPT. The space required is
Oâ¢(â„“â‹…log2â¡n1)ğ‘‚â‹…â„“superscript2subscriptğ‘›1O(\ell\cdot\log^{2}n_{1})italic_O
( roman_â„“ â‹… roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ). Appropriately setting the
parameters yields TheoremÂ 1.2.

First we define the non-cyclic shift matrix
S(n)âˆˆ{0,1}nÃ—nsuperscriptğ‘†ğ‘›superscript01ğ‘›ğ‘›S^{(n)}\in\\{0,1\\}^{n\times
n}italic_S start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT âˆˆ { 0 , 1
} start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT by
Si,j=1â‡”i=j+1iffsubscriptğ‘†ğ‘–ğ‘—1ğ‘–ğ‘—1S_{i,j}=1\iff i=j+1italic_S
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT = 1 â‡” italic_i =
italic_j + 1 for all i,jâˆˆ[n]ğ‘–ğ‘—delimited-[]ğ‘›i,j\in[n]italic_i ,
italic_j âˆˆ [ italic_n ]. If we multply the non-cyclic shift matrix with the
lower-triangular all-ones matrix, it has the effect of zeroing out the
diagonal and producing a strictly lower-triangular matrix. For example,

| S(6)=(000000100000010000001000000100000010)â¢Â andÂ â¢A(6)â¢S(6)=S(6)â¢A(6)=(000000100000110000111000111100111110).superscriptğ‘†6000000100000010000001000000100000010Â andÂ superscriptğ´6superscriptğ‘†6superscriptğ‘†6superscriptğ´6000000100000110000111000111100111110S^{(6)}=\left(\begin{array}[]{cccccc}0&0&0&0&0&0\\\ 1&0&0&0&0&0\\\ 0&1&0&0&0&0\\\ 0&0&1&0&0&0\\\ 0&0&0&1&0&0\\\ 0&0&0&0&1&0\end{array}\right)~{}~{}~{}\text{ and }~{}~{}~{}A^{(6)}S^{(6)}=S^{(% 6)}A^{(6)}=\left(\begin{array}[]{cccccc}0&0&0&0&0&0\\\ 1&0&0&0&0&0\\\ 1&1&0&0&0&0\\\ 1&1&1&0&0&0\\\ 1&1&1&1&0&0\\\ 1&1&1&1&1&0\end{array}\right).italic_S start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) and italic_A start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT italic_S start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT = italic_S start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT italic_A start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) . |   
---|---|---  
  
The non-cyclic shift matrix corresponds to the generating function
hâ¢(x)=xâ„ğ‘¥ğ‘¥h(x)=xitalic_h ( italic_x ) = italic_x â€“ i.e.,
S(n)=Mâ¢(h,n)superscriptğ‘†ğ‘›ğ‘€â„ğ‘›S^{(n)}=M(h,n)italic_S
start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT = italic_M ( italic_h ,
italic_n ).

Given matrices Mâˆˆâ„nÃ—mğ‘€superscriptâ„ğ‘›ğ‘šM\in\mathbb{R}^{n\times
m}italic_M âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã— italic_m
end_POSTSUPERSCRIPT and
Mâ€²âˆˆâ„nâ€²Ã—mâ€²superscriptğ‘€â€²superscriptâ„superscriptğ‘›â€²superscriptğ‘šâ€²M^{\prime}\in\mathbb{R}^{n^{\prime}\times
m^{\prime}}italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT Ã— italic_m start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
end_POSTSUPERSCRIPT, define the Kronecker product

| MâŠ—Mâ€²=(M0,0â‹…Mâ€²M0,1â‹…Mâ€²â‹¯M0,mâˆ’1â‹…Mâ€²M1,0â‹…Mâ€²M1,1â‹…Mâ€²â‹¯M1,mâˆ’1â‹…Mâ€²â‹®â‹®â‹±â‹®Mnâˆ’1,0â‹…Mâ€²Mnâˆ’1,1â‹…Mâ€²â‹¯Mnâˆ’1,mâˆ’1â‹…Mâ€²)âˆˆâ„(nâ‹…nâ€²)Ã—(mâ‹…mâ€²)tensor-productğ‘€superscriptğ‘€â€²â‹…subscriptğ‘€00superscriptğ‘€â€²â‹…subscriptğ‘€01superscriptğ‘€â€²â‹¯â‹…subscriptğ‘€0ğ‘š1superscriptğ‘€â€²â‹…subscriptğ‘€10superscriptğ‘€â€²â‹…subscriptğ‘€11superscriptğ‘€â€²â‹¯â‹…subscriptğ‘€1ğ‘š1superscriptğ‘€â€²â‹®â‹®â‹±â‹®â‹…subscriptğ‘€ğ‘›10superscriptğ‘€â€²â‹…subscriptğ‘€ğ‘›11superscriptğ‘€â€²â‹¯â‹…subscriptğ‘€ğ‘›1ğ‘š1superscriptğ‘€â€²superscriptâ„â‹…ğ‘›superscriptğ‘›â€²â‹…ğ‘šsuperscriptğ‘šâ€²M\otimes M^{\prime}=\left(\begin{array}[]{cccc}M_{0,0}\cdot M^{\prime}&M_{0,1}% \cdot M^{\prime}&\cdots&M_{0,m-1}\cdot M^{\prime}\\\ M_{1,0}\cdot M^{\prime}&M_{1,1}\cdot M^{\prime}&\cdots&M_{1,m-1}\cdot M^{% \prime}\\\ \vdots&\vdots&\ddots&\vdots\\\ M_{n-1,0}\cdot M^{\prime}&M_{n-1,1}\cdot M^{\prime}&\cdots&M_{n-1,m-1}\cdot M^% {\prime}\\\ \end{array}\right)\in\mathbb{R}^{(n\cdot n^{\prime})\times(m\cdot m^{\prime})}italic_M âŠ— italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_M start_POSTSUBSCRIPT 0 , 0 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL start_CELL italic_M start_POSTSUBSCRIPT 0 , 1 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL start_CELL â‹¯ end_CELL start_CELL italic_M start_POSTSUBSCRIPT 0 , italic_m - 1 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL italic_M start_POSTSUBSCRIPT 1 , 0 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL start_CELL italic_M start_POSTSUBSCRIPT 1 , 1 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL start_CELL â‹¯ end_CELL start_CELL italic_M start_POSTSUBSCRIPT 1 , italic_m - 1 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹± end_CELL start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_M start_POSTSUBSCRIPT italic_n - 1 , 0 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL start_CELL italic_M start_POSTSUBSCRIPT italic_n - 1 , 1 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL start_CELL â‹¯ end_CELL start_CELL italic_M start_POSTSUBSCRIPT italic_n - 1 , italic_m - 1 end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_n â‹… italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) Ã— ( italic_m â‹… italic_m start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) end_POSTSUPERSCRIPT |  | (6.1)  
---|---|---|---  
  
by (MâŠ—Mâ€²)i,j=Mi1,j1â‹…Mi2,j2â€²subscripttensor-
productğ‘€superscriptğ‘€â€²ğ‘–ğ‘—â‹…subscriptğ‘€subscriptğ‘–1subscriptğ‘—1subscriptsuperscriptğ‘€â€²subscriptğ‘–2subscriptğ‘—2(M\otimes
M^{\prime})_{i,j}=M_{i_{1},j_{1}}\cdot M^{\prime}_{i_{2},j_{2}}( italic_M âŠ—
italic_M start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) start_POSTSUBSCRIPT
italic_i , italic_j end_POSTSUBSCRIPT = italic_M start_POSTSUBSCRIPT italic_i
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_j start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT end_POSTSUBSCRIPT â‹… italic_M start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT , italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT
end_POSTSUBSCRIPT where
i=i1â‹…nâ€²+i2âˆˆ[nâ‹…nâ€²]ğ‘–â‹…subscriptğ‘–1superscriptğ‘›â€²subscriptğ‘–2delimited-[]â‹…ğ‘›superscriptğ‘›â€²i=i_{1}\cdot
n^{\prime}+i_{2}\in[n\cdot n^{\prime}]italic_i = italic_i start_POSTSUBSCRIPT
1 end_POSTSUBSCRIPT â‹… italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
+ italic_i start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆˆ [ italic_n â‹… italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] and
j=j1â‹…mâ€²+j2âˆˆ[mâ‹…mâ€²]ğ‘—â‹…subscriptğ‘—1superscriptğ‘šâ€²subscriptğ‘—2delimited-[]â‹…ğ‘šsuperscriptğ‘šâ€²j=j_{1}\cdot
m^{\prime}+j_{2}\in[m\cdot m^{\prime}]italic_j = italic_j start_POSTSUBSCRIPT
1 end_POSTSUBSCRIPT â‹… italic_m start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
+ italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆˆ [ italic_m â‹… italic_m
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ]. The Kronecker product has the
â€œmixed-product propertyâ€ with matrix multiplication: We have
(AâŠ—B)â¢(Aâ€²âŠ—Bâ€²)=(Aâ¢Aâ€²)âŠ—(Bâ¢Bâ€²)tensor-productğ´ğµtensor-
productsuperscriptğ´â€²superscriptğµâ€²tensor-
productğ´superscriptğ´â€²ğµsuperscriptğµâ€²(A\otimes B)(A^{\prime}\otimes
B^{\prime})=(AA^{\prime})\otimes(BB^{\prime})( italic_A âŠ— italic_B ) (
italic_A start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âŠ— italic_B
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) = ( italic_A italic_A
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) âŠ— ( italic_B italic_B
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) whenever the matrix dimensions
match so that Aâ¢Aâ€²ğ´superscriptğ´â€²AA^{\prime}italic_A italic_A
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT and
Bâ¢Bâ€²ğµsuperscriptğµâ€²BB^{\prime}italic_B italic_B start_POSTSUPERSCRIPT
â€² end_POSTSUPERSCRIPT are well-defined.

###  6.1 Recursive Matrix Factorization

Without further ado, we present the basis of our recursive construction.
Suppose we are given two matrix factorizations
A(n1)=B1â¢C2superscriptğ´subscriptğ‘›1subscriptğµ1subscriptğ¶2{A}^{(n_{1})}=B_{1}C_{2}italic_A
start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT )
end_POSTSUPERSCRIPT = italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT and
A(n2)=B2â¢C2superscriptğ´subscriptğ‘›2subscriptğµ2subscriptğ¶2{A}^{(n_{2})}=B_{2}C_{2}italic_A
start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT )
end_POSTSUPERSCRIPT = italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT
italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT. We will combine these into
one matrix factorization for
A(n1â‹…n2)superscriptğ´â‹…subscriptğ‘›1subscriptğ‘›2{A}^{(n_{1}\cdot
n_{2})}italic_A start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT â‹… italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT )
end_POSTSUPERSCRIPT.

######  Definition 6.1 (Combining Matrix Factorizations).

For
B1âˆˆâ„n1Ã—n1â€²subscriptğµ1superscriptâ„subscriptğ‘›1superscriptsubscriptğ‘›1â€²B_{1}\in\mathbb{R}^{n_{1}\times
n_{1}^{\prime}}italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT Ã— italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT and
B2âˆˆâ„n2Ã—n2â€²subscriptğµ2superscriptâ„subscriptğ‘›2superscriptsubscriptğ‘›2â€²B_{2}\in\mathbb{R}^{n_{2}\times
n_{2}^{\prime}}italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆˆ
blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT Ã— italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT, define

| B1Â â—‹bÂ B2â‰”(I(n1)âŠ—B2âŸâˆˆâ„(n1â¢n2)Ã—(n1â¢n2â€²)â¢S(n1)â¢B1âŠ—ğŸ(n2)âŸâˆˆâ„(n1â¢n2)Ã—n1â€²)âˆˆâ„(n1â¢n2)Ã—(n1â¢n2â€²+n1â€²),â‰”Â â—‹bÂ subscriptğµ1subscriptğµ2subscriptâŸtensor-productsuperscriptğ¼subscriptğ‘›1subscriptğµ2absentsuperscriptâ„subscriptğ‘›1subscriptğ‘›2subscriptğ‘›1superscriptsubscriptğ‘›2â€²subscriptâŸtensor-productsuperscriptğ‘†subscriptğ‘›1subscriptğµ1superscript1subscriptğ‘›2absentsuperscriptâ„subscriptğ‘›1subscriptğ‘›2superscriptsubscriptğ‘›1â€²superscriptâ„subscriptğ‘›1subscriptğ‘›2subscriptğ‘›1superscriptsubscriptğ‘›2â€²superscriptsubscriptğ‘›1â€²B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}\hskip 1.49994pt}}B_{2}% \coloneqq\big{(}~{}\underbrace{~{}I^{(n_{1})}\otimes B_{2}~{}}_{\in\mathbb{R}^% {(n_{1}n_{2})\times(n_{1}n_{2}^{\prime})}}~{}~{}\underbrace{~{}S^{(n_{1})}B_{1% }\otimes\mathbf{1}^{(n_{2})}~{}}_{\in\mathbb{R}^{(n_{1}n_{2})\times n_{1}^{% \prime}}}~{}\big{)}\in\mathbb{R}^{(n_{1}n_{2})\times(n_{1}n_{2}^{\prime}+n_{1}% ^{\prime})},italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT â‰” ( underâŸ start_ARG italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_ARG start_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) Ã— ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) end_POSTSUPERSCRIPT end_POSTSUBSCRIPT underâŸ start_ARG italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT end_ARG start_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) Ã— italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ) âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) Ã— ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT + italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) end_POSTSUPERSCRIPT , |  | (6.2)  
---|---|---|---  
  
where I(n1)superscriptğ¼subscriptğ‘›1I^{(n_{1})}italic_I start_POSTSUPERSCRIPT
( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT is
the n1Ã—n1subscriptğ‘›1subscriptğ‘›1n_{1}\times n_{1}italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT identity matrix and
ğŸ(n2)superscript1subscriptğ‘›2\mathbf{1}^{(n_{2})}bold_1
start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT )
end_POSTSUPERSCRIPT is the all-ones column vector of length
n2subscriptğ‘›2n_{2}italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT. For
C1âˆˆâ„n1â€²Ã—n1subscriptğ¶1superscriptâ„superscriptsubscriptğ‘›1â€²subscriptğ‘›1C_{1}\in\mathbb{R}^{n_{1}^{\prime}\times
n_{1}}italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT Ã— italic_n start_POSTSUBSCRIPT
1 end_POSTSUBSCRIPT end_POSTSUPERSCRIPT and
C2âˆˆâ„n2â€²Ã—n2subscriptğ¶2superscriptâ„superscriptsubscriptğ‘›2â€²subscriptğ‘›2C_{2}\in\mathbb{R}^{n_{2}^{\prime}\times
n_{2}}italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT Ã— italic_n start_POSTSUBSCRIPT
2 end_POSTSUBSCRIPT end_POSTSUPERSCRIPT, define

| C1Â â—‹cÂ C2â‰”(I(n1)âŠ—C2C1âŠ—(ğŸ(n2))T)âˆˆâ„(n1â¢n2â€²+n1â€²)Ã—(n1â¢n2),â‰”Â â—‹cÂ subscriptğ¶1subscriptğ¶2tensor-productsuperscriptğ¼subscriptğ‘›1subscriptğ¶2tensor-productsubscriptğ¶1superscriptsuperscript1subscriptğ‘›2ğ‘‡superscriptâ„subscriptğ‘›1superscriptsubscriptğ‘›2â€²superscriptsubscriptğ‘›1â€²subscriptğ‘›1subscriptğ‘›2C_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm c}\hskip 1.49994pt}}C_{2}% \coloneqq\left(\begin{array}[]{c}I^{(n_{1})}\otimes C_{2}\\\ C_{1}\otimes(\mathbf{1}^{(n_{2})})^{T}\end{array}\right)\in\mathbb{R}^{(n_{1}n% _{2}^{\prime}+n_{1}^{\prime})\times(n_{1}n_{2})},italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹c italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT â‰” ( start_ARRAY start_ROW start_CELL italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— ( bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT + italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ) Ã— ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT , |  | (6.3)  
---|---|---|---  
  
where I(n1)superscriptğ¼subscriptğ‘›1I^{(n_{1})}italic_I start_POSTSUPERSCRIPT
( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT is
the n1Ã—n1subscriptğ‘›1subscriptğ‘›1n_{1}\times n_{1}italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT identitiy matrix and
(ğŸ(n2))Tsuperscriptsuperscript1subscriptğ‘›2ğ‘‡(\mathbf{1}^{(n_{2})})^{T}(
bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT is the all-ones row vector of length
n2subscriptğ‘›2n_{2}italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT

######  Lemma 6.2 (Properties of 6.1).

Let
B1,C1Tâˆˆâ„n1Ã—n1â€²subscriptğµ1superscriptsubscriptğ¶1ğ‘‡superscriptâ„subscriptğ‘›1superscriptsubscriptğ‘›1â€²B_{1},C_{1}^{T}\in\mathbb{R}^{n_{1}\times
n_{1}^{\prime}}italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_C
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
end_POSTSUPERSCRIPT and
B2,C2Tâˆˆâ„n2Ã—n2â€²subscriptğµ2superscriptsubscriptğ¶2ğ‘‡superscriptâ„subscriptğ‘›2superscriptsubscriptğ‘›2â€²B_{2},C_{2}^{T}\in\mathbb{R}^{n_{2}\times
n_{2}^{\prime}}italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT , italic_C
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT Ã— italic_n start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
end_POSTSUPERSCRIPT. Suppose
B1â¢C1=A(n1)subscriptğµ1subscriptğ¶1superscriptğ´subscriptğ‘›1B_{1}C_{1}=A^{(n_{1})}italic_B
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT and
B2â¢C2=A(n2)subscriptğµ2subscriptğ¶2superscriptğ´subscriptğ‘›2B_{2}C_{2}=A^{(n_{2})}italic_B
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT 2
end_POSTSUBSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT, where
A(n)superscriptğ´ğ‘›A^{(n)}italic_A start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT is the all-ones lower triangular matrix defined in
EquationÂ 2.1. Then

| (B1Â â—‹bÂ B2)â¢(C1Â â—‹cÂ C2)=A(n1â¢n2).Â â—‹bÂ subscriptğµ1subscriptğµ2Â â—‹cÂ subscriptğ¶1subscriptğ¶2superscriptğ´subscriptğ‘›1subscriptğ‘›2(B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}\hskip 1.49994pt}}B_{2})% (C_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm c}\hskip 1.49994pt}}C_{2})% =A^{(n_{1}n_{2})}.( italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) ( italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹c italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) = italic_A start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT . |   
---|---|---  
  
Furthermore,

| â€–B1Â â—‹bÂ B2â€–2â†’âˆ2superscriptsubscriptnormÂ â—‹bÂ subscriptğµ1subscriptğµ2â†’22\displaystyle\|B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}\hskip 1.4% 9994pt}}B_{2}\|_{2\to\infty}^{2}âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | =â€–S(n1)â¢B1â€–2â†’âˆ2+â€–B2â€–2â†’âˆ2â‰¤â€–B1â€–2â†’âˆ2+â€–B2â€–2â†’âˆ2,absentsuperscriptsubscriptnormsuperscriptğ‘†subscriptğ‘›1subscriptğµ1â†’22superscriptsubscriptnormsubscriptğµ2â†’22superscriptsubscriptnormsubscriptğµ1â†’22superscriptsubscriptnormsubscriptğµ2â†’22\displaystyle=\|S^{(n_{1})}B_{1}\|_{2\to\infty}^{2}+\|B_{2}\|_{2\to\infty}^{2}% \leq\|B_{1}\|_{2\to\infty}^{2}+\|B_{2}\|_{2\to\infty}^{2},= âˆ¥ italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ¥ italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ¥ italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT , |   
---|---|---|---  
| â€–C1Â â—‹cÂ C2â€–1â†’22superscriptsubscriptnormÂ â—‹cÂ subscriptğ¶1subscriptğ¶2â†’122\displaystyle\|C_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm c}\hskip 1.4% 9994pt}}C_{2}\|_{1\to 2}^{2}âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹c italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | =â€–C1â€–1â†’22+â€–C2â€–1â†’22.absentsuperscriptsubscriptnormsubscriptğ¶1â†’122superscriptsubscriptnormsubscriptğ¶2â†’122\displaystyle=\|C_{1}\|_{1\to 2}^{2}+\|C_{2}\|_{1\to 2}^{2}.= âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ¥ italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT . |   
  
###### Proof.

We have

| (B1Â â—‹bÂ B2)â¢(C1Â â—‹cÂ C2)Â â—‹bÂ subscriptğµ1subscriptğµ2Â â—‹cÂ subscriptğ¶1subscriptğ¶2\displaystyle(B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}\hskip 1.49% 994pt}}B_{2})(C_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm c}\hskip 1.49% 994pt}}C_{2})( italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) ( italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹c italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) | =(I(n1)âŠ—B2â¢S(n1)â¢B1âŠ—ğŸ(n2))â¢(I(n1)âŠ—C2C1âŠ—(ğŸ(n2))T)absenttensor-producttensor-productsuperscriptğ¼subscriptğ‘›1subscriptğµ2superscriptğ‘†subscriptğ‘›1subscriptğµ1superscript1subscriptğ‘›2tensor-productsuperscriptğ¼subscriptğ‘›1subscriptğ¶2tensor-productsubscriptğ¶1superscriptsuperscript1subscriptğ‘›2ğ‘‡\displaystyle=\big{(}I^{(n_{1})}\otimes B_{2}~{}~{}S^{(n_{1})}B_{1}\otimes% \mathbf{1}^{(n_{2})}\big{)}\left(\begin{array}[]{c}I^{(n_{1})}\otimes C_{2}\\\ C_{1}\otimes(\mathbf{1}^{(n_{2})})^{T}\end{array}\right)= ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) ( start_ARRAY start_ROW start_CELL italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— ( bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT end_CELL end_ROW end_ARRAY ) |   
---|---|---|---  
|  | =(I(n1)âŠ—B2)â¢(I(n1)âŠ—C2)+(S(n1)â¢B1âŠ—ğŸ(n2))â¢(C1âŠ—(ğŸ(n2))T)absenttensor-productsuperscriptğ¼subscriptğ‘›1subscriptğµ2tensor-productsuperscriptğ¼subscriptğ‘›1subscriptğ¶2tensor-productsuperscriptğ‘†subscriptğ‘›1subscriptğµ1superscript1subscriptğ‘›2tensor-productsubscriptğ¶1superscriptsuperscript1subscriptğ‘›2ğ‘‡\displaystyle=(I^{(n_{1})}\otimes B_{2})(I^{(n_{1})}\otimes C_{2})+(S^{(n_{1})% }B_{1}\otimes\mathbf{1}^{(n_{2})})(C_{1}\otimes(\mathbf{1}^{(n_{2})})^{T})= ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) + ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) ( italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— ( bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) |   
|  | =(I(n1)â¢I(n1))âŠ—(B2â¢C2)+(S(n1)â¢B1â¢C1)âŠ—(ğŸ(n2)â¢(ğŸ(n2))T)absenttensor-productsuperscriptğ¼subscriptğ‘›1superscriptğ¼subscriptğ‘›1subscriptğµ2subscriptğ¶2tensor-productsuperscriptğ‘†subscriptğ‘›1subscriptğµ1subscriptğ¶1superscript1subscriptğ‘›2superscriptsuperscript1subscriptğ‘›2ğ‘‡\displaystyle=(I^{(n_{1})}I^{(n_{1})})\otimes(B_{2}C_{2})+(S^{(n_{1})}B_{1}C_{% 1})\otimes(\mathbf{1}^{(n_{2})}(\mathbf{1}^{(n_{2})})^{T})= ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) âŠ— ( italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) + ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) âŠ— ( bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ( bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) |   
|  | =I(n1)âŠ—A(n2)+(S(n1)â¢A(n2))âŠ—(ğŸ(n2)â¢(ğŸ(n2))T)absenttensor-productsuperscriptğ¼subscriptğ‘›1superscriptğ´subscriptğ‘›2tensor-productsuperscriptğ‘†subscriptğ‘›1superscriptğ´subscriptğ‘›2superscript1subscriptğ‘›2superscriptsuperscript1subscriptğ‘›2ğ‘‡\displaystyle=I^{(n_{1})}\otimes A^{(n_{2})}+(S^{(n_{1})}A^{(n_{2})})\otimes(% \mathbf{1}^{(n_{2})}(\mathbf{1}^{(n_{2})})^{T})= italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_A start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT + ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_A start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) âŠ— ( bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ( bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) |   
|  | =A(n1â¢n2).absentsuperscriptğ´subscriptğ‘›1subscriptğ‘›2\displaystyle=A^{(n_{1}n_{2})}.= italic_A start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT . |   
  
The last equality is best understood by looking at an example for
n1=3subscriptğ‘›13n_{1}=3italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = 3
and n2=2subscriptğ‘›22n_{2}=2italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT
= 2:242424If you donâ€™t like this proof by example, imagine some ellipses
(â‹¯,â‹®,â‹±â‹¯â‹®â‹±\cdots,\vdots,\ddotsâ‹¯ , â‹® , â‹±) inserted into the
matrices and it will look like a general proof. Formally, we can do an index-
by-index case analysis.

| I(3)âŠ—A(2)+(S(3)â¢A(3))âŠ—(ğŸ(2)â¢(ğŸ(2))T)tensor-productsuperscriptğ¼3superscriptğ´2tensor-productsuperscriptğ‘†3superscriptğ´3superscript12superscriptsuperscript12ğ‘‡\displaystyle I^{(3)}\otimes A^{(2)}+\left(S^{(3)}A^{(3)}\right)\otimes\left(% \mathbf{1}^{(2)}(\mathbf{1}^{(2)})^{T}\right)italic_I start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT âŠ— italic_A start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT + ( italic_S start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT italic_A start_POSTSUPERSCRIPT ( 3 ) end_POSTSUPERSCRIPT ) âŠ— ( bold_1 start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT ( bold_1 start_POSTSUPERSCRIPT ( 2 ) end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT ) |   
---|---|---  
| =(100010001)âŠ—(1011)+(000100110)âŠ—(1111)absenttensor-product1000100011011tensor-product0001001101111\displaystyle=\left(\begin{array}[]{ccc}1&0&0\\\ 0&1&0\\\ 0&0&1\end{array}\right)\otimes\left(\begin{array}[]{cc}1&0\\\ 1&1\end{array}\right)+\left(\begin{array}[]{ccc}0&0&0\\\ 1&0&0\\\ 1&1&0\end{array}\right)\otimes\left(\begin{array}[]{cc}1&1\\\ 1&1\end{array}\right)= ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) âŠ— ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) + ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) âŠ— ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) |   
| =(100000110000001000001100000010000011)+(000000000000110000110000111100111100)absent100000110000001000001100000010000011000000000000110000110000111100111100\displaystyle=\left(\begin{array}[]{cccccc}1&0&0&0&0&0\\\ 1&1&0&0&0&0\\\ 0&0&1&0&0&0\\\ 0&0&1&1&0&0\\\ 0&0&0&0&1&0\\\ 0&0&0&0&1&1\end{array}\right)+\left(\begin{array}[]{cccccc}0&0&0&0&0&0\\\ 0&0&0&0&0&0\\\ 1&1&0&0&0&0\\\ 1&1&0&0&0&0\\\ 1&1&1&1&0&0\\\ 1&1&1&1&0&0\\\ \end{array}\right)= ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) + ( start_ARRAY start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW end_ARRAY ) |   
| =(100000110000111000111100111110111111)absent100000110000111000111100111110111111\displaystyle=\left(\begin{array}[]{cccccc}1&0&0&0&0&0\\\ 1&1&0&0&0&0\\\ 1&1&1&0&0&0\\\ 1&1&1&1&0&0\\\ 1&1&1&1&1&0\\\ 1&1&1&1&1&1\end{array}\right)= ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL start_CELL 1 end_CELL end_ROW end_ARRAY ) |   
| =A(6).absentsuperscriptğ´6\displaystyle=A^{(6)}.= italic_A start_POSTSUPERSCRIPT ( 6 ) end_POSTSUPERSCRIPT . |   
  
Now we have

| â€–B1Â â—‹bÂ B2â€–2â†’âˆ2superscriptsubscriptnormÂ â—‹bÂ subscriptğµ1subscriptğµ2â†’22\displaystyle\|B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}\hskip 1.4% 9994pt}}B_{2}\|_{2\to\infty}^{2}âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | =maxiâˆˆ[n1â¢n2]â¢âˆ‘jâˆˆ[n1â¢n2â€²+n1â€²](B1Â â—‹bÂ B2)i,j2absentsubscriptğ‘–delimited-[]subscriptğ‘›1subscriptğ‘›2subscriptğ‘—delimited-[]subscriptğ‘›1superscriptsubscriptğ‘›2â€²superscriptsubscriptğ‘›1â€²superscriptsubscriptÂ â—‹bÂ subscriptğµ1subscriptğµ2ğ‘–ğ‘—2\displaystyle=\max_{i\in[n_{1}n_{2}]}\sum_{j\in[n_{1}n_{2}^{\prime}+n_{1}^{% \prime}]}(B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}\hskip 1.49994% pt}}B_{2})_{i,j}^{2}= roman_max start_POSTSUBSCRIPT italic_i âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT + italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT ( italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
---|---|---|---  
|  | =maxiâˆˆ[n1â¢n2]â¢âˆ‘jâ€²âˆˆ[n1â¢n2â€²](I(n1)âŠ—B2)i,jâ€²2+âˆ‘jâ€²â€²âˆˆ[n1](S(n1)â¢B1âŠ—ğŸ(n2))i,jâ€²â€²2absentsubscriptğ‘–delimited-[]subscriptğ‘›1subscriptğ‘›2subscriptsuperscriptğ‘—â€²delimited-[]subscriptğ‘›1superscriptsubscriptğ‘›2â€²superscriptsubscripttensor-productsuperscriptğ¼subscriptğ‘›1subscriptğµ2ğ‘–superscriptğ‘—â€²2subscriptsuperscriptğ‘—â€²â€²delimited-[]subscriptğ‘›1superscriptsubscripttensor-productsuperscriptğ‘†subscriptğ‘›1subscriptğµ1superscript1subscriptğ‘›2ğ‘–superscriptğ‘—â€²â€²2\displaystyle=\max_{i\in[n_{1}n_{2}]}\sum_{j^{\prime}\in[n_{1}n_{2}^{\prime}]}% (I^{(n_{1})}\otimes B_{2})_{i,j^{\prime}}^{2}+\sum_{j^{\prime\prime}\in[n_{1}]% }(S^{(n_{1})}B_{1}\otimes\mathbf{1}^{(n_{2})})_{i,j^{\prime\prime}}^{2}= roman_max start_POSTSUBSCRIPT italic_i âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i , italic_j start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUBSCRIPT italic_i , italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
|  | =maxi1âˆˆ[n1],i2âˆˆ[n2]âˆ‘j1â€²âˆˆ[n1],j2â€²âˆˆ[n2â€²](Ii1,j1(n1)â‹…(B2)i2,j2â€²)2+âˆ‘jâ€²â€²âˆˆ[n1]((S(n1)B1)i1,jâ€²â€²â‹…ğŸ(n2))jâ€²â€²)2\displaystyle=\max_{i_{1}\in[n_{1}],i_{2}\in[n_{2}]}\sum_{j_{1}^{\prime}\in[n_% {1}],j_{2}^{\prime}\in[n_{2}^{\prime}]}(I^{(n_{1})}_{i_{1},j_{1}}\cdot(B_{2})_% {i_{2},j_{2}^{\prime}})^{2}+\sum_{j^{\prime\prime}\in[n_{1}]}((S^{(n_{1})}B_{1% })_{i_{1},j^{\prime\prime}}\cdot\mathbf{1}^{(n_{2})})_{j^{\prime\prime}})^{2}= roman_max start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] , italic_i start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] , italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_j start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT â‹… ( italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT , italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT ( ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT â‹… bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) start_POSTSUBSCRIPT italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
|  | =maxi1âˆˆ[n1],i2âˆˆ[n2]â¢âˆ‘j2â€²âˆˆ[n2â€²](B2)i2,j2â€²2+âˆ‘jâ€²â€²âˆˆ[n1](S(n1)â¢B1)i1,jâ€²â€²2absentsubscriptformulae-sequencesubscriptğ‘–1delimited-[]subscriptğ‘›1subscriptğ‘–2delimited-[]subscriptğ‘›2subscriptsuperscriptsubscriptğ‘—2â€²delimited-[]superscriptsubscriptğ‘›2â€²superscriptsubscriptsubscriptğµ2subscriptğ‘–2superscriptsubscriptğ‘—2â€²2subscriptsuperscriptğ‘—â€²â€²delimited-[]subscriptğ‘›1superscriptsubscriptsuperscriptğ‘†subscriptğ‘›1subscriptğµ1subscriptğ‘–1superscriptğ‘—â€²â€²2\displaystyle=\max_{i_{1}\in[n_{1}],i_{2}\in[n_{2}]}\sum_{j_{2}^{\prime}\in[n_% {2}^{\prime}]}(B_{2})_{i_{2},j_{2}^{\prime}}^{2}+\sum_{j^{\prime\prime}\in[n_{% 1}]}(S^{(n_{1})}B_{1})_{i_{1},j^{\prime\prime}}^{2}= roman_max start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] , italic_i start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT ( italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT , italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
|  | =maxi1âˆˆ[n1]â¢âˆ‘j2â€²âˆˆ[n2â€²](B2)i2,j2â€²2+maxi2âˆˆ[n2]â¢âˆ‘jâ€²â€²âˆˆ[n1](S(n1)â¢B1)i1,jâ€²â€²2absentsubscriptsubscriptğ‘–1delimited-[]subscriptğ‘›1subscriptsuperscriptsubscriptğ‘—2â€²delimited-[]superscriptsubscriptğ‘›2â€²superscriptsubscriptsubscriptğµ2subscriptğ‘–2superscriptsubscriptğ‘—2â€²2subscriptsubscriptğ‘–2delimited-[]subscriptğ‘›2subscriptsuperscriptğ‘—â€²â€²delimited-[]subscriptğ‘›1superscriptsubscriptsuperscriptğ‘†subscriptğ‘›1subscriptğµ1subscriptğ‘–1superscriptğ‘—â€²â€²2\displaystyle=\max_{i_{1}\in[n_{1}]}\sum_{j_{2}^{\prime}\in[n_{2}^{\prime}]}(B% _{2})_{i_{2},j_{2}^{\prime}}^{2}+\max_{i_{2}\in[n_{2}]}\sum_{j^{\prime\prime}% \in[n_{1}]}(S^{(n_{1})}B_{1})_{i_{1},j^{\prime\prime}}^{2}= roman_max start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT ( italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT , italic_j start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + roman_max start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_j start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
|  | =â€–B2â€–2â†’âˆ2+â€–S(n1)â¢B1â€–2â†’âˆ2.absentsuperscriptsubscriptnormsubscriptğµ2â†’22superscriptsubscriptnormsuperscriptğ‘†subscriptğ‘›1subscriptğµ1â†’22\displaystyle=\|B_{2}\|_{2\to\infty}^{2}+\|S^{(n_{1})}B_{1}\|_{2\to\infty}^{2}.= âˆ¥ italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + âˆ¥ italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT . |   
  
Similarly, â€–C1Â â—‹cÂ
C2â€–1â†’22=â€–C1â€–1â†’22+â€–C2â€–1â†’22superscriptsubscriptnormÂ â—‹cÂ
subscriptğ¶1subscriptğ¶2â†’122superscriptsubscriptnormsubscriptğ¶1â†’122superscriptsubscriptnormsubscriptğ¶2â†’122\|C_{1}\mathbin{\raisebox{0.86108pt}{
$\bigcirc${\rm c}\hskip 1.49994pt}}C_{2}% \|_{1\to 2}^{2}=\|C_{1}\|_{1\to
2}^{2}+\|C_{2}\|_{1\to 2}^{2}âˆ¥ italic_C start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT â—‹c italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥
start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT = âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥
start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT + âˆ¥ italic_C start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT âˆ¥
start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT. Finally,

| â€–S(n1)â¢B1â€–2â†’âˆ2=maxiâˆˆ[n1]â¢âˆ‘jâˆˆ[n1â€²](S(n1)â¢B1)i,j2=maxiâˆˆ[n1âˆ’1]â¢âˆ‘jâˆˆ[n1â€²](B1)i,j2â‰¤â€–B1â€–2â†’âˆ2.superscriptsubscriptnormsuperscriptğ‘†subscriptğ‘›1subscriptğµ1â†’22subscriptğ‘–delimited-[]subscriptğ‘›1subscriptğ‘—delimited-[]superscriptsubscriptğ‘›1â€²superscriptsubscriptsuperscriptğ‘†subscriptğ‘›1subscriptğµ1ğ‘–ğ‘—2subscriptğ‘–delimited-[]subscriptğ‘›11subscriptğ‘—delimited-[]superscriptsubscriptğ‘›1â€²superscriptsubscriptsubscriptğµ1ğ‘–ğ‘—2superscriptsubscriptnormsubscriptğµ1â†’22\|S^{(n_{1})}B_{1}\|_{2\to\infty}^{2}=\max_{i\in[n_{1}]}\sum_{j\in[n_{1}^{% \prime}]}(S^{(n_{1})}B_{1})_{i,j}^{2}=\max_{i\in[n_{1}-1]}\sum_{j\in[n_{1}^{% \prime}]}(B_{1})_{i,j}^{2}\leq\|B_{1}\|_{2\to\infty}^{2}.âˆ¥ italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_max start_POSTSUBSCRIPT italic_i âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_max start_POSTSUBSCRIPT italic_i âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 ] end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_j âˆˆ [ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT ] end_POSTSUBSCRIPT ( italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¤ âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT . |   
---|---|---  
  
âˆ

LemmaÂ 6.2 can be applied recursively. We start with some base factorization
B1â¢C1=A(n1)subscriptğµ1subscriptğ¶1superscriptğ´subscriptğ‘›1B_{1}C_{1}=A^{(n_{1})}italic_B
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT and inductively
define a factorization satisfying
Bâ„“â¢Câ„“=A(n1â„“)subscriptğµâ„“subscriptğ¶â„“superscriptğ´superscriptsubscriptğ‘›1â„“B_{\ell}C_{\ell}=A^{(n_{1}^{\ell})}italic_B
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT
roman_â„“ end_POSTSUBSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“
end_POSTSUPERSCRIPT ) end_POSTSUPERSCRIPT and

| â€–Bâ„“â€–2â†’âˆâ‹…â€–Câ„“â€–1â†’2â‰¤â„“â‹…â€–B1â€–2â†’âˆâ‹…â€–C1â€–1â†’2.â‹…subscriptnormsubscriptğµâ„“â†’2subscriptnormsubscriptğ¶â„“â†’12â‹…â„“subscriptnormsubscriptğµ1â†’2subscriptnormsubscriptğ¶1â†’12\|B_{\ell}\|_{2\to\infty}\cdot\|C_{\ell}\|_{1\to 2}\leq\ell\cdot\|B_{1}\|_{2% \to\infty}\cdot\|C_{1}\|_{1\to 2}.âˆ¥ italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‹… âˆ¥ italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ roman_â„“ â‹… âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‹… âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT . |   
---|---|---  
  
######  Proposition 6.3.

Let
B1,C1Tâˆˆâ„n1Ã—n1â€²subscriptğµ1superscriptsubscriptğ¶1ğ‘‡superscriptâ„subscriptğ‘›1subscriptsuperscriptğ‘›â€²1B_{1},C_{1}^{T}\in\mathbb{R}^{n_{1}\times
n^{\prime}_{1}}italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_C
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_n start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
end_POSTSUPERSCRIPT. Following 6.1, for â„“â‰¥2â„“2\ell\geq 2roman_â„“ â‰¥ 2,
define

| Bâ„“=B1Â â—‹bÂ Bâ„“âˆ’1â¢Â andÂ â¢Câ„“=C1Â â—‹cÂ Câ„“âˆ’1.subscriptğµâ„“Â â—‹bÂ subscriptğµ1subscriptğµâ„“1Â andÂ subscriptğ¶â„“Â â—‹cÂ subscriptğ¶1subscriptğ¶â„“1B_{\ell}=B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}\hskip 1.49994pt% }}B_{\ell-1}~{}~{}~{}\text{ and }~{}~{}~{}C_{\ell}=C_{1}\mathbin{\raisebox{0.8% 6108pt}{ $\bigcirc${\rm c}\hskip 1.49994pt}}C_{\ell-1}.italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT = italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT and italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT = italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹c italic_C start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT . |  | (6.4)  
---|---|---|---  
  
Then, for all â„“â‰¥1â„“1\ell\geq 1roman_â„“ â‰¥ 1, we have
Bâ„“,Câ„“Tâˆˆâ„nâ„“Ã—nâ„“â€²subscriptğµâ„“superscriptsubscriptğ¶â„“ğ‘‡superscriptâ„subscriptğ‘›â„“subscriptsuperscriptğ‘›â€²â„“B_{\ell},C_{\ell}^{T}\in\mathbb{R}^{n_{\ell}\times
n^{\prime}_{\ell}}italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT ,
italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_T end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT Ã— italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT end_POSTSUPERSCRIPT, where
nâ„“â‰”n1â„“â‰”subscriptğ‘›â„“superscriptsubscriptğ‘›1â„“n_{\ell}\coloneqq
n_{1}^{\ell}italic_n start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT â‰”
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
roman_â„“ end_POSTSUPERSCRIPT and

| nâ„“â€²â‰”n1â€²â‹…âˆ‘k=0â„“âˆ’1n1k=n1â€²â‹…n1â„“âˆ’1n1âˆ’1â‰”subscriptsuperscriptğ‘›â€²â„“â‹…superscriptsubscriptğ‘›1â€²superscriptsubscriptğ‘˜0â„“1superscriptsubscriptğ‘›1ğ‘˜â‹…superscriptsubscriptğ‘›1â€²superscriptsubscriptğ‘›1â„“1subscriptğ‘›11n^{\prime}_{\ell}\coloneqq n_{1}^{\prime}\cdot\sum_{k=0}^{\ell-1}n_{1}^{k}=n_{% 1}^{\prime}\cdot\frac{n_{1}^{\ell}-1}{n_{1}-1}italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT â‰” italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT â‹… âˆ‘ start_POSTSUBSCRIPT italic_k = 0 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ - 1 end_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT = italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT â‹… divide start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT - 1 end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_ARG |   
---|---|---  
  
If
B1â¢C1=A(n1)subscriptğµ1subscriptğ¶1superscriptğ´subscriptğ‘›1B_{1}C_{1}=A^{(n_{1})}italic_B
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT, then
Bâ„“â¢Câ„“=A(nâ„“)subscriptğµâ„“subscriptğ¶â„“superscriptğ´subscriptğ‘›â„“B_{\ell}C_{\ell}=A^{(n_{\ell})}italic_B
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT
roman_â„“ end_POSTSUBSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT for all
â„“â‰¥1â„“1\ell\geq 1roman_â„“ â‰¥ 1. Furthermore,

| â€–Bâ„“â€–2â†’âˆsubscriptnormsubscriptğµâ„“â†’2\displaystyle\|B_{\ell}\|_{2\to\infty}âˆ¥ italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | â‰¤â„“â‹…â€–B1â€–2â†’âˆ,absentâ‹…â„“subscriptnormsubscriptğµ1â†’2\displaystyle\leq\sqrt{\ell}\cdot\|B_{1}\|_{2\to\infty},â‰¤ square-root start_ARG roman_â„“ end_ARG â‹… âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT , |   
---|---|---|---  
| â€–Câ„“â€–1â†’2subscriptnormsubscriptğ¶â„“â†’12\displaystyle\|C_{\ell}\|_{1\to 2}âˆ¥ italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | =â„“â‹…â€–C1â€–1â†’2.absentâ‹…â„“subscriptnormsubscriptğ¶1â†’12\displaystyle=\sqrt{\ell}\cdot\|C_{1}\|_{1\to 2}.= square-root start_ARG roman_â„“ end_ARG â‹… âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT . |   
  
###### Proof.

Perform induction on â„“â„“\ellroman_â„“ using LemmaÂ 6.2 with
B2=Bâ„“âˆ’1subscriptğµ2subscriptğµâ„“1B_{2}=B_{\ell-1}italic_B
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_B start_POSTSUBSCRIPT
roman_â„“ - 1 end_POSTSUBSCRIPT and
C2=Câ„“âˆ’1subscriptğ¶2subscriptğ¶â„“1C_{2}=C_{\ell-1}italic_C
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT = italic_C start_POSTSUBSCRIPT
roman_â„“ - 1 end_POSTSUBSCRIPT. âˆ

###  6.2 Recursive Algorithm

Now we show that the recursive matrix factorization in PropositionÂ 6.3
corresponds to an efficient algorithm. The recursive construction naturally
corresponds to a recursive algorithm. That is, for streaming multiplication by
Bâ„“subscriptğµâ„“B_{\ell}italic_B start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT we must call a base algorithm for
B1subscriptğµ1B_{1}italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT and
recursively call the algorithm for Bâ„“âˆ’1subscriptğµâ„“1B_{\ell-1}italic_B
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT.

Recall the streaming multiplication setting: We receive the rows of
Zâˆˆâ„nâ„“â€²Ã—mğ‘superscriptâ„subscriptsuperscriptğ‘›â€²â„“ğ‘šZ\in\mathbb{R}^{n^{\prime}_{\ell}\times
m}italic_Z âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT Ã— italic_m end_POSTSUPERSCRIPT one by one as a stream and
we must output the rows of
Bâ„“â‹…Zâˆˆâ„nâ„“Ã—mâ‹…subscriptğµâ„“ğ‘superscriptâ„subscriptğ‘›â„“ğ‘šB_{\ell}\cdot
Z\in\mathbb{R}^{n_{\ell}\times m}italic_B start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT â‹… italic_Z âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT Ã— italic_m
end_POSTSUPERSCRIPT as a stream. Note that our matrix
Bâ„“subscriptğµâ„“B_{\ell}italic_B start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT is not a lower triangular matrix; in fact, it is not even
square. This makes the problem setting not entirely straightforward, as we do
not have a one-to-one correspondence between streaming inputs and outputs.

In our application, the input Zğ‘Zitalic_Z is independent random noise. In
particular, the order of the rows is unimportant. The time when we read each
row is also not important as the noise can be generated as needed. The
constraint is simply that we can only read each row once. (We can store the
rows for later use, but that requires memory, so we want to avoid this.) In
other words, the input is a stream of independent random noise, which we can
read at any time, but we cannot â€œrewindâ€ it.

Parameters: Base streaming algorithm
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT. Recursion depth â„“â‰¥1â„“1\ell\geq 1roman_â„“ â‰¥ 1.

Streaming Input: Row vectors
Z0,â‹…,Z1,â‹…,â‹¯,Znâ„“â€²âˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘subscriptsuperscriptğ‘›â€²â„“1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n^{\prime}_{\ell}-1,\cdot}\in\mathbb{R}^{1%
\times m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT - 1 , â‹… end_POSTSUBSCRIPT
âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT.

Streaming Output: Row vectors
Z~0,â‹…,Z~1,â‹…,â‹¯,Z~nâ„“âˆ’1,â‹…âˆˆâ„1Ã—msubscript~ğ‘0â‹…subscript~ğ‘1â‹…â‹¯subscript~ğ‘subscriptğ‘›â„“1â‹…superscriptâ„1ğ‘š\widetilde{Z}_{0,\cdot},\widetilde{Z}_{1,\cdot},\cdots,\widetilde{Z}_{n_{\ell}%
-1,\cdot}\in\mathbb{R}^{1\times m}over~ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , over~ start_ARG italic_Z
end_ARG start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , over~ start_ARG
italic_Z end_ARG start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT - 1 , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT such that
Z~=Bâ„“â‹…Z~ğ‘â‹…subscriptğµâ„“ğ‘\widetilde{Z}=B_{\ell}\cdot Zover~ start_ARG
italic_Z end_ARG = italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT
â‹… italic_Z.

ifÂ â„“=1â„“1\ell=1roman_â„“ = 1Â then

Â Â Â Â Â Run ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT and directly output what it outputs.

else

Â Â Â Â Â Start a copy of ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT. (Copy I)

Â Â Â Â Â Let
z0â€²=(ğŸ(m))Tâˆˆâ„1Ã—msubscriptsuperscriptğ‘§â€²0superscriptsuperscript0ğ‘šğ‘‡superscriptâ„1ğ‘šz^{\prime}_{0}=(\mathbf{0}^{(m)})^{T}\in\mathbb{R}^{1\times
m}italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT = ( bold_0 start_POSTSUPERSCRIPT ( italic_m )
end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT âˆˆ
blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT.

Â Â Â Â Â forÂ i=0â¢â‹¯â¢n1âˆ’1ğ‘–0â‹¯subscriptğ‘›11i=0\cdots n_{1}-1italic_i
= 0 â‹¯ italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1Â do

Â Â Â Â Â Â Â Â Â Start a copy of
ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT. (Copy II)
â–·â–·\trianglerightâ–· Recursion â„“â†¦â„“âˆ’1maps-
toâ„“â„“1\ell\mapsto\ell-1roman_â„“ â†¦ roman_â„“ - 1.

Â Â Â Â Â Â Â Â Â forÂ j=0â¢â‹¯â¢nâ„“âˆ’1âˆ’1ğ‘—0â‹¯subscriptğ‘›â„“11j=0\cdots
n_{\ell-1}-1italic_j = 0 â‹¯ italic_n start_POSTSUBSCRIPT roman_â„“ - 1
end_POSTSUBSCRIPT - 1Â do

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Get
zi,jâ€²â€²âˆˆâ„1Ã—msubscriptsuperscriptğ‘§â€²â€²ğ‘–ğ‘—superscriptâ„1ğ‘šz^{\prime\prime}_{i,j}\in\mathbb{R}^{1\times
m}italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT italic_i , italic_j end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT the next output of
ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT (copy II).

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Output
Z~nâ„“âˆ’1â¢i+j+1,â‹…=ziâ€²+zi,jâ€²â€²âˆˆâ„1Ã—msubscript~ğ‘subscriptğ‘›â„“1ğ‘–ğ‘—1â‹…subscriptsuperscriptğ‘§â€²ğ‘–subscriptsuperscriptğ‘§â€²â€²ğ‘–ğ‘—superscriptâ„1ğ‘š\widetilde{Z}_{n_{\ell-1}i+j+1,\cdot}=z^{\prime}_{i}+z^{\prime\prime}_{i,j}\in%
\mathbb{R}^{1\times m}over~ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT
italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT italic_i +
italic_j + 1 , â‹… end_POSTSUBSCRIPT = italic_z start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT + italic_z
start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i
, italic_j end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã—
italic_m end_POSTSUPERSCRIPT.

Â Â Â Â Â Â Â Â Â Â Â Â Â Â Delete
zi,jâ€²â€²subscriptsuperscriptğ‘§â€²â€²ğ‘–ğ‘—z^{\prime\prime}_{i,j}italic_z
start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i
, italic_j end_POSTSUBSCRIPT. Â Â Â Â Â Â Â Â Â

Â Â Â Â Â Â Â Â Â Terminate
ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT (copy II) and delete
ziâ€²subscriptsuperscriptğ‘§â€²ğ‘–z^{\prime}_{i}italic_z start_POSTSUPERSCRIPT
â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT.
â–·â–·\trianglerightâ–· Free up memory.

Â Â Â Â Â Â Â Â Â Get
zi+1â€²âˆˆâ„1Ã—msubscriptsuperscriptğ‘§â€²ğ‘–1superscriptâ„1ğ‘šz^{\prime}_{i+1}\in\mathbb{R}^{1\times
m}italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT
italic_i + 1 end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã—
italic_m end_POSTSUPERSCRIPT the next output of
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT (copy I). Â Â Â Â Â

Â Â Â Â Â Terminate ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT (copy I).

Algorithm 2 Recursive Streaming Algorithm corresponding to PropositionÂ 6.3

Our recursive streaming algorithm is presented as AlgorithmÂ 2. We will
instantiate the base streaming algorithm
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT with AlgorithmÂ 1. The recursive algorithm runs many copies
of ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT. The streaming input is simply split among these copies. For
simplicity, we do not belabor the precise order in which the input stream is
read.

######  Lemma 6.4 (Properties of AlgorithmÂ 2).

For â„“â‰¥1â„“1\ell\geq 1roman_â„“ â‰¥ 1, let
Bâ„“,Câ„“Tâˆˆâ„nâ„“Ã—nâ„“â€²subscriptğµâ„“superscriptsubscriptğ¶â„“ğ‘‡superscriptâ„subscriptğ‘›â„“superscriptsubscriptğ‘›â„“â€²B_{\ell},C_{\ell}^{T}\in\mathbb{R}^{n_{\ell}\times
n_{\ell}^{\prime}}italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT ,
italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_T end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT Ã— italic_n
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT be as in PropositionÂ 6.3. Let
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT be a streaming algorithm that takes as input a stream
Z0,â‹…,Z1,â‹…,â‹¯,Znâ„“âˆ’1â€²âˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘superscriptsubscriptğ‘›â„“1â€²1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n_{\ell-1}^{\prime}-1,\cdot}\in\mathbb{R}^{1%
\times m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“ - 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT - 1 , â‹…
end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m
end_POSTSUPERSCRIPT and outputs a stream
Z^0,â‹…,Z^1,â‹…,â‹¯,Z^nâ„“âˆ’1âˆ’1,â‹…âˆˆâ„1Ã—msubscript^ğ‘0â‹…subscript^ğ‘1â‹…â‹¯subscript^ğ‘subscriptğ‘›â„“11â‹…superscriptâ„1ğ‘š\widehat{Z}_{0,\cdot},\widehat{Z}_{1,\cdot},\cdots,\widehat{Z}_{n_{\ell-1}-1,%
\cdot}\in\mathbb{R}^{1\times m}over^ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , over^ start_ARG italic_Z
end_ARG start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , over^ start_ARG
italic_Z end_ARG start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“ -
1 end_POSTSUBSCRIPT - 1 , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT such that
Z^=B1â¢Z^ğ‘subscriptğµ1ğ‘\widehat{Z}=B_{1}Zover^ start_ARG italic_Z end_ARG =
italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_Z. Let
ğ’œâ„“subscriptğ’œâ„“\mathcal{A}_{\ell}caligraphic_A start_POSTSUBSCRIPT
roman_â„“ end_POSTSUBSCRIPT denote AlgorithmÂ 2 instantiated with the base
algorithm ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT and recursion depth â„“â‰¥1â„“1\ell\geq 1roman_â„“ â‰¥ 1.

Then ğ’œâ„“subscriptğ’œâ„“\mathcal{A}_{\ell}caligraphic_A start_POSTSUBSCRIPT
roman_â„“ end_POSTSUBSCRIPT is a streaming algorithm that takes as input a
stream
Z0,â‹…,Z1,â‹…,â‹¯,Znâ„“â€²âˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘subscriptsuperscriptğ‘›â€²â„“1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n^{\prime}_{\ell}-1,\cdot}\in\mathbb{R}^{1%
\times m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT - 1 , â‹… end_POSTSUBSCRIPT
âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT (in
an arbitrary â€“ but fixed â€“ order) and outputs a stream
Z~0,â‹…,Z~1,â‹…,â‹¯,Z~nâ„“âˆ’1,â‹…âˆˆâ„1Ã—msubscript~ğ‘0â‹…subscript~ğ‘1â‹…â‹¯subscript~ğ‘subscriptğ‘›â„“1â‹…superscriptâ„1ğ‘š\widetilde{Z}_{0,\cdot},\widetilde{Z}_{1,\cdot},\cdots,\widetilde{Z}_{n_{\ell}%
-1,\cdot}\in\mathbb{R}^{1\times m}over~ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , over~ start_ARG italic_Z
end_ARG start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , over~ start_ARG
italic_Z end_ARG start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT - 1 , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT such that
Z~=B1â¢Z~ğ‘subscriptğµ1ğ‘\widetilde{Z}=B_{1}Zover~ start_ARG italic_Z end_ARG
= italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_Z.

Moreover, the space required by
ğ’œâ„“subscriptğ’œâ„“\mathcal{A}_{\ell}caligraphic_A start_POSTSUBSCRIPT
roman_â„“ end_POSTSUBSCRIPT is at most â„“â„“\ellroman_â„“ times the space
required by ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT
1 end_POSTSUBSCRIPT. And the time required by
ğ’œâ„“subscriptğ’œâ„“\mathcal{A}_{\ell}caligraphic_A start_POSTSUBSCRIPT
roman_â„“ end_POSTSUBSCRIPT is
n1â„“+1âˆ’1n1âˆ’1â‰¤Oâ¢(nâ„“)superscriptsubscriptğ‘›1â„“11subscriptğ‘›11ğ‘‚subscriptğ‘›â„“\frac{n_{1}^{\ell+1}-1}{n_{1}-1}\leq
O(n_{\ell})divide start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT roman_â„“ + 1 end_POSTSUPERSCRIPT - 1 end_ARG start_ARG
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_ARG â‰¤ italic_O (
italic_n start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT ) times the time
required by ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT
1 end_POSTSUBSCRIPT.

###### Proof.

We may inductively assume that the lemma holds for â„“âˆ’1â„“1\ell-1roman_â„“
- 1 in place of â„“â„“\ellroman_â„“. That is, we assume
ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT is a streaming algorithm
that takes as input a stream
Z0,â‹…,Z1,â‹…,â‹¯,Znâ„“â€²âˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘subscriptsuperscriptğ‘›â€²â„“1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n^{\prime}_{\ell}-1,\cdot}\in\mathbb{R}^{1%
\times m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT - 1 , â‹… end_POSTSUBSCRIPT
âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT (in
an arbitrary â€“ but fixed â€“ order) and outputs a stream
ZË‡0,â‹…,ZË‡1,â‹…,â‹¯,ZË‡nâ„“âˆ’1âˆ’1,â‹…âˆˆâ„1Ã—msubscriptË‡ğ‘0â‹…subscriptË‡ğ‘1â‹…â‹¯subscriptË‡ğ‘subscriptğ‘›â„“11â‹…superscriptâ„1ğ‘š\check{Z}_{0,\cdot},\check{Z}_{1,\cdot},\cdots,\check{Z}_{n_{\ell-1}-1,\cdot}%
\in\mathbb{R}^{1\times m}overroman_Ë‡ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , overroman_Ë‡ start_ARG
italic_Z end_ARG start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ ,
overroman_Ë‡ start_ARG italic_Z end_ARG start_POSTSUBSCRIPT italic_n
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT - 1 , â‹…
end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m
end_POSTSUPERSCRIPT such that
ZË‡=Bâ„“âˆ’1â¢ZË‡ğ‘subscriptğµâ„“1ğ‘\check{Z}=B_{\ell-1}Zoverroman_Ë‡
start_ARG italic_Z end_ARG = italic_B start_POSTSUBSCRIPT roman_â„“ - 1
end_POSTSUBSCRIPT italic_Z. Let

| Zâ€²=(z0â€²z0â€²â‹®z0â€²z1â€²z1â€²â‹®z1â€²â‹®zn1âˆ’1â€²zn1âˆ’1â€²â‹®zn1âˆ’1â€²)=(z0â€²z1â€²â‹®zn1âˆ’1â€²)âŠ—ğŸ(nâ„“âˆ’1)âˆˆâ„n1â¢nâ„“âˆ’1Ã—msuperscriptğ‘â€²subscriptsuperscriptğ‘§â€²0subscriptsuperscriptğ‘§â€²0â‹®subscriptsuperscriptğ‘§â€²0subscriptsuperscriptğ‘§â€²1subscriptsuperscriptğ‘§â€²1â‹®subscriptsuperscriptğ‘§â€²1â‹®subscriptsuperscriptğ‘§â€²subscriptğ‘›11subscriptsuperscriptğ‘§â€²subscriptğ‘›11â‹®subscriptsuperscriptğ‘§â€²subscriptğ‘›11tensor-productsubscriptsuperscriptğ‘§â€²0subscriptsuperscriptğ‘§â€²1â‹®subscriptsuperscriptğ‘§â€²subscriptğ‘›11superscript1subscriptğ‘›â„“1superscriptâ„subscriptğ‘›1subscriptğ‘›â„“1ğ‘šZ^{\prime}=\left(\begin{array}[]{c}z^{\prime}_{0}\\\ z^{\prime}_{0}\\\ \vdots\\\ z^{\prime}_{0}\\\ z^{\prime}_{1}\\\ z^{\prime}_{1}\\\ \vdots\\\ z^{\prime}_{1}\\\ \vdots\\\ z^{\prime}_{n_{1}-1}\\\ z^{\prime}_{n_{1}-1}\\\ \vdots\\\ z^{\prime}_{n_{1}-1}\end{array}\right)=\left(\begin{array}[]{c}z^{\prime}_{0}% \\\ z^{\prime}_{1}\\\ \vdots\\\ z^{\prime}_{n_{1}-1}\end{array}\right)\otimes\mathbf{1}^{(n_{\ell-1})}\in% \mathbb{R}^{n_{1}n_{\ell-1}\times m}italic_Z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) = ( start_ARRAY start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT Ã— italic_m end_POSTSUPERSCRIPT |   
---|---|---  
  
and

| Zâ€²â€²=(z0,0â€²â€²z0,1â€²â€²â‹®z0,nâ„“âˆ’1â€²â€²z1,0â€²â€²z1,1â€²â€²â‹®z1,nâ„“âˆ’1â€²â€²â‹®zn1âˆ’1,0â€²â€²zn1âˆ’1,1â€²â€²â‹®zn1âˆ’1,nâ„“âˆ’1â€²â€²)âˆˆâ„n1â¢nâ„“âˆ’1Ã—m.superscriptğ‘â€²â€²subscriptsuperscriptğ‘§â€²â€²00subscriptsuperscriptğ‘§â€²â€²01â‹®subscriptsuperscriptğ‘§â€²â€²0subscriptğ‘›â„“1subscriptsuperscriptğ‘§â€²â€²10subscriptsuperscriptğ‘§â€²â€²11â‹®subscriptsuperscriptğ‘§â€²â€²1subscriptğ‘›â„“1â‹®subscriptsuperscriptğ‘§â€²â€²subscriptğ‘›110subscriptsuperscriptğ‘§â€²â€²subscriptğ‘›111â‹®subscriptsuperscriptğ‘§â€²â€²subscriptğ‘›11subscriptğ‘›â„“1superscriptâ„subscriptğ‘›1subscriptğ‘›â„“1ğ‘šZ^{\prime\prime}=\left(\begin{array}[]{c}z^{\prime\prime}_{0,0}\\\ z^{\prime\prime}_{0,1}\\\ \vdots\\\ z^{\prime\prime}_{0,n_{\ell-1}}\\\ z^{\prime\prime}_{1,0}\\\ z^{\prime\prime}_{1,1}\\\ \vdots\\\ z^{\prime\prime}_{1,n_{\ell-1}}\\\ \vdots\\\ z^{\prime\prime}_{n_{1}-1,0}\\\ z^{\prime\prime}_{n_{1}-1,1}\\\ \vdots\\\ z^{\prime\prime}_{n_{1}-1,n_{\ell-1}}\\\ \end{array}\right)\in\mathbb{R}^{n_{1}n_{\ell-1}\times m}.italic_Z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 , 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 , 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 , italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 , 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 , 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 , italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 , 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 , 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 , italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT Ã— italic_m end_POSTSUPERSCRIPT . |   
---|---|---  
  
We have
Z~=Zâ€²+Zâ€²â€²~ğ‘superscriptğ‘â€²superscriptğ‘â€²â€²\widetilde{Z}=Z^{\prime}+Z^{\prime\prime}over~
start_ARG italic_Z end_ARG = italic_Z start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT + italic_Z start_POSTSUPERSCRIPT â€² â€²
end_POSTSUPERSCRIPT. We want to show that

| Z~=Bâ„“â¢Z=(B1Â â—‹bÂ Bâ„“)â¢Z=(I(n1)âŠ—B2â¢S(n1)â¢B1âŠ—ğŸ(n2))â¢(Z0:n1â¢nâ„“âˆ’1â€²,â‹…Zn1â¢nâ„“âˆ’1â€²:nâ„“â€²,â‹…),~ğ‘subscriptğµâ„“ğ‘Â â—‹bÂ subscriptğµ1subscriptğµâ„“ğ‘tensor-producttensor-productsuperscriptğ¼subscriptğ‘›1subscriptğµ2superscriptğ‘†subscriptğ‘›1subscriptğµ1superscript1subscriptğ‘›2subscriptğ‘:0subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1â‹…subscriptğ‘:subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1subscriptsuperscriptğ‘›â€²â„“â‹…\widetilde{Z}=B_{\ell}Z=(B_{1}\mathbin{\raisebox{0.86108pt}{ $\bigcirc${\rm b}% \hskip 1.49994pt}}B_{\ell})Z=\big{(}I^{(n_{1})}\otimes B_{2}~{}~{}S^{(n_{1})}B% _{1}\otimes\mathbf{1}^{(n_{2})}\big{)}\left(\begin{array}[]{c}Z_{0:n_{1}n^{% \prime}_{\ell-1},\cdot}\\\ Z_{n_{1}n^{\prime}_{\ell-1}:n^{\prime}_{\ell},\cdot}\end{array}\right),over~ start_ARG italic_Z end_ARG = italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT italic_Z = ( italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â—‹b italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT ) italic_Z = ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_B start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) ( start_ARRAY start_ROW start_CELL italic_Z start_POSTSUBSCRIPT 0 : italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT , â‹… end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT : italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT , â‹… end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) , |   
---|---|---  
  
where
Zn1â¢nâ„“âˆ’1â€²:nâ„“â€²,â‹…âˆˆâ„n1â€²Ã—msubscriptğ‘:subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1subscriptsuperscriptğ‘›â€²â„“â‹…superscriptâ„subscriptsuperscriptğ‘›â€²1ğ‘šZ_{n_{1}n^{\prime}_{\ell-1}:n^{\prime}_{\ell},\cdot}\in\mathbb{R}^{n^{\prime}_%
{1}\times m}italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT : italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_m end_POSTSUPERSCRIPT and
Z0:n1â¢nâ„“âˆ’1â€²,â‹…âˆˆâ„n1â¢nâ„“âˆ’1â€²Ã—msubscriptğ‘:0subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1â‹…superscriptâ„subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1ğ‘šZ_{0:n_{1}n^{\prime}_{\ell-1},\cdot}\in\mathbb{R}^{n_{1}n^{\prime}_{\ell-1}%
\times m}italic_Z start_POSTSUBSCRIPT 0 : italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT , â‹… end_POSTSUBSCRIPT
âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT Ã— italic_m
end_POSTSUPERSCRIPT are a partition of the rows of
Zâˆˆâ„nâ„“â€²Ã—mğ‘superscriptâ„subscriptsuperscriptğ‘›â€²â„“ğ‘šZ\in\mathbb{R}^{n^{\prime}_{\ell}\times
m}italic_Z âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT Ã— italic_m end_POSTSUPERSCRIPT. (Note that
nâ„“â€²=n1â¢nâ„“âˆ’1â€²+n1â€²subscriptsuperscriptğ‘›â€²â„“subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1subscriptsuperscriptğ‘›â€²1n^{\prime}_{\ell}=n_{1}n^{\prime}_{\ell-1}+n^{\prime}_{1}italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“
end_POSTSUBSCRIPT = italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ -
1 end_POSTSUBSCRIPT + italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT. The notation
Zi:j,â‹…subscriptğ‘:ğ‘–ğ‘—â‹…Z_{i:j,\cdot}italic_Z start_POSTSUBSCRIPT
italic_i : italic_j , â‹… end_POSTSUBSCRIPT denotes the submatrix of
Zğ‘Zitalic_Z formed by rows
i,i+1,â‹¯,jâˆ’1ğ‘–ğ‘–1â‹¯ğ‘—1i,i+1,\cdots,j-1italic_i , italic_i + 1 , â‹¯ ,
italic_j - 1 and all columns.) Thus it suffices to show that
Zâ€²=(S(n1)â¢B1âŠ—ğŸ(n2))â¢Zn1â¢nâ„“âˆ’1â€²:nâ„“â€²,â‹…superscriptğ‘â€²tensor-
productsuperscriptğ‘†subscriptğ‘›1subscriptğµ1superscript1subscriptğ‘›2subscriptğ‘:subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1subscriptsuperscriptğ‘›â€²â„“â‹…Z^{\prime}=(S^{(n_{1})}B_{1}\otimes\mathbf{1}^{(n_{2})})Z_{n_{1}n^{\prime}_{%
\ell-1}:n^{\prime}_{\ell},\cdot}italic_Z start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT = ( italic_S start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT italic_B
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âŠ— bold_1 start_POSTSUPERSCRIPT (
italic_n start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT )
italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT
roman_â„“ - 1 end_POSTSUBSCRIPT : italic_n start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT , â‹…
end_POSTSUBSCRIPT and
Zâ€²â€²=(I(n1)âŠ—B2)â¢Z0:n1â¢nâ„“âˆ’1â€²,â‹…superscriptğ‘â€²â€²tensor-
productsuperscriptğ¼subscriptğ‘›1subscriptğµ2subscriptğ‘:0subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1â‹…Z^{\prime\prime}=(I^{(n_{1})}\otimes
B_{2})Z_{0:n_{1}n^{\prime}_{\ell-1},\cdot}italic_Z start_POSTSUPERSCRIPT â€²
â€² end_POSTSUPERSCRIPT = ( italic_I start_POSTSUPERSCRIPT ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_B
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ) italic_Z start_POSTSUBSCRIPT 0 :
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ -
1 end_POSTSUBSCRIPT , â‹… end_POSTSUBSCRIPT. By our inductive assumption on
ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT, for all
iâˆˆ[n1]ğ‘–delimited-[]subscriptğ‘›1i\in[n_{1}]italic_i âˆˆ [ italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ],

| (zi,0â€²â€²zi,1â€²â€²â‹®zi,nâ„“âˆ’1â€²â€²)=Bâ„“â‹…Ziâ¢nâ„“âˆ’1â€²:(i+1)â¢nâ„“âˆ’1â€²,â‹….subscriptsuperscriptğ‘§â€²â€²ğ‘–0subscriptsuperscriptğ‘§â€²â€²ğ‘–1â‹®subscriptsuperscriptğ‘§â€²â€²ğ‘–subscriptğ‘›â„“1â‹…subscriptğµâ„“subscriptğ‘:ğ‘–superscriptsubscriptğ‘›â„“1â€²ğ‘–1superscriptsubscriptğ‘›â„“1â€²â‹…\left(\begin{array}[]{c}z^{\prime\prime}_{i,0}\\\ z^{\prime\prime}_{i,1}\\\ \vdots\\\ z^{\prime\prime}_{i,n_{\ell-1}}\end{array}\right)=B_{\ell}\cdot Z_{in_{\ell-1}% ^{\prime}:(i+1)n_{\ell-1}^{\prime},\cdot}.( start_ARRAY start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i , 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i , 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_i , italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) = italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT italic_i italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT : ( italic_i + 1 ) italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT . |   
---|---|---  
  
Thus

| Zâ€²â€²=(Bâ„“â‹…Z0:nâ„“âˆ’1â€²,â‹…Bâ„“â‹…Znâ„“âˆ’1â€²:2â¢nâ„“âˆ’1â€²,â‹…â‹®Bâ„“â‹…Z(n1âˆ’1)â¢nâ„“âˆ’1â€²:n1â¢nâ„“âˆ’1â€²,â‹…)=(I(n1)âŠ—Bâ„“âˆ’1)â‹…Z0:n1â¢nâ„“âˆ’1,â‹…,superscriptğ‘â€²â€²â‹…subscriptğµâ„“subscriptğ‘:0superscriptsubscriptğ‘›â„“1â€²â‹…â‹…subscriptğµâ„“subscriptğ‘:superscriptsubscriptğ‘›â„“1â€²2superscriptsubscriptğ‘›â„“1â€²â‹…â‹®â‹…subscriptğµâ„“subscriptğ‘:subscriptğ‘›11superscriptsubscriptğ‘›â„“1â€²subscriptğ‘›1superscriptsubscriptğ‘›â„“1â€²â‹…â‹…tensor-productsuperscriptğ¼subscriptğ‘›1subscriptğµâ„“1subscriptğ‘:0subscriptğ‘›1subscriptğ‘›â„“1â‹…Z^{\prime\prime}=\left(\begin{array}[]{c}B_{\ell}\cdot Z_{0:n_{\ell-1}^{\prime% },\cdot}\\\ B_{\ell}\cdot Z_{n_{\ell-1}^{\prime}:2n_{\ell-1}^{\prime},\cdot}\\\ \vdots\\\ B_{\ell}\cdot Z_{(n_{1}-1)n_{\ell-1}^{\prime}:n_{1}n_{\ell-1}^{\prime},\cdot}% \end{array}\right)=(I^{(n_{1})}\otimes B_{\ell-1})\cdot Z_{0:n_{1}n_{\ell-1},% \cdot},italic_Z start_POSTSUPERSCRIPT â€² â€² end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT 0 : italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT : 2 italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 ) italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT : italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) = ( italic_I start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT âŠ— italic_B start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT ) â‹… italic_Z start_POSTSUBSCRIPT 0 : italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT , â‹… end_POSTSUBSCRIPT , |   
---|---|---  
  
as required. By our assumption about the base algorithm
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT, we have

| (z1â€²z2â€²â‹®zn1â€²)=B1â‹…Zn1â¢nâ„“âˆ’1â€²:nâ„“â€²,â‹…âˆˆâ„n1Ã—m.subscriptsuperscriptğ‘§â€²1subscriptsuperscriptğ‘§â€²2â‹®subscriptsuperscriptğ‘§â€²subscriptğ‘›1â‹…subscriptğµ1subscriptğ‘:subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1superscriptsubscriptğ‘›â„“â€²â‹…superscriptâ„subscriptğ‘›1ğ‘š\left(\begin{array}[]{c}z^{\prime}_{1}\\\ z^{\prime}_{2}\\\ \vdots\\\ z^{\prime}_{n_{1}}\end{array}\right)=B_{1}\cdot Z_{n_{1}n^{\prime}_{\ell-1}:n_% {\ell}^{\prime},\cdot}\in\mathbb{R}^{n_{1}\times m}.( start_ARRAY start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) = italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT : italic_n start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_m end_POSTSUPERSCRIPT . |   
---|---|---  
  
(Note that
zn1â€²subscriptsuperscriptğ‘§â€²subscriptğ‘›1z^{\prime}_{n_{1}}italic_z
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUBSCRIPT is never actually
used in the algorithm.) With
z0â€²=(ğŸ(m))Tsubscriptsuperscriptğ‘§â€²0superscriptsuperscript0ğ‘šğ‘‡z^{\prime}_{0}=(\mathbf{0}^{(m)})^{T}italic_z
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT = ( bold_0 start_POSTSUPERSCRIPT ( italic_m )
end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT, the
non-cyclic shift S(n1)superscriptğ‘†subscriptğ‘›1S^{(n_{1})}italic_S
start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT )
end_POSTSUPERSCRIPT gives

| (z0â€²z1â€²â‹®zn1âˆ’1â€²)=S(n1)â‹…B1â‹…Zn1â¢nâ„“âˆ’1â€²:nâ„“â€²,â‹…âˆˆâ„n1Ã—m.subscriptsuperscriptğ‘§â€²0subscriptsuperscriptğ‘§â€²1â‹®subscriptsuperscriptğ‘§â€²subscriptğ‘›11â‹…superscriptğ‘†subscriptğ‘›1subscriptğµ1subscriptğ‘:subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1superscriptsubscriptğ‘›â„“â€²â‹…superscriptâ„subscriptğ‘›1ğ‘š\left(\begin{array}[]{c}z^{\prime}_{0}\\\ z^{\prime}_{1}\\\ \vdots\\\ z^{\prime}_{n_{1}-1}\end{array}\right)=S^{(n_{1})}\cdot B_{1}\cdot Z_{n_{1}n^{% \prime}_{\ell-1}:n_{\ell}^{\prime},\cdot}\in\mathbb{R}^{n_{1}\times m}.( start_ARRAY start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) = italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT â‹… italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT : italic_n start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_m end_POSTSUPERSCRIPT . |   
---|---|---  
  
Thus

| Zâ€²=(z0â€²z1â€²â‹®zn1âˆ’1â€²)âŠ—ğŸ(nâ„“âˆ’1)=(S(n1)â‹…B1â‹…Zn1â¢nâ„“âˆ’1â€²:nâ„“â€²,â‹…)âŠ—ğŸ(nâ„“âˆ’1)=((S(n1)â‹…B1)âŠ—ğŸ(nâ„“âˆ’1))â‹…Zn1â¢nâ„“âˆ’1â€²:nâ„“â€²,â‹…,superscriptğ‘â€²tensor-productsubscriptsuperscriptğ‘§â€²0subscriptsuperscriptğ‘§â€²1â‹®subscriptsuperscriptğ‘§â€²subscriptğ‘›11superscript1subscriptğ‘›â„“1tensor-productâ‹…superscriptğ‘†subscriptğ‘›1subscriptğµ1subscriptğ‘:subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1superscriptsubscriptğ‘›â„“â€²â‹…superscript1subscriptğ‘›â„“1â‹…tensor-productâ‹…superscriptğ‘†subscriptğ‘›1subscriptğµ1superscript1subscriptğ‘›â„“1subscriptğ‘:subscriptğ‘›1subscriptsuperscriptğ‘›â€²â„“1superscriptsubscriptğ‘›â„“â€²â‹…Z^{\prime}=\left(\begin{array}[]{c}z^{\prime}_{0}\\\ z^{\prime}_{1}\\\ \vdots\\\ z^{\prime}_{n_{1}-1}\end{array}\right)\otimes\mathbf{1}^{(n_{\ell-1})}=(S^{(n_% {1})}\cdot B_{1}\cdot Z_{n_{1}n^{\prime}_{\ell-1}:n_{\ell}^{\prime},\cdot})% \otimes\mathbf{1}^{(n_{\ell-1})}=\big{(}(S^{(n_{1})}\cdot B_{1})\otimes\mathbf% {1}^{(n_{\ell-1})}\big{)}\cdot Z_{n_{1}n^{\prime}_{\ell-1}:n_{\ell}^{\prime},% \cdot},italic_Z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL â‹® end_CELL end_ROW start_ROW start_CELL italic_z start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUBSCRIPT end_CELL end_ROW end_ARRAY ) âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT = ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT â‹… italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT â‹… italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT : italic_n start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT ) âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT = ( ( italic_S start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT â‹… italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) âŠ— bold_1 start_POSTSUPERSCRIPT ( italic_n start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT ) end_POSTSUPERSCRIPT ) â‹… italic_Z start_POSTSUBSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT : italic_n start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT , â‹… end_POSTSUBSCRIPT , |   
---|---|---  
  
which establishes the correctness of the algorithm.

The space usage of ğ’œâ„“subscriptğ’œâ„“\mathcal{A}_{\ell}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT is is comprised of that of
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT plus that of
ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT. (Note that, although many
copies of ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT are run, they are run
sequentially, so the space usage does not add up.) Thus, by induction, the
space usage of ğ’œâ„“subscriptğ’œâ„“\mathcal{A}_{\ell}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT is â„“â„“\ellroman_â„“ times
that of ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT.

The runtime of ğ’œâ„“subscriptğ’œâ„“\mathcal{A}_{\ell}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT is comprised of that of
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT plus n1subscriptğ‘›1n_{1}italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT times that of
ğ’œâ„“âˆ’1subscriptğ’œâ„“1\mathcal{A}_{\ell-1}caligraphic_A
start_POSTSUBSCRIPT roman_â„“ - 1 end_POSTSUBSCRIPT. By induction, this gives
a runtime of
1+n1+n12+â‹¯+n1â„“=n1â„“+1âˆ’1n1âˆ’1=nâ„“â€²n1â€²1subscriptğ‘›1superscriptsubscriptğ‘›12â‹¯superscriptsubscriptğ‘›1â„“superscriptsubscriptğ‘›1â„“11subscriptğ‘›11subscriptsuperscriptğ‘›â€²â„“subscriptsuperscriptğ‘›â€²11+n_{1}+n_{1}^{2}+\cdots+n_{1}^{\ell}=\frac{n_{1}^{\ell+1}-1}{n_{1}-1}=\frac{n%
^{\prime}_{\ell}}{n^{\prime}_{1}}1 + italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT + italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + â‹¯ + italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“
end_POSTSUPERSCRIPT = divide start_ARG italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ + 1 end_POSTSUPERSCRIPT - 1
end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_ARG
= divide start_ARG italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT end_ARG start_ARG italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT end_ARG times that of
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT, as required. âˆ

###  6.3 Combining Recursion with BLTs

The algorithm in SectionÂ 6.2 requires a base factorization and a
corresponding algorithm. We can instantiate this with the RA-BLT rational
function approximation algorithm from SectionsÂ 3 andÂ 4. This combination
yields the following result.

######  Proposition 6.5 (Instantiating the recursive construction with the
rational function approximation).

Let m,â„“â‰¥1ğ‘šâ„“1m,\ell\geq 1italic_m , roman_â„“ â‰¥ 1,
n1â‰¥5subscriptğ‘›15n_{1}\geq 5italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT â‰¥ 5, and
dâ‰¥2+(12+4â¢logâ¡n1Ï€)2ğ‘‘2superscript124subscriptğ‘›1ğœ‹2d\geq
2+\left(\frac{12+4\log n_{1}}{\pi}\right)^{2}italic_d â‰¥ 2 + ( divide
start_ARG 12 + 4 roman_log italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
end_ARG start_ARG italic_Ï€ end_ARG ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT be integers. Let
n=n1â„“ğ‘›superscriptsubscriptğ‘›1â„“n=n_{1}^{\ell}italic_n = italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“
end_POSTSUPERSCRIPT and
nâ€²=n1â„“+1âˆ’n1n1âˆ’1superscriptğ‘›â€²superscriptsubscriptğ‘›1â„“1subscriptğ‘›1subscriptğ‘›11n^{\prime}=\frac{n_{1}^{\ell+1}-n_{1}}{n_{1}-1}italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = divide start_ARG italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ + 1
end_POSTSUPERSCRIPT - italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG
start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_ARG. Then
there exist matrices
B,CTâˆˆâ„nÃ—nâ€²ğµsuperscriptğ¶ğ‘‡superscriptâ„ğ‘›superscriptğ‘›â€²B,C^{T}\in\mathbb{R}^{n\times
n^{\prime}}italic_B , italic_C start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT and
a streaming algorithm ğ’œğ’œ\mathcal{A}caligraphic_A satisfying the following.

  * â€¢

Valid Matrix Factorization: Bâ¢C=A(n)ğµğ¶superscriptğ´ğ‘›BC=A^{(n)}italic_B
italic_C = italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT.

  * â€¢

Near-Optimality:

| MaxErrâ¡(B,C)â‰¤â„“â‹…(ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)+16â¢n1â¢expâ¡(âˆ’Ï€2â¢dâˆ’2))2,MaxErrğµğ¶â‹…â„“superscriptğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›116subscriptğ‘›1ğœ‹2ğ‘‘22\operatorname{MaxErr}(B,C)\leq\ell\cdot\left(\sqrt{\mathsf{OptLTToe}(n_{1})}+1% 6\sqrt{n_{1}}\exp\left(-\frac{\pi}{2}\sqrt{d-2}\right)\right)^{2},roman_MaxErr ( italic_B , italic_C ) â‰¤ roman_â„“ â‹… ( square-root start_ARG sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + 16 square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT , |   
---|---|---  
  
where
ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)=1+âˆ‘k=1n1âˆ’1(2âˆ’2â¢kâ¢(2â¢kk))2â‰¤1+0.57722+logâ¡(n1)Ï€ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›11superscriptsubscriptğ‘˜1subscriptğ‘›11superscriptsuperscript22ğ‘˜binomial2ğ‘˜ğ‘˜210.57722subscriptğ‘›1ğœ‹\mathsf{OptLTToe}(n_{1})=1+\sum_{k=1}^{n_{1}-1}\left(2^{-2k}{2k\choose
k}% \right)^{2}\leq 1+\frac{0.57722+\log(n_{1})}{\pi}sansserif_OptLTToe (
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) = 1 + âˆ‘
start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUPERSCRIPT ( 2
start_POSTSUPERSCRIPT - 2 italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2
italic_k end_ARG start_ARG italic_k end_ARG ) ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT â‰¤ 1 + divide start_ARG 0.57722 + roman_log ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG.

  * â€¢

Valid Algorithm: The algorithm ğ’œğ’œ\mathcal{A}caligraphic_A takes as input a
stream
Z0,â‹…,Z1,â‹…,â‹¯,Znâ€²âˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘superscriptğ‘›â€²1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n^{\prime}-1,\cdot}\in\mathbb{R}^{1\times
m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT - 1
, â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m
end_POSTSUPERSCRIPT in some arbitrary-but-fixed order (but only reading each
Zi,â‹…subscriptğ‘ğ‘–â‹…Z_{i,\cdot}italic_Z start_POSTSUBSCRIPT italic_i , â‹…
end_POSTSUBSCRIPT once) and outputs a stream
Z~0,â‹…,Z~1,â‹…,â‹¯,Z~nâˆ’1,â‹…âˆˆâ„1Ã—msubscript~ğ‘0â‹…subscript~ğ‘1â‹…â‹¯subscript~ğ‘ğ‘›1â‹…superscriptâ„1ğ‘š\widetilde{Z}_{0,\cdot},\widetilde{Z}_{1,\cdot},\cdots,\widetilde{Z}_{n-1,%
\cdot}\in\mathbb{R}^{1\times m}over~ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , over~ start_ARG italic_Z
end_ARG start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , over~ start_ARG
italic_Z end_ARG start_POSTSUBSCRIPT italic_n - 1 , â‹… end_POSTSUBSCRIPT âˆˆ
blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT such that
Z~=Bâ‹…Z~ğ‘â‹…ğµğ‘\widetilde{Z}=B\cdot Zover~ start_ARG italic_Z end_ARG =
italic_B â‹… italic_Z.

  * â€¢

Efficient Algorithm: The algorithm ğ’œğ’œ\mathcal{A}caligraphic_A uses space
Oâ¢(â„“â¢dâ¢m)ğ‘‚â„“ğ‘‘ğ‘šO(\ell dm)italic_O ( roman_â„“ italic_d italic_m )
and has total runtime Oâ¢(nâ¢dâ¢m)ğ‘‚ğ‘›ğ‘‘ğ‘šO(ndm)italic_O ( italic_n
italic_d italic_m ).

###### Proof.

TheoremÂ 4.6 provides a base factorization
B1,C1âˆˆâ„n1Ã—n1subscriptğµ1subscriptğ¶1superscriptâ„subscriptğ‘›1subscriptğ‘›1B_{1},C_{1}\in\mathbb{R}^{n_{1}\times
n_{1}}italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_C
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT Ã— italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_POSTSUPERSCRIPT and a base
algorithm ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT (AlgorithmÂ 1) for computing
B1â¢Zsubscriptğµ1ğ‘B_{1}Zitalic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
italic_Z in a streaming manner. We are guaranteed that

| â€–B1â€–2â†’âˆsubscriptnormsubscriptğµ1â†’2\displaystyle\|B_{1}\|_{2\to\infty}âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | â‰¤â€–B1âˆ—â€–2â†’âˆ+16â¢n1â¢expâ¡(âˆ’Ï€2â¢dâˆ’2),absentsubscriptnormsuperscriptsubscriptğµ1â†’216subscriptğ‘›1ğœ‹2ğ‘‘2\displaystyle\leq\|B_{1}^{*}\|_{2\to\infty}+16\sqrt{n_{1}}\exp\left(-\frac{\pi% }{2}\sqrt{d-2}\right),â‰¤ âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT + 16 square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) , |   
---|---|---|---  
| â€–C1â€–1â†’2subscriptnormsubscriptğ¶1â†’12\displaystyle\|C_{1}\|_{1\to 2}âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | â‰¤â€–C1âˆ—â€–1â†’2+16â¢n1â¢expâ¡(âˆ’Ï€2â¢dâˆ’2),absentsubscriptnormsuperscriptsubscriptğ¶1â†’1216subscriptğ‘›1ğœ‹2ğ‘‘2\displaystyle\leq\|C_{1}^{*}\|_{1\to 2}+16\sqrt{n_{1}}\exp\left(-\frac{\pi}{2}% \sqrt{d-2}\right),â‰¤ âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT + 16 square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) , |   
  
where
B1âˆ—=C1âˆ—=Mâ¢(f,n1)superscriptsubscriptğµ1superscriptsubscriptğ¶1ğ‘€ğ‘“subscriptğ‘›1B_{1}^{*}=C_{1}^{*}=M(f,n_{1})italic_B
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ—
end_POSTSUPERSCRIPT = italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT = italic_M ( italic_f , italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) for
fâ¢(x)=1/1âˆ’xğ‘“ğ‘¥11ğ‘¥f(x)=1/\sqrt{1-x}italic_f ( italic_x ) = 1 / square-
root start_ARG 1 - italic_x end_ARG. By PropositionÂ 2.2,
B1âˆ—,C1âˆ—superscriptsubscriptğµ1superscriptsubscriptğ¶1B_{1}^{*},C_{1}^{*}italic_B
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ—
end_POSTSUPERSCRIPT , italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT is the optimal matrix
factorization. In particular,

| â€–B1âˆ—â€–2â†’âˆ=â€–C1âˆ—â€–1â†’2=ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)=1+âˆ‘k=1n1âˆ’1(2âˆ’2â¢kâ¢(2â¢kk))2â‰¤1+Î³+logâ¡(n1)Ï€,subscriptnormsuperscriptsubscriptğµ1â†’2subscriptnormsuperscriptsubscriptğ¶1â†’12ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›11superscriptsubscriptğ‘˜1subscriptğ‘›11superscriptsuperscript22ğ‘˜binomial2ğ‘˜ğ‘˜21ğ›¾subscriptğ‘›1ğœ‹\|B_{1}^{*}\|_{2\to\infty}=\|C_{1}^{*}\|_{1\to 2}=\sqrt{\mathsf{OptLTToe}(n_{1% })}=\sqrt{1+\sum_{k=1}^{n_{1}-1}\left(2^{-2k}{2k\choose k}\right)^{2}}\leq% \sqrt{1+\frac{\gamma+\log(n_{1})}{\pi}},âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT = âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âˆ— end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = square-root start_ARG sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG = square-root start_ARG 1 + âˆ‘ start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUPERSCRIPT ( 2 start_POSTSUPERSCRIPT - 2 italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2 italic_k end_ARG start_ARG italic_k end_ARG ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG â‰¤ square-root start_ARG 1 + divide start_ARG italic_Î³ + roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG end_ARG , |   
---|---|---  
  
where Î³â‰¤0.57722ğ›¾0.57722\gamma\leq 0.57722italic_Î³ â‰¤ 0.57722 is the
Euler-Mascheroni constant. The algorithm
ğ’œ1subscriptğ’œ1\mathcal{A}_{1}caligraphic_A start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT runs in space and time (per iteration)
Oâ¢(dâ¢m)ğ‘‚ğ‘‘ğ‘šO(dm)italic_O ( italic_d italic_m ).

Now we apply the recursive algorithm with this base construction. By
PropositionÂ 6.3, we obtain a matrix factorization
Bâ„“,Câ„“âˆˆâ„nÃ—nâ€²subscriptğµâ„“subscriptğ¶â„“superscriptâ„ğ‘›superscriptğ‘›â€²B_{\ell},C_{\ell}\in\mathbb{R}^{n\times
n^{\prime}}italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT , italic_C
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n Ã— italic_n start_POSTSUPERSCRIPT â€²
end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT such that
Bâ„“â¢Câ„“=A(n)subscriptğµâ„“subscriptğ¶â„“superscriptğ´ğ‘›B_{\ell}C_{\ell}=A^{(n)}italic_B
start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT
roman_â„“ end_POSTSUBSCRIPT = italic_A start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT,

| â€–Bâ„“â€–2â†’âˆâ‰¤â„“â¢â€–B1â€–2â†’âˆâ‰¤â„“â¢(ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)+16â¢n1â¢expâ¡(âˆ’Ï€2â¢dâˆ’2)),subscriptnormsubscriptğµâ„“â†’2â„“subscriptnormsubscriptğµ1â†’2â„“ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›116subscriptğ‘›1ğœ‹2ğ‘‘2\|B_{\ell}\|_{2\to\infty}\leq\sqrt{\ell}\|B_{1}\|_{2\to\infty}\leq\sqrt{\ell}% \left(\sqrt{\mathsf{OptLTToe}(n_{1})}+16\sqrt{n_{1}}\exp\left(-\frac{\pi}{2}% \sqrt{d-2}\right)\right),âˆ¥ italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‰¤ square-root start_ARG roman_â„“ end_ARG âˆ¥ italic_B start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‰¤ square-root start_ARG roman_â„“ end_ARG ( square-root start_ARG sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + 16 square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) ) , |   
---|---|---  
  
and

| â€–Câ„“â€–1â†’2=â„“â¢â€–C1â€–1â†’2â‰¤â„“â¢(ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)+16â¢n1â¢expâ¡(âˆ’Ï€2â¢dâˆ’2)).subscriptnormsubscriptğ¶â„“â†’12â„“subscriptnormsubscriptğ¶1â†’12â„“ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›116subscriptğ‘›1ğœ‹2ğ‘‘2\|C_{\ell}\|_{1\to 2}=\sqrt{\ell}\|C_{1}\|_{1\to 2}\leq\sqrt{\ell}\left(\sqrt{% \mathsf{OptLTToe}(n_{1})}+16\sqrt{n_{1}}\exp\left(-\frac{\pi}{2}\sqrt{d-2}% \right)\right).âˆ¥ italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = square-root start_ARG roman_â„“ end_ARG âˆ¥ italic_C start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ square-root start_ARG roman_â„“ end_ARG ( square-root start_ARG sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + 16 square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) ) . |   
---|---|---  
  
By LemmaÂ 6.4, AlgorithmÂ 2 is a valid streaming algorithm for computing
Z~=Bâ„“â¢Z~ğ‘subscriptğµâ„“ğ‘\widetilde{Z}=B_{\ell}Zover~ start_ARG italic_Z
end_ARG = italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT italic_Z
and runs in space Oâ¢(â„“â¢dâ¢m)ğ‘‚â„“ğ‘‘ğ‘šO(\ell dm)italic_O ( roman_â„“
italic_d italic_m ) and total time Oâ¢(nâ¢dâ¢m)ğ‘‚ğ‘›ğ‘‘ğ‘šO(ndm)italic_O (
italic_n italic_d italic_m ), as required. âˆ

Setting parameters in PropositionÂ 6.5 yields our result.

######  Theorem 6.6 (Formal version of TheoremÂ 1.2).

Let n,n1,mâ‰¥1ğ‘›subscriptğ‘›1ğ‘š1n,n_{1},m\geq 1italic_n , italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_m â‰¥ 1 be integers. Then
there exist matrices
B,CTâˆˆâ„nÃ—nâ€²ğµsuperscriptğ¶ğ‘‡superscriptâ„ğ‘›superscriptğ‘›â€²B,C^{T}\in\mathbb{R}^{n\times
n^{\prime}}italic_B , italic_C start_POSTSUPERSCRIPT italic_T
end_POSTSUPERSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT
(for some nâ€²â‰¤Oâ¢(n)superscriptğ‘›â€²ğ‘‚ğ‘›n^{\prime}\leq O(n)italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT â‰¤ italic_O ( italic_n )) and a
streaming algorithm ğ’œğ’œ\mathcal{A}caligraphic_A satisfying the following.

  * â€¢

Valid Matrix Factorization: Bâ¢C=A(n)ğµğ¶superscriptğ´ğ‘›BC=A^{(n)}italic_B
italic_C = italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT.

  * â€¢

Near-Optimality:

| MaxErrâ¡(B,C)â‰¤ğ–®ğ—‰ğ—â¢(n)â‹…(1+Oâ¢(1logâ¡(n1)))+Oâ¢(logâ¡(n1)),MaxErrğµğ¶â‹…ğ–®ğ—‰ğ—ğ‘›1ğ‘‚1subscriptğ‘›1ğ‘‚subscriptğ‘›1\operatorname{MaxErr}(B,C)\leq\mathsf{Opt}(n)\cdot\left(1+O\left(\frac{1}{\log% (n_{1})}\right)\right)+O(\log(n_{1})),roman_MaxErr ( italic_B , italic_C ) â‰¤ sansserif_Opt ( italic_n ) â‹… ( 1 + italic_O ( divide start_ARG 1 end_ARG start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG ) ) + italic_O ( roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) ) , |   
---|---|---  
  
where
ğ–®ğ—‰ğ—â¢(n)=inf{MaxErrâ¡(Bâˆ—,Câˆ—):Bâˆ—â¢Câˆ—=A(n)}=logâ¡nÏ€Â±Oâ¢(1)ğ–®ğ—‰ğ—ğ‘›infimumconditional-
setMaxErrsubscriptğµsubscriptğ¶subscriptğµsubscriptğ¶superscriptğ´ğ‘›plus-or-
minusğ‘›ğœ‹ğ‘‚1\mathsf{Opt}(n)=\inf\\{\operatorname{MaxErr}(B_{*},C_{*}):B_{*}C_{*}=A^{(n)}\\}=%
\frac{\log n}{\pi}\pm O(1)sansserif_Opt ( italic_n ) = roman_inf {
roman_MaxErr ( italic_B start_POSTSUBSCRIPT âˆ— end_POSTSUBSCRIPT , italic_C
start_POSTSUBSCRIPT âˆ— end_POSTSUBSCRIPT ) : italic_B start_POSTSUBSCRIPT âˆ—
end_POSTSUBSCRIPT italic_C start_POSTSUBSCRIPT âˆ— end_POSTSUBSCRIPT =
italic_A start_POSTSUPERSCRIPT ( italic_n ) end_POSTSUPERSCRIPT } = divide
start_ARG roman_log italic_n end_ARG start_ARG italic_Ï€ end_ARG Â± italic_O (
1 ) is the optimal value of the matrix factorization objective over all
possible factorizations.

  * â€¢

Valid Algorithm: The algorithm ğ’œğ’œ\mathcal{A}caligraphic_A takes as input a
stream
Z0,â‹…,Z1,â‹…,â‹¯,Znâ€²âˆ’1,â‹…âˆˆâ„1Ã—msubscriptğ‘0â‹…subscriptğ‘1â‹…â‹¯subscriptğ‘superscriptğ‘›â€²1â‹…superscriptâ„1ğ‘šZ_{0,\cdot},Z_{1,\cdot},\cdots,Z_{n^{\prime}-1,\cdot}\in\mathbb{R}^{1\times
m}italic_Z start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , italic_Z
start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , italic_Z
start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT - 1
, â‹… end_POSTSUBSCRIPT âˆˆ blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m
end_POSTSUPERSCRIPT in some arbitrary-but-fixed order (but only reading each
Zi,â‹…subscriptğ‘ğ‘–â‹…Z_{i,\cdot}italic_Z start_POSTSUBSCRIPT italic_i , â‹…
end_POSTSUBSCRIPT once) and outputs a stream
Z~0,â‹…,Z~1,â‹…,â‹¯,Z~nâˆ’1,â‹…âˆˆâ„1Ã—msubscript~ğ‘0â‹…subscript~ğ‘1â‹…â‹¯subscript~ğ‘ğ‘›1â‹…superscriptâ„1ğ‘š\widetilde{Z}_{0,\cdot},\widetilde{Z}_{1,\cdot},\cdots,\widetilde{Z}_{n-1,%
\cdot}\in\mathbb{R}^{1\times m}over~ start_ARG italic_Z end_ARG
start_POSTSUBSCRIPT 0 , â‹… end_POSTSUBSCRIPT , over~ start_ARG italic_Z
end_ARG start_POSTSUBSCRIPT 1 , â‹… end_POSTSUBSCRIPT , â‹¯ , over~ start_ARG
italic_Z end_ARG start_POSTSUBSCRIPT italic_n - 1 , â‹… end_POSTSUBSCRIPT âˆˆ
blackboard_R start_POSTSUPERSCRIPT 1 Ã— italic_m end_POSTSUPERSCRIPT such that
Z~=Bâ‹…Z~ğ‘â‹…ğµğ‘\widetilde{Z}=B\cdot Zover~ start_ARG italic_Z end_ARG =
italic_B â‹… italic_Z.

  * â€¢

Efficient Algorithm: The algorithm ğ’œğ’œ\mathcal{A}caligraphic_A uses space
Oâ¢(logâ¡(n)â¢logâ¡(n1)â¢m)ğ‘‚ğ‘›subscriptğ‘›1ğ‘šO(\log(n)\log(n_{1})m)italic_O
( roman_log ( italic_n ) roman_log ( italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT ) italic_m ) and has total runtime
O(nlog(n1)2m)O(n\log(n_{1})^{2}m)italic_O ( italic_n roman_log ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT italic_m ).

To obtain TheoremÂ 1.2 from TheoremÂ 6.6 we simply need to set
n1subscriptğ‘›1n_{1}italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT to a
value that is superconstant (so that
1/Oâ¢(logâ¡(n1))=oâ¢(1)1ğ‘‚subscriptğ‘›1ğ‘œ11/O(\log(n_{1}))=o(1)1 / italic_O
( roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) ) = italic_o
( 1 )) but not too large (so that
Oâ¢(logâ¡(n)â¢logâ¡(n1)â¢m)=O~â¢(logâ¡(n)â¢m)ğ‘‚ğ‘›subscriptğ‘›1ğ‘š~ğ‘‚ğ‘›ğ‘šO(\log(n)\log(n_{1})m)=\widetilde{O}(\log(n)m)italic_O
( roman_log ( italic_n ) roman_log ( italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT ) italic_m ) = over~ start_ARG italic_O end_ARG ( roman_log
( italic_n ) italic_m )). For example, we can set
n1=Î˜â¢(logâ¡(n))subscriptğ‘›1Î˜ğ‘›n_{1}=\Theta(\log(n))italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT = roman_Î˜ ( roman_log ( italic_n ) ).

###### Proof.

Let n1â‰¥5subscriptğ‘›15n_{1}\geq 5italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT â‰¥ 5,
d=âŒˆ2+(12+4â¢logâ¡n1Ï€)2âŒ‰ğ‘‘2superscript124subscriptğ‘›1ğœ‹2d=\left\lceil
2+\left(\frac{12+4\log n_{1}}{\pi}\right)^{2}\right\rceilitalic_d = âŒˆ 2 + (
divide start_ARG 12 + 4 roman_log italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT end_ARG start_ARG italic_Ï€ end_ARG ) start_POSTSUPERSCRIPT
2 end_POSTSUPERSCRIPT âŒ‰,
â„“=âŒˆlogâ¡(n)/logâ¡(n1)âŒ‰â„“ğ‘›subscriptğ‘›1\ell=\lceil\log(n)/\log(n_{1})\rceilroman_â„“
= âŒˆ roman_log ( italic_n ) / roman_log ( italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT ) âŒ‰, and
nâ€²=n1â„“+1âˆ’n1n1âˆ’1superscriptğ‘›â€²superscriptsubscriptğ‘›1â„“1subscriptğ‘›1subscriptğ‘›11n^{\prime}=\frac{n_{1}^{\ell+1}-n_{1}}{n_{1}-1}italic_n
start_POSTSUPERSCRIPT â€² end_POSTSUPERSCRIPT = divide start_ARG italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ + 1
end_POSTSUPERSCRIPT - italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG
start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_ARG be
integers.

Then nâ‰¤n1â„“<nâ‹…n1ğ‘›superscriptsubscriptğ‘›1â„“â‹…ğ‘›subscriptğ‘›1n\leq
n_{1}^{\ell}<n\cdot n_{1}italic_n â‰¤ italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT <
italic_n â‹… italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT. We will provide
a matrix factorization of size
n1â„“superscriptsubscriptğ‘›1â„“n_{1}^{\ell}italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT, which
can be truncated to one of size nğ‘›nitalic_n.

PropositionÂ 6.5 provides the matrix factorization and algorithm. It gives the
near-optimality guarantee

| â€–Bâ„“â€–2â†’âˆâ‹…â€–Câ„“â€–1â†’2â‰¤â„“â‹…(ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)+16â¢n1â¢expâ¡(âˆ’Ï€2â¢dâˆ’2))2,â‹…subscriptnormsubscriptğµâ„“â†’2subscriptnormsubscriptğ¶â„“â†’12â‹…â„“superscriptğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›116subscriptğ‘›1ğœ‹2ğ‘‘22\|B_{\ell}\|_{2\to\infty}\cdot\|C_{\ell}\|_{1\to 2}\leq\ell\cdot\left(\sqrt{% \mathsf{OptLTToe}(n_{1})}+16\sqrt{n_{1}}\exp\left(-\frac{\pi}{2}\sqrt{d-2}% \right)\right)^{2},âˆ¥ italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT â‹… âˆ¥ italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ roman_â„“ â‹… ( square-root start_ARG sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + 16 square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT , |   
---|---|---  
  
where
ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)=1+âˆ‘k=1n1âˆ’1(2âˆ’2â¢kâ¢(2â¢kk))2â‰¤1+Î³+logâ¡(n1)Ï€ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›11superscriptsubscriptğ‘˜1subscriptğ‘›11superscriptsuperscript22ğ‘˜binomial2ğ‘˜ğ‘˜21ğ›¾subscriptğ‘›1ğœ‹\mathsf{OptLTToe}(n_{1})=1+\sum_{k=1}^{n_{1}-1}\left(2^{-2k}{2k\choose
k}% \right)^{2}\leq 1+\frac{\gamma+\log(n_{1})}{\pi}sansserif_OptLTToe (
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) = 1 + âˆ‘
start_POSTSUBSCRIPT italic_k = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT - 1 end_POSTSUPERSCRIPT ( 2
start_POSTSUPERSCRIPT - 2 italic_k end_POSTSUPERSCRIPT ( binomial start_ARG 2
italic_k end_ARG start_ARG italic_k end_ARG ) ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT â‰¤ 1 + divide start_ARG italic_Î³ + roman_log ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG.
It only remains for us to simplify this guarantee.

We assume
dâ‰¥2+(2â¢logâ¡(16)+3â¢logâ¡(n1)Ï€)2ğ‘‘2superscript2163subscriptğ‘›1ğœ‹2d\geq
2+\left(\frac{2\log(16)+3\log(n_{1})}{\pi}\right)^{2}italic_d â‰¥ 2 + ( divide
start_ARG 2 roman_log ( 16 ) + 3 roman_log ( italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT so that
16â¢n1â¢expâ¡(âˆ’Ï€2â¢dâˆ’2)â‰¤1/n116subscriptğ‘›1ğœ‹2ğ‘‘21subscriptğ‘›116\sqrt{n_{1}}\exp\left(-\frac{\pi}{2}\sqrt{d-2}\right)\leq
1/n_{1}16 square-root start_ARG italic_n start_POSTSUBSCRIPT 1
end_POSTSUBSCRIPT end_ARG roman_exp ( - divide start_ARG italic_Ï€ end_ARG
start_ARG 2 end_ARG square-root start_ARG italic_d - 2 end_ARG ) â‰¤ 1 /
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT.

Thus

| â€–Bâ„“â€–2â†’âˆâ¢â€–Câ„“â€–1â†’2subscriptnormsubscriptğµâ„“â†’2subscriptnormsubscriptğ¶â„“â†’12\displaystyle\|B_{\ell}\|_{2\to\infty}\|C_{\ell}\|_{1\to 2}âˆ¥ italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT âˆ¥ italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | â‰¤â„“â‹…(ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)+1n1)2absentâ‹…â„“superscriptğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›11subscriptğ‘›12\displaystyle\leq\ell\cdot\left(\sqrt{\mathsf{OptLTToe}(n_{1})}+\frac{1}{n_{1}% }\right)^{2}â‰¤ roman_â„“ â‹… ( square-root start_ARG sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
---|---|---|---  
|  | =â„“â‹…ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)+â„“n1â‹…(2â¢ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾â¢(n1)+1n1)absentâ‹…â„“ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›1â‹…â„“subscriptğ‘›12ğ–®ğ—‰ğ—ğ–«ğ–³ğ–³ğ—ˆğ–¾subscriptğ‘›11subscriptğ‘›1\displaystyle=\ell\cdot\mathsf{OptLTToe}(n_{1})+\frac{\ell}{n_{1}}\cdot\left(2% \sqrt{\mathsf{OptLTToe}(n_{1})}+\frac{1}{n_{1}}\right)= roman_â„“ â‹… sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) + divide start_ARG roman_â„“ end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG â‹… ( 2 square-root start_ARG sansserif_OptLTToe ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG ) |   
|  | â‰¤â„“â‹…(1+Î³+logâ¡(n1)Ï€)+â„“n1â‹…(2â¢n1+1n1)absentâ‹…â„“1ğ›¾subscriptğ‘›1ğœ‹â‹…â„“subscriptğ‘›12subscriptğ‘›11subscriptğ‘›1\displaystyle\leq\ell\cdot\left(1+\frac{\gamma+\log(n_{1})}{\pi}\right)+\frac{% \ell}{n_{1}}\cdot\left(2\sqrt{n_{1}}+\frac{1}{n_{1}}\right)â‰¤ roman_â„“ â‹… ( 1 + divide start_ARG italic_Î³ + roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG ) + divide start_ARG roman_â„“ end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG â‹… ( 2 square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG + divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG ) |   
|  | =â„“â¢logâ¡(n1)Ï€+â„“â‹…(1+Î³/Ï€)+â„“â‹…(2n1+1n12)absentâ„“subscriptğ‘›1ğœ‹â‹…â„“1ğ›¾ğœ‹â‹…â„“2subscriptğ‘›11superscriptsubscriptğ‘›12\displaystyle=\frac{\ell\log(n_{1})}{\pi}+\ell\cdot(1+\gamma/\pi)+\ell\cdot% \left(\frac{2}{\sqrt{n_{1}}}+\frac{1}{n_{1}^{2}}\right)= divide start_ARG roman_â„“ roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG + roman_â„“ â‹… ( 1 + italic_Î³ / italic_Ï€ ) + roman_â„“ â‹… ( divide start_ARG 2 end_ARG start_ARG square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG end_ARG + divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) |   
|  | =logâ¡(n1â„“)Ï€+â„“â‹…(1+Î³Ï€+2n1+1n12)absentsuperscriptsubscriptğ‘›1â„“ğœ‹â‹…â„“1ğ›¾ğœ‹2subscriptğ‘›11superscriptsubscriptğ‘›12\displaystyle=\frac{\log(n_{1}^{\ell})}{\pi}+\ell\cdot\left(1+\frac{\gamma}{% \pi}+\frac{2}{\sqrt{n_{1}}}+\frac{1}{n_{1}^{2}}\right)= divide start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT roman_â„“ end_POSTSUPERSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG + roman_â„“ â‹… ( 1 + divide start_ARG italic_Î³ end_ARG start_ARG italic_Ï€ end_ARG + divide start_ARG 2 end_ARG start_ARG square-root start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT end_ARG end_ARG + divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) |   
|  | â‰¤logâ¡(n)+logâ¡(n1)Ï€+â„“â‹…(1+Î³Ï€+25+152)absentğ‘›subscriptğ‘›1ğœ‹â‹…â„“1ğ›¾ğœ‹251superscript52\displaystyle\leq\frac{\log(n)+\log(n_{1})}{\pi}+\ell\cdot\left(1+\frac{\gamma% }{\pi}+\frac{2}{\sqrt{5}}+\frac{1}{5^{2}}\right)â‰¤ divide start_ARG roman_log ( italic_n ) + roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG + roman_â„“ â‹… ( 1 + divide start_ARG italic_Î³ end_ARG start_ARG italic_Ï€ end_ARG + divide start_ARG 2 end_ARG start_ARG square-root start_ARG 5 end_ARG end_ARG + divide start_ARG 1 end_ARG start_ARG 5 start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG ) |   
|  | â‰¤logâ¡(n)Ï€+3â¢â„“+logâ¡(n1)Ï€.absentğ‘›ğœ‹3â„“subscriptğ‘›1ğœ‹\displaystyle\leq\frac{\log(n)}{\pi}+3\ell+\frac{\log(n_{1})}{\pi}.â‰¤ divide start_ARG roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG + 3 roman_â„“ + divide start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG . |   
  
Now we invoke the lower bound of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitematouvsek2020factorization
or \AtNextCite\AtEachCitekey\@nocounterrmaxnames\textcitemathias1993hadamard
(see EquationÂ 2.9), which tells us

| ğ–®ğ—‰ğ—â¢(n)â‰¥logâ¡(n)Ï€âˆ’1,ğ–®ğ—‰ğ—ğ‘›ğ‘›ğœ‹1\mathsf{Opt}(n)\geq\frac{\log(n)}{\pi}-1,sansserif_Opt ( italic_n ) â‰¥ divide start_ARG roman_log ( italic_n ) end_ARG start_ARG italic_Ï€ end_ARG - 1 , |   
---|---|---  
  
where ğ–®ğ—‰ğ—â¢(n)ğ–®ğ—‰ğ—ğ‘›\mathsf{Opt}(n)sansserif_Opt ( italic_n ) is the
optimal value of the objective function over all factorizations of size
nğ‘›nitalic_n. Thus

| â€–Bâ„“â€–2â†’âˆâ¢â€–Câ„“â€–1â†’2subscriptnormsubscriptğµâ„“â†’2subscriptnormsubscriptğ¶â„“â†’12\displaystyle\|B_{\ell}\|_{2\to\infty}\|C_{\ell}\|_{1\to 2}âˆ¥ italic_B start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT âˆ¥ italic_C start_POSTSUBSCRIPT roman_â„“ end_POSTSUBSCRIPT âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT | â‰¤ğ–®ğ—‰ğ—â¢(n)+1+3â¢â„“+logâ¡(n1)Ï€absentğ–®ğ—‰ğ—ğ‘›13â„“subscriptğ‘›1ğœ‹\displaystyle\leq\mathsf{Opt}(n)+1+3\ell+\frac{\log(n_{1})}{\pi}â‰¤ sansserif_Opt ( italic_n ) + 1 + 3 roman_â„“ + divide start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG |   
---|---|---|---  
|  | â‰¤ğ–®ğ—‰ğ—â¢(n)+4+3â¢logâ¡(n)logâ¡(n1)+logâ¡(n1)Ï€absentğ–®ğ—‰ğ—ğ‘›43ğ‘›subscriptğ‘›1subscriptğ‘›1ğœ‹\displaystyle\leq\mathsf{Opt}(n)+4+3\frac{\log(n)}{\log(n_{1})}+\frac{\log(n_{% 1})}{\pi}â‰¤ sansserif_Opt ( italic_n ) + 4 + 3 divide start_ARG roman_log ( italic_n ) end_ARG start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + divide start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG |   
|  | â‰¤ğ–®ğ—‰ğ—â¢(n)+4+3â¢1+Ï€â¢ğ–®ğ—‰ğ—â¢(n)logâ¡(n1)+logâ¡(n1)Ï€absentğ–®ğ—‰ğ—ğ‘›431ğœ‹ğ–®ğ—‰ğ—ğ‘›subscriptğ‘›1subscriptğ‘›1ğœ‹\displaystyle\leq\mathsf{Opt}(n)+4+3\frac{1+\pi\mathsf{Opt}(n)}{\log(n_{1})}+% \frac{\log(n_{1})}{\pi}â‰¤ sansserif_Opt ( italic_n ) + 4 + 3 divide start_ARG 1 + italic_Ï€ sansserif_Opt ( italic_n ) end_ARG start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + divide start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG |   
|  | =ğ–®ğ—‰ğ—â¢(n)â‹…(1+3â¢Ï€logâ¡(n1))+4+3logâ¡(n1)+logâ¡(n1)Ï€.absentâ‹…ğ–®ğ—‰ğ—ğ‘›13ğœ‹subscriptğ‘›143subscriptğ‘›1subscriptğ‘›1ğœ‹\displaystyle=\mathsf{Opt}(n)\cdot\left(1+\frac{3\pi}{\log(n_{1})}\right)+4+% \frac{3}{\log(n_{1})}+\frac{\log(n_{1})}{\pi}.= sansserif_Opt ( italic_n ) â‹… ( 1 + divide start_ARG 3 italic_Ï€ end_ARG start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG ) + 4 + divide start_ARG 3 end_ARG start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG + divide start_ARG roman_log ( italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG start_ARG italic_Ï€ end_ARG . |   
  
By PropositionÂ 6.5, the space usage of the algorithm is
Oâ¢(â„“â¢dâ¢m)=Oâ¢(logâ¡(n)logâ¡(n1)â¢(logâ¡(n1))2â¢m)=Oâ¢(logâ¡(n)â¢logâ¡(n1)â¢m)ğ‘‚â„“ğ‘‘ğ‘šğ‘‚ğ‘›subscriptğ‘›1superscriptsubscriptğ‘›12ğ‘šğ‘‚ğ‘›subscriptğ‘›1ğ‘šO(\ell
dm)=O\left(\frac{\log(n)}{\log(n_{1})}(\log(n_{1}))^{2}m\right)=O(\log(%
n)\log(n_{1})m)italic_O ( roman_â„“ italic_d italic_m ) = italic_O ( divide
start_ARG roman_log ( italic_n ) end_ARG start_ARG roman_log ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) end_ARG ( roman_log ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT italic_m ) = italic_O ( roman_log ( italic_n ) roman_log (
italic_n start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) italic_m ) and the total
runtime is O(ndm)=O(nlog(n1)2m)O(ndm)=O(n\log(n_{1})^{2}m)italic_O ( italic_n
italic_d italic_m ) = italic_O ( italic_n roman_log ( italic_n
start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT italic_m ). âˆ

##  7 Numerical Lower Bound on Optimal Performance

In this section, we develop _numerical_ lower bounds on the optimal matrix
factorizations of the all-ones lower triangular matrix
A(n)superscriptğ´ğ‘›A^{(n)}italic_A start_POSTSUPERSCRIPT ( italic_n )
end_POSTSUPERSCRIPT for various classes of matrices. More precisely, given the
sequence length nğ‘›nitalic_n, we write down a semidefinite program that
provides a lower bound on the lowest achievable error over a specific class of
correlation matrices (for example, Toeplitz matrices or triangular matrices).

In general, we consider mechanisms whose matrices can be written as
C=ğ•â¢(c)=âˆ‘iğ•iâ¢ciğ¶ğ•ğ‘subscriptğ‘–subscriptğ•ğ‘–subscriptğ‘ğ‘–C=\mathbb{J}\left({c}\right)=\sum_{i}\mathbb{J}_{i}c_{i}italic_C
= blackboard_J ( italic_c ) = âˆ‘ start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT blackboard_J start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT
italic_c start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT where
câˆˆâ„mğ‘superscriptâ„ğ‘šc\in\mathbb{R}^{m}italic_c âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_m end_POSTSUPERSCRIPT denotes the parameters of
the mechanism (to be optimized) and ğ•:â„mâ†¦â„nÃ—n:ğ•maps-
tosuperscriptâ„ğ‘šsuperscriptâ„ğ‘›ğ‘›\mathbb{J}:\mathbb{R}^{m}\mapsto\mathbb{R}^{n\times
n}blackboard_J : blackboard_R start_POSTSUPERSCRIPT italic_m
end_POSTSUPERSCRIPT â†¦ blackboard_R start_POSTSUPERSCRIPT italic_n Ã—
italic_n end_POSTSUPERSCRIPT is an linear operator and
ğ•iâˆˆâ„nÃ—nsubscriptğ•ğ‘–superscriptâ„ğ‘›ğ‘›\mathbb{J}_{i}\in\mathbb{R}^{n\times
n}blackboard_J start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n Ã— italic_n end_POSTSUPERSCRIPT are â€œbasisâ€
matrices. Any linear subspace of the space of nÃ—nğ‘›ğ‘›n\times nitalic_n Ã—
italic_n matrices (including lower triangular matrices and Toeplitz matrices)
can be expressed in this form.

All results in this section derive from the following fundamental result which
is a straightforward consequence of weak duality:

######  Theorem 7.1.

Let ğ”¸ğ”¸\mathbb{A}blackboard_A denote the nÃ—nğ‘›ğ‘›n\times nitalic_n Ã—
italic_n lower triangular matrix with all entries equal to 1111. For any
câˆˆâ„mğ‘superscriptâ„ğ‘šc\in\mathbb{R}^{m}italic_c âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_m end_POSTSUPERSCRIPT, define the objective for
the correlated mechanism with correlation matrix
ğ•â¢(c)ğ•ğ‘\mathbb{J}\left({c}\right)blackboard_J ( italic_c ) by

| Fâ¢(c)=MaxErrâ¡((ğ•â¢(c))âˆ’1â¢ğ”¸,ğ•â¢(c))=â€–ğ•â¢(c)â€–1â†’22â¢â€–(ğ•â¢(c))âˆ’1â¢ğ”¸â€–2â†’âˆ2.ğ¹ğ‘MaxErrsuperscriptğ•ğ‘1ğ”¸ğ•ğ‘superscriptsubscriptnormğ•ğ‘â†’122superscriptsubscriptnormsuperscriptğ•ğ‘1ğ”¸â†’22F\left({c}\right)=\operatorname{MaxErr}({\left({\mathbb{J}\left({c}\right)}% \right)^{-1}}\mathbb{A},\mathbb{J}\left({c}\right))=\left\|\mathbb{J}\left({c}% \right)\right\|_{1\to 2}^{2}\left\|{\left({\mathbb{J}\left({c}\right)}\right)^% {-1}}\mathbb{A}\right\|_{2\to\infty}^{2}.italic_F ( italic_c ) = roman_MaxErr ( ( blackboard_J ( italic_c ) ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT blackboard_A , blackboard_J ( italic_c ) ) = âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT âˆ¥ ( blackboard_J ( italic_c ) ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT blackboard_A âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT . |   
---|---|---  
  
Further, for any set
â„­âŠ†â„mâ„­superscriptâ„ğ‘š\mathfrak{C}\subseteq\mathbb{R}^{m}fraktur_C âŠ†
blackboard_R start_POSTSUPERSCRIPT italic_m end_POSTSUPERSCRIPT, we have

| mincâˆˆâ„­â¡Fâ¢(c)â‰¥1minÎ“0,â€¦,Î“Nâˆˆğ•Š+nâˆ‘iğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡maxâ€–ğ•â¢(c)â€–1â†¦2=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),âˆ‘iÎ“iâŸ©subscriptğ‘â„­ğ¹ğ‘1subscriptsubscriptÎ“0â€¦subscriptÎ“ğ‘subscriptsuperscriptğ•Šğ‘›subscriptğ‘–superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–1subscriptsubscriptnormğ•ğ‘maps-to121ğ•superscriptğ‘topğ•ğ‘subscriptğ‘–subscriptÎ“ğ‘–\displaystyle\min_{c\in\mathfrak{C}}F\left({c}\right)\geq\frac{1}{% \displaystyle\min_{\begin{subarray}{c}\Gamma_{0},\ldots,\Gamma_{N}\in\mathbb{S% }^{n}_{+}\\\ \sum_{i}\mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\max_{\left% \|\mathbb{J}\left({c}\right)\right\|_{1\mapsto 2}=1}\left\langle{{\mathbb{J}% \left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\sum_{i}\Gamma_{i}}\right\rangle}roman_min start_POSTSUBSCRIPT italic_c âˆˆ fraktur_C end_POSTSUBSCRIPT italic_F ( italic_c ) â‰¥ divide start_ARG 1 end_ARG start_ARG roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â€¦ , roman_Î“ start_POSTSUBSCRIPT italic_N end_POSTSUBSCRIPT âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT roman_max start_POSTSUBSCRIPT âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†¦ 2 end_POSTSUBSCRIPT = 1 end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© end_ARG |  | (7.1)  
---|---|---|---  
  
where ğ•Š+nsubscriptsuperscriptğ•Šğ‘›\mathbb{S}^{n}_{+}blackboard_S
start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT +
end_POSTSUBSCRIPT denotes the space of symmetric positive semidefinite
nÃ—nğ‘›ğ‘›n\times nitalic_n Ã— italic_n matrices,
ğ”¸isubscriptğ”¸ğ‘–\mathbb{A}_{i}blackboard_A start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT denotes the iğ‘–iitalic_i-th column of
ğ”¸ğ”¸\mathbb{A}blackboard_A and
âŸ¨A,BâŸ©=traceâ¢(Aâ¢B)ğ´ğµtraceğ´ğµ\left\langle{A},{B}\right\rangle=\text{trace}\left({AB}\right)âŸ¨
italic_A , italic_B âŸ© = trace ( italic_A italic_B ) denotes the standard
inner product between symmetric matrices
A,Bâˆˆğ•ŠNğ´ğµsuperscriptğ•Šğ‘A,B\in\mathbb{S}^{N}italic_A , italic_B âˆˆ
blackboard_S start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT.

Furthermore, if the inner maximization can be relaxed to a concave
maximization problem, i.e, there exists a compact convex set
ğ’âŠ‚ğ•ŠNğ’superscriptğ•Šğ‘\mathcal{C}\subset\mathbb{S}^{N}caligraphic_C âŠ‚
blackboard_S start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT such that

| maxcâˆˆâ„­â€–ğ•â¢(c)â€–1â†¦2=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“âŸ©=maxSâˆˆğ’â¡âŸ¨S,Î“âŸ©âˆ€Î“âˆˆğ•Š+Nformulae-sequencesubscriptğ‘â„­subscriptnormğ•ğ‘maps-to121ğ•superscriptğ‘topğ•ğ‘Î“subscriptğ‘†ğ’ğ‘†Î“for-allÎ“subscriptsuperscriptğ•Šğ‘\max_{\begin{subarray}{c}c\in\mathfrak{C}\\\ \left\|\mathbb{J}\left({c}\right)\right\|_{1\mapsto 2}=1\end{subarray}}\left% \langle{{\mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\Gamma% }\right\rangle=\max_{S\in\mathcal{C}}\left\langle{S},{\Gamma}\right\rangle% \quad\forall\Gamma\in\mathbb{S}^{N}_{+}roman_max start_POSTSUBSCRIPT start_ARG start_ROW start_CELL italic_c âˆˆ fraktur_C end_CELL end_ROW start_ROW start_CELL âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†¦ 2 end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ âŸ© = roman_max start_POSTSUBSCRIPT italic_S âˆˆ caligraphic_C end_POSTSUBSCRIPT âŸ¨ italic_S , roman_Î“ âŸ© âˆ€ roman_Î“ âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT |   
---|---|---  
  
then the inequality in Eq.Â 7.1 is an equality.

###### Proof.

Since the objective is invariant to scaling cğ‘citalic_c by any positive
constant, i.e., Fâ¢(Î±â¢c)=Fâ¢(c)ğ¹ğ›¼ğ‘ğ¹ğ‘F\left({\alpha
c}\right)=F\left({c}\right)italic_F ( italic_Î± italic_c ) = italic_F (
italic_c ) for all Î±âˆˆâ„,Î±>0formulae-
sequenceğ›¼â„ğ›¼0\alpha\in\mathbb{R},\alpha>0italic_Î± âˆˆ blackboard_R ,
italic_Î± > 0, we can set
Î±=1â€–ğ•â¢câ€–1â†’2ğ›¼1subscriptnormğ•ğ‘â†’12\alpha=\frac{1}{\left\|\mathbb{J}{c}\right\|_{1\to
2}}italic_Î± = divide start_ARG 1 end_ARG start_ARG âˆ¥ blackboard_J italic_c
âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT end_ARG so that the
optimization problem becomes

| mincâˆˆâ„­â€–ğ•â¢(c)â€–1â†’2=1â¡â€–(ğ•â¢(c))âˆ’1â¢ğ”¸â€–2â†’inf2=mincâˆˆâ„­â€–ğ•â¢(c)â€–1â†’2=1â¡maxiâ¡â€–(ğ•â¢(c)âŠ¤)âˆ’1â¢ğ”¸iâ€–2subscriptğ‘â„­subscriptnormğ•ğ‘â†’121superscriptsubscriptnormsuperscriptğ•ğ‘1ğ”¸â†’2infimum2subscriptğ‘â„­subscriptnormğ•ğ‘â†’121subscriptğ‘–superscriptnormsuperscriptğ•superscriptğ‘top1subscriptğ”¸ğ‘–2\displaystyle\min_{\begin{subarray}{c}c\in\mathfrak{C}\\\ \left\|\mathbb{J}\left({c}\right)\right\|_{1\to 2}=1\end{subarray}}\left\|{% \left({\mathbb{J}\left({c}\right)}\right)^{-1}}\mathbb{A}\right\|_{2\to\inf}^{% 2}=\min_{\begin{subarray}{c}c\in\mathfrak{C}\\\ \left\|\mathbb{J}\left({c}\right)\right\|_{1\to 2}=1\end{subarray}}\max_{i}% \left\|{\left({{\mathbb{J}\left({c}\right)}^{\top}}\right)^{-1}}\mathbb{A}_{i}% \right\|^{2}roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL italic_c âˆˆ fraktur_C end_CELL end_ROW start_ROW start_CELL âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âˆ¥ ( blackboard_J ( italic_c ) ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT blackboard_A âˆ¥ start_POSTSUBSCRIPT 2 â†’ roman_inf end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL italic_c âˆˆ fraktur_C end_CELL end_ROW start_ROW start_CELL âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ ( blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |  | (7.2)  
---|---|---|---  
  
From Lemma 7.3, we have that

| ğâŠ¤â¢(M)âˆ’1â¢ğ=1minÎ“âˆˆğ•Š+NğâŠ¤â¢Î“â¢ğâ¡âŸ¨Î“,MâŸ©superscriptğtopsuperscriptğ‘€1ğ1subscriptÎ“subscriptsuperscriptğ•Šğ‘superscriptğtopÎ“ğÎ“ğ‘€{\mathbf{e}}^{\top}{\left({M}\right)^{-1}}\mathbf{e}=\frac{1}{\min_{\begin{% subarray}{c}\Gamma\in\mathbb{S}^{N}_{+}\\\ {\mathbf{e}}^{\top}\Gamma\mathbf{e}\end{subarray}}\left\langle{\Gamma},{M}% \right\rangle}bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT ( italic_M ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT bold_e = divide start_ARG 1 end_ARG start_ARG roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_N end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT roman_Î“ bold_e end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ roman_Î“ , italic_M âŸ© end_ARG |   
---|---|---  
  
for any Mâˆˆğ•Š+n+ğ‘€limit-
fromsubscriptsuperscriptğ•Šğ‘›M\in\mathbb{S}^{n}_{+}+italic_M âˆˆ blackboard_S
start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT +
end_POSTSUBSCRIPT +. Applying this to
M=ğ•â¢(c)âŠ¤â¢ğ•â¢(c)ğ‘€ğ•superscriptğ‘topğ•ğ‘M={\mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)italic_M
= blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT
blackboard_J ( italic_c ) and
ğ=ğ”¸iğsubscriptğ”¸ğ‘–\mathbf{e}=\mathbb{A}_{i}bold_e = blackboard_A
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT (for
i=0,â€¦,nğ‘–0â€¦ğ‘›i=0,\ldots,nitalic_i = 0 , â€¦ , italic_n) and plugging
this into (7.2), we obtain

| maxiâ¡â€–(ğ•â¢(c)âŠ¤)âˆ’1â¢ğ”¸iâ€–2=maxiâ¡maxÎ“iâª°0ğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡1âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“iâŸ©=1miniâ¡minÎ“iâª°0ğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“iâŸ©subscriptğ‘–superscriptnormsuperscriptğ•superscriptğ‘top1subscriptğ”¸ğ‘–2subscriptğ‘–subscriptsucceeds-or-equalssubscriptÎ“ğ‘–0superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–11ğ•superscriptğ‘topğ•ğ‘subscriptÎ“ğ‘–1subscriptğ‘–subscriptsucceeds-or-equalssubscriptÎ“ğ‘–0superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–1ğ•superscriptğ‘topğ•ğ‘subscriptÎ“ğ‘–\max_{i}\left\|{\left({{\mathbb{J}\left({c}\right)}^{\top}}\right)^{-1}}% \mathbb{A}_{i}\right\|^{2}=\max_{i}\max_{\begin{subarray}{c}\Gamma_{i}\succeq 0% \\\ \mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\frac{1}{\left% \langle{{\mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\Gamma% _{i}}\right\rangle}=\frac{1}{\min_{i}\min_{\begin{subarray}{c}\Gamma_{i}% \succeq 0\\\ \mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\left\langle{{% \mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\Gamma_{i}}% \right\rangle}roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ ( blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_max start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_max start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âª° 0 end_CELL end_ROW start_ROW start_CELL blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT divide start_ARG 1 end_ARG start_ARG âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© end_ARG = divide start_ARG 1 end_ARG start_ARG roman_min start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âª° 0 end_CELL end_ROW start_ROW start_CELL blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© end_ARG |   
---|---|---  
  
The denominator can be rewritten as

| minÎ½âˆˆÎ”nâ¢âˆ‘iÎ½iâ¢(minÎ“iâª°0ğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“iâŸ©)=minÎ½âˆˆÎ”nâ¢âˆ‘iminÎ“iâª°0ğ”¸iTâ¢Î“iâ¢ğ”¸i=Î½iâ¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“iâŸ©subscriptğœˆsuperscriptÎ”ğ‘›subscriptğ‘–subscriptğœˆğ‘–subscriptsucceeds-or-equalssubscriptÎ“ğ‘–0superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–1ğ•superscriptğ‘topğ•ğ‘subscriptÎ“ğ‘–subscriptğœˆsuperscriptÎ”ğ‘›subscriptğ‘–subscriptsucceeds-or-equalssubscriptÎ“ğ‘–0superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–subscriptğœˆğ‘–ğ•superscriptğ‘topğ•ğ‘subscriptÎ“ğ‘–\displaystyle\min_{\nu\in\Delta^{n}}\sum_{i}\nu_{i}\left({\min_{\begin{% subarray}{c}\Gamma_{i}\succeq 0\\\ \mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\left\langle{{% \mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\Gamma_{i}}% \right\rangle}\right)=\min_{\nu\in\Delta^{n}}\sum_{i}\min_{\begin{subarray}{c}% \Gamma_{i}\succeq 0\\\ \mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=\nu_{i}\end{subarray}}\left\langle{% {\mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\Gamma_{i}}\right\rangleroman_min start_POSTSUBSCRIPT italic_Î½ âˆˆ roman_Î” start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Î½ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ( roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âª° 0 end_CELL end_ROW start_ROW start_CELL blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© ) = roman_min start_POSTSUBSCRIPT italic_Î½ âˆˆ roman_Î” start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âª° 0 end_CELL end_ROW start_ROW start_CELL blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = italic_Î½ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© |   
---|---|---  
| =minÎ“0,â€¦,Î“Nâˆˆğ•Š+nâˆ‘iğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),âˆ‘iÎ“iâŸ©absentsubscriptsubscriptÎ“0â€¦subscriptÎ“ğ‘subscriptsuperscriptğ•Šğ‘›subscriptğ‘–superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–1ğ•superscriptğ‘topğ•ğ‘subscriptğ‘–subscriptÎ“ğ‘–\displaystyle=\min_{\begin{subarray}{c}\Gamma_{0},\ldots,\Gamma_{N}\in\mathbb{% S}^{n}_{+}\\\ \sum_{i}\mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\left% \langle{{\mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\sum_{% i}\Gamma_{i}}\right\rangle= roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â€¦ , roman_Î“ start_POSTSUBSCRIPT italic_N end_POSTSUBSCRIPT âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© |   
  
where Î”nsuperscriptÎ”ğ‘›\Delta^{n}roman_Î” start_POSTSUPERSCRIPT italic_n
end_POSTSUPERSCRIPT is the simplex in nğ‘›nitalic_n dimensions. Thus, the
optimization problem (7.2) can be rewritten as

| minâ€–ğ•â¢(c)â€–1â†’2â‰¤1â¡1minÎ“0,â€¦,Î“Nâˆˆğ•Š+nâˆ‘iğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),âˆ‘iÎ“iâŸ©=1maxâ€–ğ•â¢(c)â€–1â†’2â‰¤1â¡minÎ“0,â€¦,Î“nâˆˆğ•Š+nâˆ‘iğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),âˆ‘iÎ“iâŸ©subscriptsubscriptnormğ•ğ‘â†’1211subscriptsubscriptÎ“0â€¦subscriptÎ“ğ‘subscriptsuperscriptğ•Šğ‘›subscriptğ‘–superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–1ğ•superscriptğ‘topğ•ğ‘subscriptğ‘–subscriptÎ“ğ‘–1subscriptsubscriptnormğ•ğ‘â†’121subscriptsubscriptÎ“0â€¦subscriptÎ“ğ‘›subscriptsuperscriptğ•Šğ‘›subscriptğ‘–superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–1ğ•superscriptğ‘topğ•ğ‘subscriptğ‘–subscriptÎ“ğ‘–\min_{\left\|\mathbb{J}\left({c}\right)\right\|_{1\to 2}\leq 1}\frac{1}{\min_{% \begin{subarray}{c}\Gamma_{0},\ldots,\Gamma_{N}\in\mathbb{S}^{n}_{+}\\\ \sum_{i}\mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\left% \langle{{\mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\sum_{% i}\Gamma_{i}}\right\rangle}=\frac{1}{\displaystyle\max_{\left\|\mathbb{J}\left% ({c}\right)\right\|_{1\to 2}\leq 1}\min_{\begin{subarray}{c}\Gamma_{0},\ldots,% \Gamma_{n}\in\mathbb{S}^{n}_{+}\\\ \sum_{i}\mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\left% \langle{{\mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\sum_{% i}\Gamma_{i}}\right\rangle}roman_min start_POSTSUBSCRIPT âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ 1 end_POSTSUBSCRIPT divide start_ARG 1 end_ARG start_ARG roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â€¦ , roman_Î“ start_POSTSUBSCRIPT italic_N end_POSTSUBSCRIPT âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© end_ARG = divide start_ARG 1 end_ARG start_ARG roman_max start_POSTSUBSCRIPT âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ 1 end_POSTSUBSCRIPT roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â€¦ , roman_Î“ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© end_ARG |   
---|---|---  
  
By weak duality, we have that the optimal value is bounded below by

| 1minÎ“0,â€¦,Î“nâˆˆğ•Š+nâˆ‘iğ”¸iTâ¢Î“iâ¢ğ”¸i=1â¡maxâ€–ğ•â¢(c)â€–1â†’2â‰¤1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),âˆ‘iÎ“iâŸ©1subscriptsubscriptÎ“0â€¦subscriptÎ“ğ‘›subscriptsuperscriptğ•Šğ‘›subscriptğ‘–superscriptsubscriptğ”¸ğ‘–ğ‘‡subscriptÎ“ğ‘–subscriptğ”¸ğ‘–1subscriptsubscriptnormğ•ğ‘â†’121ğ•superscriptğ‘topğ•ğ‘subscriptğ‘–subscriptÎ“ğ‘–\frac{1}{\displaystyle\min_{\begin{subarray}{c}\Gamma_{0},\ldots,\Gamma_{n}\in% \mathbb{S}^{n}_{+}\\\ \sum_{i}\mathbb{A}_{i}^{T}\Gamma_{i}\mathbb{A}_{i}=1\end{subarray}}\max_{\left% \|\mathbb{J}\left({c}\right)\right\|_{1\to 2}\leq 1}\left\langle{{\mathbb{J}% \left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\sum_{i}\Gamma_{i}}\right\rangle}divide start_ARG 1 end_ARG start_ARG roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT , â€¦ , roman_Î“ start_POSTSUBSCRIPT italic_n end_POSTSUBSCRIPT âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT blackboard_A start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT roman_max start_POSTSUBSCRIPT âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ 1 end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_Î“ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âŸ© end_ARG |   
---|---|---  
  
which gives Eq.Â 7.1.

Furthermore, if the inner maximization can be rewritten as a concave
maximization problem, the overall problem is a convex-concave problem and
strong duality holds by the Von-Neumann minimax theorem
\parencitev1928theorie, so that the order of the min and max can be
interchanged without changing the optimal value. Hence, the lower bound is
tight.

âˆ

######  Corollary 7.2.

Let ğ’¥={ğ•â¢(c):câˆˆâ„­}ğ’¥conditional-
setğ•ğ‘ğ‘â„­\mathcal{J}=\\{\mathbb{J}\left({c}\right):c\in\mathfrak{C}\\}caligraphic_J
= { blackboard_J ( italic_c ) : italic_c âˆˆ fraktur_C }. A tight lower bound
in TheoremÂ 7.1 is achieved in the following 3 cases:

  * â€¢

ğ’¥ğ’¥\mathcal{J}caligraphic_J is the set of all lower triangular matrices.

  * â€¢

ğ’¥ğ’¥\mathcal{J}caligraphic_J is the set of all lower triangular Toeplitz
matrices.

  * â€¢

ğ’¥ğ’¥\mathcal{J}caligraphic_J is the set of all lower triangular Toeplitz
matrices formed from a degree 1111 constant recurrent sequence.

###### Proof.

1\. If ğ’¥ğ’¥\mathcal{J}caligraphic_J is the set of all lower triangular
matrices, for any ğ•âˆˆğ’¥ğ•ğ’¥\mathbb{J}\in\mathcal{J}blackboard_J âˆˆ
caligraphic_J, letting
Î”=ğ•âŠ¤â¢ğ•Î”superscriptğ•topğ•\Delta={\mathbb{J}}^{\top}\mathbb{J}roman_Î” =
blackboard_J start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J, we
have that

| maxâ€–ğ•â€–1â†’2â‰¤1,ğ•âˆˆğ’¥â¡âŸ¨ğ•âŠ¤â¢ğ•,Î“âŸ©â‰¤maxÎ”âª°0diagâ¢(Î”)â‰¤1â¡âŸ¨Î”,Î“âŸ©subscriptformulae-sequencesubscriptnormğ•â†’121ğ•ğ’¥superscriptğ•topğ•Î“subscriptsucceeds-or-equalsÎ”0diagÎ”1Î”Î“\max_{\left\|\mathbb{J}\right\|_{1\to 2}\leq 1,\mathbb{J}\in\mathcal{J}}\left% \langle{{\mathbb{J}}^{\top}\mathbb{J}},{\Gamma}\right\rangle\leq\max_{\begin{% subarray}{c}\Delta\succeq 0\\\ \text{diag}\left({\Delta}\right)\leq 1\end{subarray}}\left\langle{\Delta},{% \Gamma}\right\rangleroman_max start_POSTSUBSCRIPT âˆ¥ blackboard_J âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ 1 , blackboard_J âˆˆ caligraphic_J end_POSTSUBSCRIPT âŸ¨ blackboard_J start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J , roman_Î“ âŸ© â‰¤ roman_max start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î” âª° 0 end_CELL end_ROW start_ROW start_CELL diag ( roman_Î” ) â‰¤ 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ roman_Î” , roman_Î“ âŸ© |   
---|---|---  
  
since for any feasible ğ•ğ•\mathbb{J}blackboard_J,
Î”=ğ•âŠ¤â¢ğ•Î”superscriptğ•topğ•\Delta={\mathbb{J}}^{\top}\mathbb{J}roman_Î” =
blackboard_J start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J
satisfies the constraints listed in the optimization problem on the right hand
side (note that diagâ¢(Î”)diagÎ”\text{diag}\left({\Delta}\right)diag (
roman_Î” ) refers to the vector of diagonal elements of the matrix
Î”Î”\Deltaroman_Î”).

Conversely, given any feasible solution Î”Î”\Deltaroman_Î” satisfying the
constraints, one can compute its upper triangular Cholesky factorization (the
regular Cholesky factorization multiplied by the matrix with anti-diagonals
equal to 1111), to obtain ğ•ğ•\mathbb{J}blackboard_J that satisfies the
constraint
â€–ğ•â€–1â†’2â‰¤1subscriptnormğ•â†’121\left\|\mathbb{J}\right\|_{1\to 2}\leq
1âˆ¥ blackboard_J âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ 1 and
Î”=ğ•âŠ¤â¢ğ•Î”superscriptğ•topğ•\Delta={\mathbb{J}}^{\top}\mathbb{J}roman_Î” =
blackboard_J start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J. Hence
the two optimization problems have equal optimal values, and hence the lower
bound in theorem 7.1 is tight.

2\. If ğ’¥ğ’¥\mathcal{J}caligraphic_J is the set of all nÃ—nğ‘›ğ‘›n\times
nitalic_n Ã— italic_n lower triangular Toeplitz matrices, let
ğ•â¢(c)ğ•ğ‘\mathbb{J}\left({c}\right)blackboard_J ( italic_c ) denote the
lower triangular Toeplitz matrix whose first column is cğ‘citalic_c. Then, we
have

| â€–ğ•â¢(c)â€–1â†’2=â€–câ€–,ğ•â¢(c)=âˆ‘iciâ¢Hiformulae-sequencesubscriptnormğ•ğ‘â†’12normğ‘ğ•ğ‘subscriptğ‘–subscriptğ‘ğ‘–subscriptğ»ğ‘–\left\|\mathbb{J}\left({c}\right)\right\|_{1\to 2}=\left\|c\right\|,\mathbb{J}% \left({c}\right)=\sum_{i}c_{i}H_{i}âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = âˆ¥ italic_c âˆ¥ , blackboard_J ( italic_c ) = âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_c start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_H start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT |   
---|---|---  
  
where Hisubscriptğ»ğ‘–H_{i}italic_H start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT is the matrix with 00s everywhere except the iğ‘–iitalic_i-
th subdiagonal equal to 1111. Thus

| maxâ€–ğ•â¢(c)â€–1â†’2â‰¤1,ğ•â¢(c)âˆˆğ’¥â¡âŸ¨ğ•âŠ¤â¢ğ•,Î“âŸ©=maxâ€–câ€–=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“âŸ©subscriptformulae-sequencesubscriptnormğ•ğ‘â†’121ğ•ğ‘ğ’¥superscriptğ•topğ•Î“subscriptnormğ‘1ğ•superscriptğ‘topğ•ğ‘Î“\max_{\left\|\mathbb{J}\left({c}\right)\right\|_{1\to 2}\leq 1,\mathbb{J}\left% ({c}\right)\in\mathcal{J}}\left\langle{{\mathbb{J}}^{\top}\mathbb{J}},{\Gamma}% \right\rangle=\max_{\left\|c\right\|=1}\left\langle{{\mathbb{J}\left({c}\right% )}^{\top}\mathbb{J}\left({c}\right)},{\Gamma}\right\rangleroman_max start_POSTSUBSCRIPT âˆ¥ blackboard_J ( italic_c ) âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT â‰¤ 1 , blackboard_J ( italic_c ) âˆˆ caligraphic_J end_POSTSUBSCRIPT âŸ¨ blackboard_J start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J , roman_Î“ âŸ© = roman_max start_POSTSUBSCRIPT âˆ¥ italic_c âˆ¥ = 1 end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ âŸ© |   
---|---|---  
  
and the right hand side is a standard trust region subproblem with a quadratic
objective and a single quadratic constraint, that can be solved exactly via an
SDP relaxation by the S-lemma [polik2007survey], i.e, there exists an affine
map
Q:ğ•Šnâ†’ğ•Šn:ğ‘„â†’superscriptğ•Šğ‘›superscriptğ•Šğ‘›Q:\mathbb{S}^{n}\to\mathbb{S}^{n}italic_Q
: blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT â†’
blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT such that the
right hand side equals
maxCâª°0,traceâ¢(C)=1â¡âŸ¨Qâ¢(Î“),CâŸ©subscriptformulae-sequencesucceeds-or-
equalsğ¶0traceğ¶1ğ‘„Î“ğ¶\max_{C\succeq
0,\text{trace}\left({C}\right)=1}\left\langle{Q\left({\Gamma}%
\right)},{C}\right\rangleroman_max start_POSTSUBSCRIPT italic_C âª° 0 , trace
( italic_C ) = 1 end_POSTSUBSCRIPT âŸ¨ italic_Q ( roman_Î“ ) , italic_C âŸ©.
Hence, the lower bound in TheoremÂ 7.1 is tight.

3\. If ğ’¥ğ’¥\mathcal{J}caligraphic_J is the set of all nÃ—nğ‘›ğ‘›n\times
nitalic_n Ã— italic_n lower triangular Toeplitz matrices formed from a degree
1111 constant recurrent sequence, we have that
ğ•=ğ•â¢(c)ğ•ğ•ğ‘\mathbb{J}=\mathbb{J}\left({c}\right)blackboard_J =
blackboard_J ( italic_c ) where
ci=Î±â¢Î¸isubscriptğ‘ğ‘–ğ›¼superscriptğœƒğ‘–c_{i}=\alpha\theta^{i}italic_c
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = italic_Î± italic_Î¸
start_POSTSUPERSCRIPT italic_i end_POSTSUPERSCRIPT. where
Î±,Î¸âˆˆâ„ğ›¼ğœƒâ„\alpha,\theta\in\mathbb{R}italic_Î± , italic_Î¸ âˆˆ
blackboard_R are arbitrary real numbers. Then, the problem

| maxâ€–câ€–=1â¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“âŸ©=maxcâ¡âŸ¨ğ•â¢(c)âŠ¤â¢ğ•â¢(c),Î“âŸ©câŠ¤â¢csubscriptnormğ‘1ğ•superscriptğ‘topğ•ğ‘Î“subscriptğ‘ğ•superscriptğ‘topğ•ğ‘Î“superscriptğ‘topğ‘\max_{\left\|c\right\|=1}\left\langle{{\mathbb{J}\left({c}\right)}^{\top}% \mathbb{J}\left({c}\right)},{\Gamma}\right\rangle=\max_{c}\frac{\left\langle{{% \mathbb{J}\left({c}\right)}^{\top}\mathbb{J}\left({c}\right)},{\Gamma}\right% \rangle}{{c}^{\top}c}roman_max start_POSTSUBSCRIPT âˆ¥ italic_c âˆ¥ = 1 end_POSTSUBSCRIPT âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ âŸ© = roman_max start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT divide start_ARG âŸ¨ blackboard_J ( italic_c ) start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT blackboard_J ( italic_c ) , roman_Î“ âŸ© end_ARG start_ARG italic_c start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT italic_c end_ARG |   
---|---|---  
  
can be written as

| maxÎ¸,Î±â¡Î±2â¢pâ¢(Î¸;Î“)Î±2â¢qâ¢(Î¸)=maxÎ¸â¡pâ¢(Î¸;Î“)qâ¢(Î¸)subscriptğœƒğ›¼superscriptğ›¼2ğ‘ğœƒÎ“superscriptğ›¼2ğ‘ğœƒsubscriptğœƒğ‘ğœƒÎ“ğ‘ğœƒ\max_{\theta,\alpha}\frac{\alpha^{2}p\left({\theta;\Gamma}\right)}{\alpha^{2}q% \left({\theta}\right)}=\max_{\theta}\frac{p\left({\theta;\Gamma}\right)}{q% \left({\theta}\right)}roman_max start_POSTSUBSCRIPT italic_Î¸ , italic_Î± end_POSTSUBSCRIPT divide start_ARG italic_Î± start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_p ( italic_Î¸ ; roman_Î“ ) end_ARG start_ARG italic_Î± start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_q ( italic_Î¸ ) end_ARG = roman_max start_POSTSUBSCRIPT italic_Î¸ end_POSTSUBSCRIPT divide start_ARG italic_p ( italic_Î¸ ; roman_Î“ ) end_ARG start_ARG italic_q ( italic_Î¸ ) end_ARG |   
---|---|---  
  
where p,qğ‘ğ‘p,qitalic_p , italic_q are polynomials in Î¸ğœƒ\thetaitalic_Î¸
and the coefficients of qğ‘qitalic_q are independent of Î“Î“\Gammaroman_Î“
while the coefficients of pğ‘pitalic_p are affine functions of
Î“Î“\Gammaroman_Î“. Using the fact that

| pâ¢(Î¸)âˆ’Î²â¢qâ¢(Î¸)â‰¤0â‡”pâ¢(Î¸)âˆ’Î²â¢qâ¢(Î¸)â¢Â is a sum of squares polynomialiffğ‘ğœƒğ›½ğ‘ğœƒ0ğ‘ğœƒğ›½ğ‘ğœƒÂ is a sum of squares polynomialp\left({\theta}\right)-\beta q\left({\theta}\right)\leq 0\iff p\left({\theta}% \right)-\beta q\left({\theta}\right)\text{ is a sum of squares polynomial}italic_p ( italic_Î¸ ) - italic_Î² italic_q ( italic_Î¸ ) â‰¤ 0 â‡” italic_p ( italic_Î¸ ) - italic_Î² italic_q ( italic_Î¸ ) is a sum of squares polynomial |   
---|---|---  
  
we can write the maximization problem as being equal to

| minpâ¢(Î¸;Î“)âˆ’Î²â¢qâ¢(Î¸)â¢Â is a sum of squares polynomialâ¡Î²subscriptğ‘ğœƒÎ“ğ›½ğ‘ğœƒÂ is a sum of squares polynomialğ›½\min_{p\left({\theta;\Gamma}\right)-\beta q\left({\theta}\right)\text{ is a % sum of squares polynomial}}\betaroman_min start_POSTSUBSCRIPT italic_p ( italic_Î¸ ; roman_Î“ ) - italic_Î² italic_q ( italic_Î¸ ) is a sum of squares polynomial end_POSTSUBSCRIPT italic_Î² |   
---|---|---  
  
Thus, the inner maximization can be written as a concave maximization problem
of the form required for lower bound tightness in Theorem 7.1
[parrilo2012chapter].

âˆ

![Refer to caption]() Figure 4: Semidefinite programming based lower bounds on
optimal performance for various classes of matrices based on the results from
theorem 7.1

######  Lemma 7.3.

[Lower bound on matrix fractional function] For any
ğâˆˆâ„nğsuperscriptâ„ğ‘›\mathbf{e}\in\mathbb{R}^{n}bold_e âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT and
Mâˆˆğ•Š++nğ‘€subscriptsuperscriptğ•Šğ‘›absentM\in\mathbb{S}^{n}_{++}italic_M
âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT + + end_POSTSUBSCRIPT, we have

| ğâŠ¤â¢(M)âˆ’1â¢ğ=1minÎ“âˆˆğ•Š+nğâŠ¤â¢Î“â¢ğ=1â¡âŸ¨Î“,MâŸ©superscriptğtopsuperscriptğ‘€1ğ1subscriptÎ“subscriptsuperscriptğ•Šğ‘›superscriptğtopÎ“ğ1Î“ğ‘€{\mathbf{e}}^{\top}{\left({M}\right)^{-1}}\mathbf{e}=\frac{1}{\min_{\begin{% subarray}{c}\Gamma\in\mathbb{S}^{n}_{+}\\\ {\mathbf{e}}^{\top}\Gamma\mathbf{e}=1\end{subarray}}\left\langle{\Gamma},{M}% \right\rangle}bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT ( italic_M ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT bold_e = divide start_ARG 1 end_ARG start_ARG roman_min start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT start_POSTSUBSCRIPT + end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT roman_Î“ bold_e = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT âŸ¨ roman_Î“ , italic_M âŸ© end_ARG |   
---|---|---  
  
###### Proof.

Let ğâˆˆâ„nğsuperscriptâ„ğ‘›\mathbf{e}\in\mathbb{R}^{n}bold_e âˆˆ blackboard_R
start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT be an arbitrary vector.
Now, consider any positive definite matrix
Mâˆˆğ•Š+nğ‘€subscriptsuperscriptğ•Šğ‘›M\in\mathbb{S}^{n}_{+}italic_M âˆˆ
blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT + end_POSTSUBSCRIPT and eigendecomposition
M=âˆ‘iÎ»iâ¢uiâ¢uiâŠ¤ğ‘€subscriptğ‘–subscriptğœ†ğ‘–subscriptğ‘¢ğ‘–superscriptsubscriptğ‘¢ğ‘–topM=\sum_{i}\lambda_{i}u_{i}{u_{i}}^{\top}italic_M
= âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Î»
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_u start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT italic_u start_POSTSUBSCRIPT italic_i
end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT for some
orthogonal basis {ui}subscriptğ‘¢ğ‘–\\{u_{i}\\}{ italic_u start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT }. Further, expressed in this basis, suppose that
ğ=âˆ‘iÏƒiâ¢uiğsubscriptğ‘–subscriptğœğ‘–subscriptğ‘¢ğ‘–\mathbf{e}=\sum_{i}\sigma_{i}u_{i}bold_e
= âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Ïƒ
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_u start_POSTSUBSCRIPT
italic_i end_POSTSUBSCRIPT.

Then, we have

| ğâŠ¤â¢Mâˆ’1â¢ğ=âˆ‘i1Î»iâ¢(uiâŠ¤â¢ğŸ)2=âˆ‘iÏƒi2Î»isuperscriptğtopsuperscriptğ‘€1ğsubscriptğ‘–1subscriptğœ†ğ‘–superscriptsuperscriptsubscriptğ‘¢ğ‘–top12subscriptğ‘–superscriptsubscriptğœğ‘–2subscriptğœ†ğ‘–\displaystyle{\mathbf{e}}^{\top}{M^{-1}}\mathbf{e}=\sum_{i}\frac{1}{\lambda_{i% }}\left({{u_{i}}^{\top}\mathbf{1}}\right)^{2}=\sum_{i}\frac{\sigma_{i}^{2}}{% \lambda_{i}}bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT italic_M start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT bold_e = âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT divide start_ARG 1 end_ARG start_ARG italic_Î» start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG ( italic_u start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT bold_1 ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT divide start_ARG italic_Ïƒ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG italic_Î» start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG |   
---|---|---  
  
Let âŸ¨M,Î“âŸ©ğ‘€Î“\left\langle{M},{\Gamma}\right\rangleâŸ¨ italic_M ,
roman_Î“ âŸ© denote the inner product in
ğ•Šnsuperscriptğ•Šğ‘›\mathbb{S}^{n}blackboard_S start_POSTSUPERSCRIPT italic_n
end_POSTSUPERSCRIPT, i.e.,
âŸ¨M,Î“âŸ©=traceâ¢(Mâ¢Î“)ğ‘€Î“traceğ‘€Î“\left\langle{M},{\Gamma}\right\rangle=\text{trace}\left({M\Gamma}\right)âŸ¨
italic_M , roman_Î“ âŸ© = trace ( italic_M roman_Î“ ). Further, for any matrix
Î“âˆˆğ•Š+nÎ“subscriptsuperscriptğ•Šğ‘›\Gamma\in\mathbb{S}^{n}_{+}roman_Î“ âˆˆ
blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT + end_POSTSUBSCRIPT, we have

| (ğâŠ¤â¢Mâˆ’1â¢ğ)â¢âŸ¨M,Î“âŸ©=(âˆ‘iÏƒi2Î»i)â¢(âˆ‘iÎ»iâ¢uiâŠ¤â¢Î“â¢ui)=(âˆ‘iÏƒi2Î»i)â¢(âˆ‘iÎ»iâ¢â€–Î“1/2â¢uiâ€–2)superscriptğtopsuperscriptğ‘€1ğğ‘€Î“subscriptğ‘–superscriptsubscriptğœğ‘–2subscriptğœ†ğ‘–subscriptğ‘–subscriptğœ†ğ‘–superscriptsubscriptğ‘¢ğ‘–topÎ“subscriptğ‘¢ğ‘–subscriptğ‘–superscriptsubscriptğœğ‘–2subscriptğœ†ğ‘–subscriptğ‘–subscriptğœ†ğ‘–superscriptnormsuperscriptÎ“12subscriptğ‘¢ğ‘–2\displaystyle\left({{\mathbf{e}}^{\top}{M^{-1}}\mathbf{e}}\right){\left\langle% {M},{\Gamma}\right\rangle}=\left({\sum_{i}\frac{\sigma_{i}^{2}}{\lambda_{i}}}% \right)\left({\sum_{i}\lambda_{i}{u_{i}}^{\top}\Gamma u_{i}}\right)=\left({% \sum_{i}\frac{\sigma_{i}^{2}}{\lambda_{i}}}\right)\left({\sum_{i}\lambda_{i}% \left\|\Gamma^{1/2}u_{i}\right\|^{2}}\right)( bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT italic_M start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT bold_e ) âŸ¨ italic_M , roman_Î“ âŸ© = ( âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT divide start_ARG italic_Ïƒ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG italic_Î» start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG ) ( âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Î» start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_u start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT roman_Î“ italic_u start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT ) = ( âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT divide start_ARG italic_Ïƒ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG start_ARG italic_Î» start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG ) ( âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Î» start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ roman_Î“ start_POSTSUPERSCRIPT 1 / 2 end_POSTSUPERSCRIPT italic_u start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) |   
---|---|---  
| â‰¥(âˆ‘iÏƒiâ¢â€–Î“1/2â¢uiâ€–)2â‰¥â€–âˆ‘iÏƒiâ¢Î“1/2â¢uiâ€–2=ğTâ¢Î“â¢ğabsentsuperscriptsubscriptğ‘–subscriptğœğ‘–normsuperscriptÎ“12subscriptğ‘¢ğ‘–2superscriptnormsubscriptğ‘–subscriptğœğ‘–superscriptÎ“12subscriptğ‘¢ğ‘–2superscriptğğ‘‡Î“ğ\displaystyle\geq\left({\sum_{i}\sigma_{i}\left\|\Gamma^{1/2}u_{i}\right\|}% \right)^{2}\geq\left\|\sum_{i}\sigma_{i}\Gamma^{1/2}u_{i}\right\|^{2}=\mathbf{% e}^{T}\Gamma\mathbf{e}â‰¥ ( âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Ïƒ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ roman_Î“ start_POSTSUPERSCRIPT 1 / 2 end_POSTSUPERSCRIPT italic_u start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT â‰¥ âˆ¥ âˆ‘ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT italic_Ïƒ start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT roman_Î“ start_POSTSUPERSCRIPT 1 / 2 end_POSTSUPERSCRIPT italic_u start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT âˆ¥ start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = bold_e start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ bold_e |   
  
where the first inequality is an application of the Cauchy-Schwartz inequality
and the second inequality is an application of the triangle inequality.

Thus, for any
M,Î“âˆˆğ•Š+nğ‘€Î“subscriptsuperscriptğ•Šğ‘›M,\Gamma\in\mathbb{S}^{n}_{+}italic_M
, roman_Î“ âˆˆ blackboard_S start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT
start_POSTSUBSCRIPT + end_POSTSUBSCRIPT, we have

| ğâŠ¤â¢Mâˆ’1â¢ğâ‰¥ğTâ¢Î“â¢ğâŸ¨M,Î“âŸ©superscriptğtopsuperscriptğ‘€1ğsuperscriptğğ‘‡Î“ğğ‘€Î“{\mathbf{e}}^{\top}{M^{-1}}\mathbf{e}\geq\frac{\mathbf{e}^{T}\Gamma\mathbf{e}}% {\left\langle{M},{\Gamma}\right\rangle}bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT italic_M start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT bold_e â‰¥ divide start_ARG bold_e start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ bold_e end_ARG start_ARG âŸ¨ italic_M , roman_Î“ âŸ© end_ARG |   
---|---|---  
  
Further, choosing
Î“=(M)âˆ’1â¢ğğâŠ¤â¢(M)âˆ’1Î“superscriptğ‘€1superscriptğğtopsuperscriptğ‘€1\Gamma={\left({M}\right)^{-1}}\mathbf{e}{\mathbf{e}}^{\top}{\left({M}\right)^{%
-1}}roman_Î“ = ( italic_M ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT
bold_ee start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT ( italic_M )
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT, the inequality is replaced with
equality. Hence, we have

| ğâŠ¤â¢Mâˆ’1â¢ğ=maxÎ“âª°0â¡ğTâ¢Î“â¢ğâŸ¨M,Î“âŸ©=maxÎ“âª°0ğTâ¢Î“â¢ğ=1â¡1âŸ¨M,Î“âŸ©superscriptğtopsuperscriptğ‘€1ğsubscriptsucceeds-or-equalsÎ“0superscriptğğ‘‡Î“ğğ‘€Î“subscriptsucceeds-or-equalsÎ“0superscriptğğ‘‡Î“ğ11ğ‘€Î“{\mathbf{e}}^{\top}{M^{-1}}\mathbf{e}=\max_{\Gamma\succeq 0}\frac{\mathbf{e}^{% T}\Gamma\mathbf{e}}{\left\langle{M},{\Gamma}\right\rangle}=\max_{\begin{% subarray}{c}\Gamma\succeq 0\\\ \mathbf{e}^{T}\Gamma\mathbf{e}=1\end{subarray}}\frac{1}{\left\langle{M},{% \Gamma}\right\rangle}bold_e start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT italic_M start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT bold_e = roman_max start_POSTSUBSCRIPT roman_Î“ âª° 0 end_POSTSUBSCRIPT divide start_ARG bold_e start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ bold_e end_ARG start_ARG âŸ¨ italic_M , roman_Î“ âŸ© end_ARG = roman_max start_POSTSUBSCRIPT start_ARG start_ROW start_CELL roman_Î“ âª° 0 end_CELL end_ROW start_ROW start_CELL bold_e start_POSTSUPERSCRIPT italic_T end_POSTSUPERSCRIPT roman_Î“ bold_e = 1 end_CELL end_ROW end_ARG end_POSTSUBSCRIPT divide start_ARG 1 end_ARG start_ARG âŸ¨ italic_M , roman_Î“ âŸ© end_ARG |   
---|---|---  
  
âˆ

##  8 BLT with d=1ğ‘‘1d=1italic_d = 1 Buffers

In this section, we show that it is possible to achieve
MaxErrâ¡(B,C)=Oâ¢(n1/6)MaxErrğµğ¶ğ‘‚superscriptğ‘›16\operatorname{MaxErr}(B,C)=O(n^{1/6})roman_MaxErr
( italic_B , italic_C ) = italic_O ( italic_n start_POSTSUPERSCRIPT 1 / 6
end_POSTSUPERSCRIPT ) error for a degree d=1ğ‘‘1d=1italic_d = 1 constant
recurrent sequence, without appealing to the sophisticated machinery of
rational function approximation that build the crux of the paper.
Unfortunately, this approach does not naturally extend to degrees
d>1ğ‘‘1d>1italic_d > 1. In comparison, adding independent noise (that is when
d=0ğ‘‘0d=0italic_d = 0) results in an â„“âˆsubscriptâ„“\ell_{\infty}roman_â„“
start_POSTSUBSCRIPT âˆ end_POSTSUBSCRIPT error of Oâ¢(n)ğ‘‚ğ‘›O(n)italic_O (
italic_n ).

We consider the factorization A=Bâ¢Cğ´ğµğ¶A=BCitalic_A = italic_B italic_C, where B=Aâ¢Câˆ’1ğµğ´superscriptğ¶1B=AC^{-1}italic_B = italic_A italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT and Cğ¶Citalic_C and Câˆ’1superscriptğ¶1C^{-1}italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT are parameterized as follows. Let a,Î»âˆˆ[âˆ’1,1]ğ‘ğœ†11a,\lambda\in[-1,1]italic_a , italic_Î» âˆˆ [ - 1 , 1 ] with |Î»âˆ’a2|â‰¤1ğœ†superscriptğ‘21|\lambda-a^{2}|\leq 1| italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | â‰¤ 1. Define

| C=(1000â‹¯0a2100â‹¯0a2â¢Î»a210â‹¯0a2â¢Î»2a2â¢Î»a21â‹¯0â‹®â‹®â‹®â‹®â‹®â‹®),Câˆ’1=(1000â‹¯0âˆ’a2100â‹¯0âˆ’a2â¢(Î»âˆ’a2)âˆ’a210â‹¯0âˆ’a2â¢(Î»âˆ’a2)2âˆ’a2â¢(Î»âˆ’a2)âˆ’a21â‹¯0â‹®â‹®â‹®â‹®â‹®â‹®).formulae-sequenceğ¶1000â‹¯0superscriptğ‘2100â‹¯0superscriptğ‘2ğœ†superscriptğ‘210â‹¯0superscriptğ‘2superscriptğœ†2superscriptğ‘2ğœ†superscriptğ‘21â‹¯0â‹®â‹®â‹®â‹®â‹®â‹®superscriptğ¶11000â‹¯0superscriptğ‘2100â‹¯0superscriptğ‘2ğœ†superscriptğ‘2superscriptğ‘210â‹¯0superscriptğ‘2superscriptğœ†superscriptğ‘22superscriptğ‘2ğœ†superscriptğ‘2superscriptğ‘21â‹¯0â‹®â‹®â‹®â‹®â‹®â‹®C=\left(\begin{array}[]{cccccc}1&0&0&0&\cdots&0\\\ a^{2}&1&0&0&\cdots&0\\\ a^{2}\lambda&a^{2}&1&0&\cdots&0\\\ a^{2}\lambda^{2}&a^{2}\lambda&a^{2}&1&\cdots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots&\vdots\end{array}\right),\ \ \ C^{-1}=\left% (\begin{array}[]{cccccc}1&0&0&0&\cdots&0\\\ -a^{2}&1&0&0&\cdots&0\\\ -a^{2}(\lambda-a^{2})&-a^{2}&1&0&\cdots&0\\\ -a^{2}(\lambda-a^{2})^{2}&-a^{2}(\lambda-a^{2})&-a^{2}&1&\cdots&0\\\ \vdots&\vdots&\vdots&\vdots&\vdots&\vdots\end{array}\right).italic_C = ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_Î» end_CELL start_CELL italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_Î» start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_Î» end_CELL start_CELL italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL 1 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW end_ARRAY ) , italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT = ( start_ARRAY start_ROW start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) end_CELL start_CELL - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL 1 end_CELL start_CELL 0 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) end_CELL start_CELL - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_CELL start_CELL 1 end_CELL start_CELL â‹¯ end_CELL start_CELL 0 end_CELL end_ROW start_ROW start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL start_CELL â‹® end_CELL end_ROW end_ARRAY ) . |  | (8.1)  
---|---|---|---  
  
That is, Cğ¶Citalic_C corresponds to the generating function
câ¢(x)=1+a2â¢x1âˆ’Î»â¢xğ‘ğ‘¥1superscriptğ‘2ğ‘¥1ğœ†ğ‘¥c(x)=1+\frac{a^{2}x}{1-\lambda
x}italic_c ( italic_x ) = 1 + divide start_ARG italic_a start_POSTSUPERSCRIPT
2 end_POSTSUPERSCRIPT italic_x end_ARG start_ARG 1 - italic_Î» italic_x
end_ARG, which clearly has degree 1111. It can be checked that the expression
for Câˆ’1superscriptğ¶1C^{-1}italic_C start_POSTSUPERSCRIPT - 1
end_POSTSUPERSCRIPT is correct (via LemmaÂ 3.1) as
1/câ¢(x)=1âˆ’a2â¢x1âˆ’(Î»âˆ’a2)â¢x1ğ‘ğ‘¥1superscriptğ‘2ğ‘¥1ğœ†superscriptğ‘2ğ‘¥1/c(x)=1-\frac{a^{2}x}{1-(\lambda-a^{2})x}1
/ italic_c ( italic_x ) = 1 - divide start_ARG italic_a start_POSTSUPERSCRIPT
2 end_POSTSUPERSCRIPT italic_x end_ARG start_ARG 1 - ( italic_Î» - italic_a
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) italic_x end_ARG.

######  Theorem 8.1.

Setting Î»=1âˆ’1n2/3ğœ†11superscriptğ‘›23\lambda=1-\frac{1}{n^{2/3}}italic_Î»
= 1 - divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUPERSCRIPT 2 /
3 end_POSTSUPERSCRIPT end_ARG, and
a2=1n1/3â¢(1âˆ’1n1/3)superscriptğ‘21superscriptğ‘›1311superscriptğ‘›13a^{2}=\frac{1}{n^{1/3}}\left(1-\frac{1}{n^{1/3}}\right)italic_a
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = divide start_ARG 1 end_ARG
start_ARG italic_n start_POSTSUPERSCRIPT 1 / 3 end_POSTSUPERSCRIPT end_ARG ( 1
- divide start_ARG 1 end_ARG start_ARG italic_n start_POSTSUPERSCRIPT 1 / 3
end_POSTSUPERSCRIPT end_ARG ) in Eq.Â 8.1 gives

| â€–Câ€–1â†’22superscriptsubscriptnormğ¶â†’122\displaystyle\|C\|_{1\to 2}^{2}âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | â‰¤Oâ¢(1),absentğ‘‚1\displaystyle\leq O(1),â‰¤ italic_O ( 1 ) , |  | (8.2)  
---|---|---|---|---  
| â€–Bâ€–2â†’âˆ=â€–Aâ¢Câˆ’1â€–2â†’âˆsubscriptnormğµâ†’2subscriptnormğ´superscriptğ¶1â†’2\displaystyle\|B\|_{2\to\infty}=\|AC^{-1}\|_{2\to\infty}âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT = âˆ¥ italic_A italic_C start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT | â‰¤Oâ¢(n1/6)absentğ‘‚superscriptğ‘›16\displaystyle\leq O(n^{1/6})â‰¤ italic_O ( italic_n start_POSTSUPERSCRIPT 1 / 6 end_POSTSUPERSCRIPT ) |  | (8.3)  
  
###### Proof.

The maximum squared column norm of Cğ¶Citalic_C is

| â€–Câ€–1â†’22=1+a4â¢(1+Î»2+Î»4+â‹¯â¢Î»2â¢(nâˆ’2))â‰¤1+a41âˆ’Î»2.superscriptsubscriptnormğ¶â†’1221superscriptğ‘41superscriptğœ†2superscriptğœ†4â‹¯superscriptğœ†2ğ‘›21superscriptğ‘41superscriptğœ†2\|C\|_{1\to 2}^{2}=1+a^{4}\left(1+\lambda^{2}+\lambda^{4}+\cdots\lambda^{2(n-2% )}\right)\leq 1+\frac{a^{4}}{1-\lambda^{2}}.âˆ¥ italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = 1 + italic_a start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT ( 1 + italic_Î» start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + italic_Î» start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT + â‹¯ italic_Î» start_POSTSUPERSCRIPT 2 ( italic_n - 2 ) end_POSTSUPERSCRIPT ) â‰¤ 1 + divide start_ARG italic_a start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT end_ARG start_ARG 1 - italic_Î» start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG . |  | (8.4)  
---|---|---|---  
  
Since
1âˆ’Î»2=2â¢nâˆ’2/3âˆ’nâˆ’4/3=Î˜â¢(nâˆ’2/3)1superscriptğœ†22superscriptğ‘›23superscriptğ‘›43Î˜superscriptğ‘›231-\lambda^{2}=2n^{-2/3}-n^{-4/3}=\Theta(n^{-2/3})1
- italic_Î» start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = 2 italic_n
start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT - italic_n
start_POSTSUPERSCRIPT - 4 / 3 end_POSTSUPERSCRIPT = roman_Î˜ ( italic_n
start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT ) and
a4=nâˆ’2/3â¢(1âˆ’nâˆ’1/3)2=Î˜â¢(nâˆ’2/3)superscriptğ‘4superscriptğ‘›23superscript1superscriptğ‘›132Î˜superscriptğ‘›23a^{4}=n^{-2/3}(1-n^{-1/3})^{2}=\Theta(n^{-2/3})italic_a
start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT = italic_n start_POSTSUPERSCRIPT -
2 / 3 end_POSTSUPERSCRIPT ( 1 - italic_n start_POSTSUPERSCRIPT - 1 / 3
end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = roman_Î˜ (
italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT ), we have
â€–Câ€–1â†’2=Î˜â¢(1)subscriptnormğ¶â†’12Î˜1\|C\|_{1\to 2}=\Theta(1)âˆ¥
italic_C âˆ¥ start_POSTSUBSCRIPT 1 â†’ 2 end_POSTSUBSCRIPT = roman_Î˜ ( 1 ).

Let
b=[bnâˆ’1,â‹¯,b0]ğ‘subscriptğ‘ğ‘›1â‹¯subscriptğ‘0{b}=[b_{n-1},\cdots,b_{0}]italic_b
= [ italic_b start_POSTSUBSCRIPT italic_n - 1 end_POSTSUBSCRIPT , â‹¯ ,
italic_b start_POSTSUBSCRIPT 0 end_POSTSUBSCRIPT ] be the last row of
B=Aâ¢Câˆ’1ğµğ´superscriptğ¶1B=AC^{-1}italic_B = italic_A italic_C
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT. This is the longest row, so
â€–Bâ€–2â†’âˆ2=â€–bâ€–22superscriptsubscriptnormğµâ†’22superscriptsubscriptnormğ‘22\|B\|_{2\to\infty}^{2}=\|b\|_{2}^{2}âˆ¥
italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = âˆ¥ italic_b âˆ¥
start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2
end_POSTSUPERSCRIPT. In the following, we bound each element of the vector
bğ‘{b}italic_b. We have b0=1subscriptğ‘01b_{0}=1italic_b start_POSTSUBSCRIPT 0
end_POSTSUBSCRIPT = 1 and, for any
iâˆˆ{1,â‹¯â¢nâˆ’1}ğ‘–1â‹¯ğ‘›1i\in\\{1,\cdots n-1\\}italic_i âˆˆ { 1 , â‹¯
italic_n - 1 },

| bi=1âˆ’a2â¢(1+(Î»âˆ’a2)+â‹¯+(Î»âˆ’a2)iâˆ’2)=1âˆ’a2â¢(1âˆ’(Î»âˆ’a2)iâˆ’1)1+a2âˆ’Î».subscriptğ‘ğ‘–1superscriptğ‘21ğœ†superscriptğ‘2â‹¯superscriptğœ†superscriptğ‘2ğ‘–21superscriptğ‘21superscriptğœ†superscriptğ‘2ğ‘–11superscriptğ‘2ğœ†b_{i}=1-a^{2}\left(1+(\lambda-a^{2})+\cdots+(\lambda-a^{2})^{i-2}\right)=1-% \frac{a^{2}(1-(\lambda-a^{2})^{i-1})}{1+a^{2}-\lambda}.italic_b start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT = 1 - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( 1 + ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) + â‹¯ + ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 2 end_POSTSUPERSCRIPT ) = 1 - divide start_ARG italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( 1 - ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT ) end_ARG start_ARG 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» end_ARG . |  | (8.5)  
---|---|---|---  
  
Thus

| â€–Bâ€–2â†’âˆ2superscriptsubscriptnormğµâ†’22\displaystyle\|B\|_{2\to\infty}^{2}âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | =1+âˆ‘i=1nâˆ’1(1âˆ’a2(1âˆ’(Î»âˆ’a2)iâˆ’11+a2âˆ’Î»)2\displaystyle=1+\sum\limits_{i=1}^{n-1}\left(1-\frac{a^{2}(1-(\lambda-a^{2})^{% i-1}}{1+a^{2}-\lambda}\right)^{2}= 1 + âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( 1 - divide start_ARG italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( 1 - ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT end_ARG start_ARG 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» end_ARG ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
---|---|---|---  
|  | =1+âˆ‘i=1nâˆ’1((1âˆ’Î»)+a2â¢(Î»âˆ’a2)iâˆ’11+a2âˆ’Î»)2absent1superscriptsubscriptğ‘–1ğ‘›1superscript1ğœ†superscriptğ‘2superscriptğœ†superscriptğ‘2ğ‘–11superscriptğ‘2ğœ†2\displaystyle=1+\sum\limits_{i=1}^{n-1}\left(\frac{(1-\lambda)+a^{2}(\lambda-a% ^{2})^{i-1}}{1+a^{2}-\lambda}\right)^{2}= 1 + âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( divide start_ARG ( 1 - italic_Î» ) + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT end_ARG start_ARG 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» end_ARG ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT |   
|  | =1+1(1+a2âˆ’Î»)2â¢âˆ‘i=1nâˆ’1(1âˆ’Î»)2+2â¢(1âˆ’Î»)â¢a2â¢(Î»âˆ’a2)iâˆ’1+a4â¢(Î»âˆ’a2)2â¢(iâˆ’1)absent11superscript1superscriptğ‘2ğœ†2superscriptsubscriptğ‘–1ğ‘›1superscript1ğœ†221ğœ†superscriptğ‘2superscriptğœ†superscriptğ‘2ğ‘–1superscriptğ‘4superscriptğœ†superscriptğ‘22ğ‘–1\displaystyle=1+\frac{1}{(1+a^{2}-\lambda)^{2}}\sum_{i=1}^{n-1}(1-\lambda)^{2}% +2(1-\lambda)a^{2}(\lambda-a^{2})^{i-1}+a^{4}(\lambda-a^{2})^{2(i-1)}= 1 + divide start_ARG 1 end_ARG start_ARG ( 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT ( 1 - italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + 2 ( 1 - italic_Î» ) italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT + italic_a start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 ( italic_i - 1 ) end_POSTSUPERSCRIPT |   
|  | =1+(nâˆ’1)â¢(1âˆ’Î»)2+2â¢(1âˆ’Î»)â¢a2â¢1âˆ’(Î»âˆ’a2)nâˆ’11+a2âˆ’Î»+a4â¢1âˆ’(Î»âˆ’a2)2â¢(nâˆ’1)1âˆ’(Î»âˆ’a2)2(1+a2âˆ’Î»)2absent1ğ‘›1superscript1ğœ†221ğœ†superscriptğ‘21superscriptğœ†superscriptğ‘2ğ‘›11superscriptğ‘2ğœ†superscriptğ‘41superscriptğœ†superscriptğ‘22ğ‘›11superscriptğœ†superscriptğ‘22superscript1superscriptğ‘2ğœ†2\displaystyle=1+\frac{(n-1)(1-\lambda)^{2}+2(1-\lambda)a^{2}\frac{1-(\lambda-a% ^{2})^{n-1}}{1+a^{2}-\lambda}+a^{4}\frac{1-(\lambda-a^{2})^{2(n-1)}}{1-(% \lambda-a^{2})^{2}}}{(1+a^{2}-\lambda)^{2}}= 1 + divide start_ARG ( italic_n - 1 ) ( 1 - italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + 2 ( 1 - italic_Î» ) italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT divide start_ARG 1 - ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT italic_n - 1 end_POSTSUPERSCRIPT end_ARG start_ARG 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» end_ARG + italic_a start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT divide start_ARG 1 - ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 ( italic_n - 1 ) end_POSTSUPERSCRIPT end_ARG start_ARG 1 - ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG end_ARG start_ARG ( 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG |  | (8.6)  
|  | â‰¤1+(nâˆ’1)â¢(1âˆ’Î»)2+2â¢(1âˆ’Î»)â¢a2â¢11+a2âˆ’Î»+a4â¢11âˆ’(Î»âˆ’a2)2(1+a2âˆ’Î»)2.absent1ğ‘›1superscript1ğœ†221ğœ†superscriptğ‘211superscriptğ‘2ğœ†superscriptğ‘411superscriptğœ†superscriptğ‘22superscript1superscriptğ‘2ğœ†2\displaystyle\leq 1+\frac{(n-1)(1-\lambda)^{2}+2(1-\lambda)a^{2}\frac{1}{1+a^{% 2}-\lambda}+a^{4}\frac{1}{1-(\lambda-a^{2})^{2}}}{(1+a^{2}-\lambda)^{2}}.â‰¤ 1 + divide start_ARG ( italic_n - 1 ) ( 1 - italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT + 2 ( 1 - italic_Î» ) italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» end_ARG + italic_a start_POSTSUPERSCRIPT 4 end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG 1 - ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG end_ARG start_ARG ( 1 + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT - italic_Î» ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT end_ARG . |  | (8.7)  
  
Now
a2=nâˆ’1/3âˆ’nâˆ’2/3superscriptğ‘2superscriptğ‘›13superscriptğ‘›23a^{2}=n^{-1/3}-n^{-2/3}italic_a
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = italic_n start_POSTSUPERSCRIPT -
1 / 3 end_POSTSUPERSCRIPT - italic_n start_POSTSUPERSCRIPT - 2 / 3
end_POSTSUPERSCRIPT, 1âˆ’Î»=âˆ’nâˆ’2/31ğœ†superscriptğ‘›231-\lambda=-n^{-2/3}1
- italic_Î» = - italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT,
1âˆ’Î»+a2=nâˆ’1/31ğœ†superscriptğ‘2superscriptğ‘›131-\lambda+a^{2}=n^{-1/3}1 -
italic_Î» + italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = italic_n
start_POSTSUPERSCRIPT - 1 / 3 end_POSTSUPERSCRIPT and
1âˆ’(Î»âˆ’a2)2=2â¢nâˆ’1/3âˆ’nâˆ’2/3=Î˜â¢(nâˆ’1/3)1superscriptğœ†superscriptğ‘222superscriptğ‘›13superscriptğ‘›23Î˜superscriptğ‘›131-(\lambda-a^{2})^{2}=2n^{-1/3}-n^{-2/3}=\Theta(n^{-1/3})1
- ( italic_Î» - italic_a start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT )
start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT = 2 italic_n start_POSTSUPERSCRIPT
- 1 / 3 end_POSTSUPERSCRIPT - italic_n start_POSTSUPERSCRIPT - 2 / 3
end_POSTSUPERSCRIPT = roman_Î˜ ( italic_n start_POSTSUPERSCRIPT - 1 / 3
end_POSTSUPERSCRIPT ). Substituting these into Eq.Â 8.7 gives

| â€–Bâ€–2â†’âˆ2superscriptsubscriptnormğµâ†’22\displaystyle\|B\|_{2\to\infty}^{2}âˆ¥ italic_B âˆ¥ start_POSTSUBSCRIPT 2 â†’ âˆ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT | â‰¤1+(nâˆ’1)â¢nâˆ’4/3âˆ’2â¢nâˆ’2/3â¢(nâˆ’1/3âˆ’nâˆ’2/3)/nâˆ’1/3+(nâˆ’1/3âˆ’nâˆ’2/3)2/(2â¢nâˆ’1/3âˆ’nâˆ’2/3)nâˆ’2/3absent1ğ‘›1superscriptğ‘›432superscriptğ‘›23superscriptğ‘›13superscriptğ‘›23superscriptğ‘›13superscriptsuperscriptğ‘›13superscriptğ‘›2322superscriptğ‘›13superscriptğ‘›23superscriptğ‘›23\displaystyle\leq 1+\frac{(n-1)n^{-4/3}-2n^{-2/3}(n^{-1/3}-n^{-2/3})/n^{-1/3}+% (n^{-1/3}-n^{-2/3})^{2}/(2n^{-1/3}-n^{-2/3})}{n^{-2/3}}â‰¤ 1 + divide start_ARG ( italic_n - 1 ) italic_n start_POSTSUPERSCRIPT - 4 / 3 end_POSTSUPERSCRIPT - 2 italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT ( italic_n start_POSTSUPERSCRIPT - 1 / 3 end_POSTSUPERSCRIPT - italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT ) / italic_n start_POSTSUPERSCRIPT - 1 / 3 end_POSTSUPERSCRIPT + ( italic_n start_POSTSUPERSCRIPT - 1 / 3 end_POSTSUPERSCRIPT - italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT ) start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT / ( 2 italic_n start_POSTSUPERSCRIPT - 1 / 3 end_POSTSUPERSCRIPT - italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT ) end_ARG start_ARG italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT end_ARG |   
---|---|---|---  
|  | =1+nâˆ’1n2/3âˆ’2+2n1/3+nâˆ’2/3âˆ’2â¢nâˆ’1+nâˆ’4/32â¢nâˆ’1âˆ’nâˆ’4/3absent1ğ‘›1superscriptğ‘›2322superscriptğ‘›13superscriptğ‘›232superscriptğ‘›1superscriptğ‘›432superscriptğ‘›1superscriptğ‘›43\displaystyle=1+\frac{n-1}{n^{2/3}}-2+\frac{2}{n^{1/3}}+\frac{n^{-2/3}-2n^{-1}% +n^{-4/3}}{2n^{-1}-n^{-4/3}}= 1 + divide start_ARG italic_n - 1 end_ARG start_ARG italic_n start_POSTSUPERSCRIPT 2 / 3 end_POSTSUPERSCRIPT end_ARG - 2 + divide start_ARG 2 end_ARG start_ARG italic_n start_POSTSUPERSCRIPT 1 / 3 end_POSTSUPERSCRIPT end_ARG + divide start_ARG italic_n start_POSTSUPERSCRIPT - 2 / 3 end_POSTSUPERSCRIPT - 2 italic_n start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT + italic_n start_POSTSUPERSCRIPT - 4 / 3 end_POSTSUPERSCRIPT end_ARG start_ARG 2 italic_n start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT - italic_n start_POSTSUPERSCRIPT - 4 / 3 end_POSTSUPERSCRIPT end_ARG |   
|  | =1+nâˆ’1n2/3âˆ’2+2n1/3+n1/3âˆ’2+nâˆ’1/32âˆ’nâˆ’1/3absent1ğ‘›1superscriptğ‘›2322superscriptğ‘›13superscriptğ‘›132superscriptğ‘›132superscriptğ‘›13\displaystyle=1+\frac{n-1}{n^{2/3}}-2+\frac{2}{n^{1/3}}+\frac{n^{1/3}-2+n^{-1/% 3}}{2-n^{-1/3}}= 1 + divide start_ARG italic_n - 1 end_ARG start_ARG italic_n start_POSTSUPERSCRIPT 2 / 3 end_POSTSUPERSCRIPT end_ARG - 2 + divide start_ARG 2 end_ARG start_ARG italic_n start_POSTSUPERSCRIPT 1 / 3 end_POSTSUPERSCRIPT end_ARG + divide start_ARG italic_n start_POSTSUPERSCRIPT 1 / 3 end_POSTSUPERSCRIPT - 2 + italic_n start_POSTSUPERSCRIPT - 1 / 3 end_POSTSUPERSCRIPT end_ARG start_ARG 2 - italic_n start_POSTSUPERSCRIPT - 1 / 3 end_POSTSUPERSCRIPT end_ARG |   
|  | =Î˜â¢(n1/3)absentÎ˜superscriptğ‘›13\displaystyle=\Theta(n^{1/3})= roman_Î˜ ( italic_n start_POSTSUPERSCRIPT 1 / 3 end_POSTSUPERSCRIPT ) |   
  
as required. âˆ

##  9 Conjecture

We give the following conjecture which improves the results in SectionÂ 4. If
true, this would imply that BLTs can work with d=Oâ¢(logâ¡n)ğ‘‘ğ‘‚ğ‘›d=O(\log
n)italic_d = italic_O ( roman_log italic_n ) space complexity.

######  Conjecture 9.1.

For all nâˆˆâ„•ğ‘›â„•n\in\mathbb{N}italic_n âˆˆ blackboard_N there exists a
rational function r:â„‚â†’â„‚:ğ‘Ÿâ†’â„‚â„‚r:\mathbb{C}\to\mathbb{C}italic_r :
blackboard_C â†’ blackboard_C of degree d=Oâ¢(logâ¡n)ğ‘‘ğ‘‚ğ‘›d=O(\log
n)italic_d = italic_O ( roman_log italic_n ) such that the following hold.

| 12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|1râ¢(x)âˆ’11âˆ’x|2â¢dÎ¸â‰¤1nâ¢Â whereÂ â¢x=expâ¡(âˆ’1â¢Î¸âˆ’1/n).12ğœ‹superscriptsubscriptğœ‹ğœ‹superscript1ğ‘Ÿğ‘¥11ğ‘¥2differential-dğœƒ1ğ‘›Â whereÂ ğ‘¥1ğœƒ1ğ‘›\frac{1}{2\pi}\int_{-\pi}^{\pi}\left|\frac{1}{r(x)}-\frac{1}{\sqrt{1-x}}\right% |^{2}\mathrm{d}\theta\leq\frac{1}{n}~{}~{}~{}\text{ where }~{}~{}~{}x=\exp(% \sqrt{-1}\theta-1/n).divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | divide start_ARG 1 end_ARG start_ARG italic_r ( italic_x ) end_ARG - divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x end_ARG end_ARG | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ â‰¤ divide start_ARG 1 end_ARG start_ARG italic_n end_ARG where italic_x = roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - 1 / italic_n ) . |   
---|---|---  
| 12â¢Ï€â¢âˆ«âˆ’Ï€Ï€|râ¢(x)1âˆ’xâˆ’11âˆ’x|2â¢dÎ¸â‰¤1nâ¢Â whereÂ â¢x=expâ¡(âˆ’1â¢Î¸âˆ’1/n).12ğœ‹superscriptsubscriptğœ‹ğœ‹superscriptğ‘Ÿğ‘¥1ğ‘¥11ğ‘¥2differential-dğœƒ1ğ‘›Â whereÂ ğ‘¥1ğœƒ1ğ‘›\frac{1}{2\pi}\int_{-\pi}^{\pi}\left|\frac{r(x)}{1-x}-\frac{1}{\sqrt{1-x}}% \right|^{2}\mathrm{d}\theta\leq\frac{1}{n}~{}~{}~{}\text{ where }~{}~{}~{}x=% \exp(\sqrt{-1}\theta-1/n).divide start_ARG 1 end_ARG start_ARG 2 italic_Ï€ end_ARG âˆ« start_POSTSUBSCRIPT - italic_Ï€ end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_Ï€ end_POSTSUPERSCRIPT | divide start_ARG italic_r ( italic_x ) end_ARG start_ARG 1 - italic_x end_ARG - divide start_ARG 1 end_ARG start_ARG square-root start_ARG 1 - italic_x end_ARG end_ARG | start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT roman_d italic_Î¸ â‰¤ divide start_ARG 1 end_ARG start_ARG italic_n end_ARG where italic_x = roman_exp ( square-root start_ARG - 1 end_ARG italic_Î¸ - 1 / italic_n ) . |   
---|---|---  
  
Compared to what we prove in SectionsÂ 4.1 andÂ 4.2, this conjecture is quantitatively stronger in that d=Oâ¢(logâ¡n)ğ‘‘ğ‘‚ğ‘›d=O(\log n)italic_d = italic_O ( roman_log italic_n ) instead of d=Oâ¢(log2â¡n)ğ‘‘ğ‘‚superscript2ğ‘›d=O(\log^{2}n)italic_d = italic_O ( roman_log start_POSTSUPERSCRIPT 2 end_POSTSUPERSCRIPT italic_n ) but qualitatively weaker in that (i) we prove an approximation guarantee for |x|â‰¤expâ¡(âˆ’1/n)ğ‘¥1ğ‘›|x|\leq\exp(-1/n)| italic_x | â‰¤ roman_exp ( - 1 / italic_n ) rather than |x|â‰¤1ğ‘¥1|x|\leq 1| italic_x | â‰¤ 1 and, (ii) rather than a uniform bound on |râ¢(x)âˆ’1âˆ’x|ğ‘Ÿğ‘¥1ğ‘¥|r(x)-\sqrt{1-x}|| italic_r ( italic_x ) - square-root start_ARG 1 - italic_x end_ARG |, we bound the integrals directly.

## Acknowledgements

We thank Andreas Terzis, Shuang Song, and Arun Ganesh for comments on the
draft. We thank Aleksandar Nikolov and Jalaj Upadhyay for helpful discussions
about prior work. We thank Mark Bun for making us aware of the results of
\AtNextCite\AtEachCitekey\@nocounterrmaxnames\textciteNewman64.

\printbibliography
