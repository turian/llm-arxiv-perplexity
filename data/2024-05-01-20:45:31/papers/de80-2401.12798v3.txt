  1. 0.A Proof of Proposition 1
  2. 0.B Proof of Proposition 2
  3. 0.C Alignment Search
  4. 0.D Datasets
  5. 0.E Evaluation Metric

11institutetext: Anonymous Institute

# The Appendix of Gradient Flow of Energy: A General and Efficient Approach
for Entity Alignment Decoding

Anonymous Authors

##  Appendix 0.A Proof of Proposition 1

######  Proposition 1.

(Existence of the solution.) The matrix Î”oâ¢osubscriptÎ”oo\Delta_{oo}roman_Î”
start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT is non-singular,
allowing the reconstruction of other entity features
ð±osubscriptð±o\mathbf{x}_{o}bold_x start_POSTSUBSCRIPT italic_o
end_POSTSUBSCRIPT using seed alignment entity features
ð±ssubscriptð±s\mathbf{x}_{s}bold_x start_POSTSUBSCRIPT italic_s
end_POSTSUBSCRIPT as
ð±oâ¢(t)=âˆ’ðš«oâ¢oâˆ’1â¢ðš«oâ¢sâ¢ð±ssubscriptð±otsubscriptsuperscriptðš«1oosubscriptðš«ossubscriptð±s{\mathbf{x}}_{o}(t)=-\mathbf{\Delta}^{-1}_{oo}\mathbf{\Delta}_{os}{\mathbf{x}}%
_{s}bold_x start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT ( italic_t ) = -
bold_Î” start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT
italic_o italic_o end_POSTSUBSCRIPT bold_Î” start_POSTSUBSCRIPT italic_o
italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s
end_POSTSUBSCRIPT.

###### Proof.

Initially, consider an undirected connected graph scenario where
ðš«oâ¢osubscriptðš«ð‘œð‘œ\mathbf{\Delta}_{oo}bold_Î” start_POSTSUBSCRIPT
italic_o italic_o end_POSTSUBSCRIPT is a sub-matrix of the Laplacian matrix
ðš«ðš«\mathbf{\Delta}bold_Î”. Given that sub-Laplacian matrices of undirected
connected graphs are invertible [rossi2022unreasonable], thus
Î”oâ¢osubscriptÎ”ð‘œð‘œ\Delta_{oo}roman_Î” start_POSTSUBSCRIPT italic_o
italic_o end_POSTSUBSCRIPT is non-singular. The spectral properties of
eigenvalues in undirected graphs suggest similar non-singularity for directed
graphs [maskey2023fractional].

For general cases, assume an ordered representation of the adjacency matrix
for a disconnected graph as:

| ð€=diagâ¢(ð€1,â€¦,ð€r)ð€diagsubscriptð€1â€¦subscriptð€ð‘Ÿ\mathbf{A}=\text{diag}(\mathbf{A}_{1},\dots,\mathbf{A}_{r})bold_A = diag ( bold_A start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , â€¦ , bold_A start_POSTSUBSCRIPT italic_r end_POSTSUBSCRIPT ) |  | (1)  
---|---|---|---  
  
Here, ð€i,i=1,â€¦,rformulae-
sequencesubscriptð€ð‘–ð‘–1â€¦ð‘Ÿ\mathbf{A}_{i},i={1,\dots,r}bold_A
start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT , italic_i = 1 , â€¦ ,
italic_r, represents each connected component. The gradient flow in equation
(6) is applicable to each connected component independently for disconnected
graphs. âˆŽ

##  Appendix 0.B Proof of Proposition 2

######  Proposition 2.

(Approximation of the solution.) With the iterative reconstruction solution as
delineated in equation (10), and considering a sufficiently large iteration
count NNNitalic_N, the entity features will approximate the results of feature
propagation as follows:

| ð—(N)â‰ˆ(ð±sðš«oâ¢oâˆ’1â¢ð€~oâ¢sâ¢ð±s)superscriptð—ð‘matrixsubscriptð±ð‘ subscriptsuperscriptðš«1ð‘œð‘œsubscript~ð€ð‘œð‘ subscriptð±ð‘ \mathbf{X}^{(N)}\approx\begin{pmatrix}\mathbf{x}_{s}\\\ \mathbf{\Delta}^{-1}_{oo}\mathbf{\widetilde{A}}_{os}{\mathbf{x}}_{s}\\\ \end{pmatrix}bold_X start_POSTSUPERSCRIPT ( italic_N ) end_POSTSUPERSCRIPT â‰ˆ ( start_ARG start_ROW start_CELL bold_x start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL bold_Î” start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) |  | (2)  
---|---|---|---  
  
###### Proof.

Commencing with the initial entity features
ð—(0)superscriptð—0\mathbf{X}^{(0)}bold_X start_POSTSUPERSCRIPT ( 0 )
end_POSTSUPERSCRIPT generated by EA encoders and applying equation (10), we
iterate:

| (ð±s(k)ð±o(k))matrixsubscriptsuperscriptð±ð‘˜ð‘ subscriptsuperscriptð±ð‘˜ð‘œ\displaystyle\begin{pmatrix}\mathbf{x}^{(k)}_{s}\\\ \mathbf{x}^{(k)}_{o}\\\ \end{pmatrix}( start_ARG start_ROW start_CELL bold_x start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL bold_x start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) | =(ðˆðŸŽð€~oâ¢sð€~oâ¢o)â¢(ð±s(kâˆ’1)ð±o(kâˆ’1))=(ð±s(kâˆ’1)ð€~oâ¢sâ¢ð±s(kâˆ’1)+ð€~oâ¢oâ¢ð±o(kâˆ’1))absentmatrixðˆ0subscript~ð€ð‘œð‘ subscript~ð€ð‘œð‘œmatrixsubscriptsuperscriptð±ð‘˜1ð‘ subscriptsuperscriptð±ð‘˜1ð‘œmatrixsubscriptsuperscriptð±ð‘˜1ð‘ subscript~ð€ð‘œð‘ subscriptsuperscriptð±ð‘˜1ð‘ subscript~ð€ð‘œð‘œsubscriptsuperscriptð±ð‘˜1ð‘œ\displaystyle=\begin{pmatrix}\mathbf{I}&\mathbf{0}\\\ \mathbf{\widetilde{A}}_{os}&\mathbf{\widetilde{A}}_{oo}\\\ \end{pmatrix}\begin{pmatrix}\mathbf{x}^{(k-1)}_{s}\\\ \mathbf{x}^{(k-1)}_{o}\\\ \end{pmatrix}=\begin{pmatrix}\mathbf{x}^{(k-1)}_{s}\\\ \mathbf{\widetilde{A}}_{os}\mathbf{x}^{(k-1)}_{s}+\mathbf{\widetilde{A}}_{oo}% \mathbf{x}^{(k-1)}_{o}\\\ \end{pmatrix}= ( start_ARG start_ROW start_CELL bold_I end_CELL start_CELL bold_0 end_CELL end_ROW start_ROW start_CELL over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT end_CELL start_CELL over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) ( start_ARG start_ROW start_CELL bold_x start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL bold_x start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) = ( start_ARG start_ROW start_CELL bold_x start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT end_CELL end_ROW start_ROW start_CELL over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT + over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT bold_x start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT end_CELL end_ROW end_ARG ) |  | (3)  
---|---|---|---|---  
  
Given the stationary nature of the seed alignment entity features
ð±ssubscriptð±ð‘ \mathbf{x}_{s}bold_x start_POSTSUBSCRIPT italic_s
end_POSTSUBSCRIPT, we have the equation
ð±s(k)=ð±s(kâˆ’1)=ð±ssubscriptsuperscriptð±ð‘˜ð‘ subscriptsuperscriptð±ð‘˜1ð‘
subscriptð±ð‘ \mathbf{x}^{(k)}_{s}=\mathbf{x}^{(k-1)}_{s}=\mathbf{x}_{s}bold_x
start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT
italic_s end_POSTSUBSCRIPT = bold_x start_POSTSUPERSCRIPT ( italic_k - 1 )
end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT = bold_x
start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT. The focus then shifts to the
convergence of ð±osubscriptð±ð‘œ\mathbf{x}_{o}bold_x start_POSTSUBSCRIPT
italic_o end_POSTSUBSCRIPT::

| ð±o(k)=ð€~oâ¢sâ¢ð±s+ð€~oâ¢oâ¢ð±o(kâˆ’1)subscriptsuperscriptð±ð‘˜ð‘œsubscript~ð€ð‘œð‘ subscriptð±ð‘ subscript~ð€ð‘œð‘œsubscriptsuperscriptð±ð‘˜1ð‘œ\mathbf{x}^{(k)}_{o}=\mathbf{\widetilde{A}}_{os}\mathbf{x}_{s}+\mathbf{% \widetilde{A}}_{oo}\mathbf{x}^{(k-1)}_{o}bold_x start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT = over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT + over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT bold_x start_POSTSUPERSCRIPT ( italic_k - 1 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT |  | (4)  
---|---|---|---  
  
Expanding and analyzing the limit for the stationary state, we find:

| limkâ†’âˆžð±o(k)subscriptâ†’ð‘˜superscriptsubscriptð±ð‘œð‘˜\displaystyle\lim\limits_{k\to\infty}\mathbf{x}_{o}^{(k)}roman_lim start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT | =ð€~oâ¢sâ¢ð±s+limkâ†’âˆžâˆ‘i=2kð€~oâ¢oiâˆ’1â¢ð€~oâ¢sâ¢ð±s+limkâ†’âˆžð€~oâ¢okâ¢ð±o(0)absentsubscript~ð€ð‘œð‘ subscriptð±ð‘ subscriptâ†’ð‘˜superscriptsubscriptð‘–2ð‘˜superscriptsubscript~ð€ð‘œð‘œð‘–1subscript~ð€ð‘œð‘ subscriptð±ð‘ subscriptâ†’ð‘˜superscriptsubscript~ð€ð‘œð‘œð‘˜subscriptsuperscriptð±0ð‘œ\displaystyle=\mathbf{\widetilde{A}}_{os}\mathbf{x}_{s}+\lim\limits_{k\to% \infty}\sum_{i=2}^{k}\mathbf{\widetilde{A}}_{oo}^{i-1}\mathbf{\widetilde{A}}_{% os}\mathbf{x}_{s}+\lim\limits_{k\to\infty}\mathbf{\widetilde{A}}_{oo}^{k}% \mathbf{x}^{(0)}_{o}= over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT + roman_lim start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i = 2 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT + roman_lim start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT bold_x start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT |  | (5)  
---|---|---|---|---  
|  | =limkâ†’âˆžð€~oâ¢okâ¢ð±o(0)+limkâ†’âˆžâˆ‘i=1kð€~oâ¢oiâˆ’1â¢ð€~oâ¢sâ¢ð±sabsentsubscriptâ†’ð‘˜superscriptsubscript~ð€ð‘œð‘œð‘˜subscriptsuperscriptð±0ð‘œsubscriptâ†’ð‘˜superscriptsubscriptð‘–1ð‘˜superscriptsubscript~ð€ð‘œð‘œð‘–1subscript~ð€ð‘œð‘ subscriptð±ð‘ \displaystyle=\lim\limits_{k\to\infty}\mathbf{\widetilde{A}}_{oo}^{k}\mathbf{x% }^{(0)}_{o}+\lim\limits_{k\to\infty}\sum_{i=1}^{k}\mathbf{\widetilde{A}}_{oo}^% {i-1}\mathbf{\widetilde{A}}_{os}\mathbf{x}_{s}= roman_lim start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT bold_x start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT + roman_lim start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1 end_POSTSUPERSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT |   
  
Spectral graph theory provides critical insights into the properties of the
Laplacian matrix ðš«ðš«\mathbf{\Delta}bold_Î”. It establishes that the
eigenvalues of ðš«ðš«\mathbf{\Delta}bold_Î” are confined within the range
[0,2). This spectral characteristic has direct implications for the matrix
ð€~=ðˆâˆ’ðš«~ð€ðˆðš«\mathbf{\widetilde{A}}=\mathbf{I}-\mathbf{\Delta}over~
start_ARG bold_A end_ARG = bold_I - bold_Î”, whose eigenvalues are
consequently within the range (-1,1]. A pivotal aspect of this discussion, as
elucidated in Proposition 1, is the non-singularity of
ðš«oâ¢osubscriptðš«ð‘œð‘œ\mathbf{\Delta}_{oo}bold_Î” start_POSTSUBSCRIPT
italic_o italic_o end_POSTSUBSCRIPT. The absence of 0 as an eigenvalue of
ðš«oâ¢osubscriptðš«ð‘œð‘œ\mathbf{\Delta}_{oo}bold_Î” start_POSTSUBSCRIPT
italic_o italic_o end_POSTSUBSCRIPT implies that
ð€~~ð€\mathbf{\widetilde{A}}over~ start_ARG bold_A end_ARGâ€™s eigenvalues
strictly occupy the interval (-1,1), thereby excluding the endpoints. This
spectral behavior significantly influences the convergence properties of the
iterative process. Specifically, the limit
limkâ†’âˆžð€~oâ¢onâ¢ð±o(0)subscriptâ†’ð‘˜superscriptsubscript~ð€ð‘œð‘œð‘›subscriptsuperscriptð±0ð‘œ\lim\limits_{k\to\infty}\mathbf{\widetilde{A}}_{oo}^{n}\mathbf{x}^{(0)}_{o}roman_lim
start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT over~ start_ARG bold_A
end_ARG start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT
start_POSTSUPERSCRIPT italic_n end_POSTSUPERSCRIPT bold_x
start_POSTSUPERSCRIPT ( 0 ) end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o
end_POSTSUBSCRIPT approaches 0. Furthermore, the summation
limkâ†’âˆžâˆ‘i=1kð€~oâ¢oiâˆ’1subscriptâ†’ð‘˜superscriptsubscriptð‘–1ð‘˜superscriptsubscript~ð€ð‘œð‘œð‘–1\lim\limits_{k\to\infty}\sum_{i=1}^{k}\mathbf{\widetilde{A}}_{oo}^{i-1}roman_lim
start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT âˆ‘ start_POSTSUBSCRIPT
italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_k
end_POSTSUPERSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT
italic_o italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT italic_i - 1
end_POSTSUPERSCRIPT converges to
(ðˆâˆ’ð€~ð¨ð¨)âˆ’1=ðš«oâ¢oâˆ’1superscriptðˆsubscript~ð€ð¨ð¨1subscriptsuperscriptðš«1ð‘œð‘œ(\mathbf{I}-\mathbf{\widetilde{A}_{oo}})^{-1}=\mathbf{\Delta}^{-1}_{oo}(
bold_I - over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT bold_oo
end_POSTSUBSCRIPT ) start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT = bold_Î”
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o
italic_o end_POSTSUBSCRIPT. By integrating these insights, the long-term
behavior of the iterative solution can be articulated as:

| limkâ†’âˆžð±o(k)=ðš«oâ¢oâˆ’1â¢ð€~oâ¢sâ¢ð±ssubscriptâ†’ð‘˜superscriptsubscriptð±ð‘œð‘˜subscriptsuperscriptðš«1ð‘œð‘œsubscript~ð€ð‘œð‘ subscriptð±ð‘ \lim\limits_{k\to\infty}\mathbf{x}_{o}^{(k)}=\mathbf{\Delta}^{-1}_{oo}\mathbf{% \widetilde{A}}_{os}{\mathbf{x}}_{s}roman_lim start_POSTSUBSCRIPT italic_k â†’ âˆž end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT ( italic_k ) end_POSTSUPERSCRIPT = bold_Î” start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o italic_o end_POSTSUBSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT |  | (6)  
---|---|---|---  
  
Therefore, when the number of iterations Nð‘Nitalic_N is sufficiently large,
the entity features in
ð±o(N)superscriptsubscriptð±ð‘œð‘\mathbf{x}_{o}^{(N)}bold_x
start_POSTSUBSCRIPT italic_o end_POSTSUBSCRIPT start_POSTSUPERSCRIPT (
italic_N ) end_POSTSUPERSCRIPT approximate
ðš«oâ¢oâˆ’1â¢ð€~oâ¢sâ¢ð±ssubscriptsuperscriptðš«1ð‘œð‘œsubscript~ð€ð‘œð‘
subscriptð±ð‘
\mathbf{\Delta}^{-1}_{oo}\mathbf{\widetilde{A}}_{os}{\mathbf{x}}_{s}bold_Î”
start_POSTSUPERSCRIPT - 1 end_POSTSUPERSCRIPT start_POSTSUBSCRIPT italic_o
italic_o end_POSTSUBSCRIPT over~ start_ARG bold_A end_ARG start_POSTSUBSCRIPT
italic_o italic_s end_POSTSUBSCRIPT bold_x start_POSTSUBSCRIPT italic_s
end_POSTSUBSCRIPT. âˆŽ

##  Appendix 0.C Alignment Search

In the testing process, rather than use the popular distance metric of Cross-domain Similarity Local Scaling (CSLS)[lample2018word] to search the alignments in most works, we follow [mao2022effective] and [mao2022lightea] to formalize the entity alignment problem as an assignment problem to enforce the one-to-one alignment constraint. Before giving the mathematical definition, it assumes |ð’¯s|=|ð’¯t|=ntsubscriptð’¯ð‘ subscriptð’¯ð‘¡superscriptð‘›ð‘¡|\mathcal{T}_{s}|=|\mathcal{T}_{t}|=n^{t}| caligraphic_T start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT | = | caligraphic_T start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT | = italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT to simplify the process. In addition, it uses Sâ¢Iâ¢Mâˆˆâ„ntÃ—ntð‘†ð¼ð‘€superscriptâ„superscriptð‘›ð‘¡superscriptð‘›ð‘¡SIM\in\mathbb{R}^{n^{t}\times n^{t}}italic_S italic_I italic_M âˆˆ blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT Ã— italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT to represent the cosine similarity matrix and compute it between testing entities in two ð’¦â¢ð’¢ð’¦ð’¢\ \mathcal{KG}caligraphic_K caligraphic_Gs with the entity embeddings. Thus, we attempt to solve the following optimization problem:

| argâ¢maxPâˆˆâ„™ntâ¡âŸ¨P,Sâ¢Iâ¢MâŸ©argsubscriptð‘ƒsubscriptâ„™superscriptð‘›ð‘¡ð‘ƒð‘†ð¼ð‘€\text{arg}\,\max\limits_{P\in\mathbb{P}_{n^{t}}}\left\langle P,SIM\right\ranglearg roman_max start_POSTSUBSCRIPT italic_P âˆˆ blackboard_P start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUBSCRIPT end_POSTSUBSCRIPT âŸ¨ italic_P , italic_S italic_I italic_M âŸ© |  | (7)  
---|---|---|---  
  
where â„™ntsubscriptâ„™superscriptð‘›ð‘¡\mathbb{P}_{n^{t}}blackboard_P
start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT italic_t
end_POSTSUPERSCRIPT end_POSTSUBSCRIPT is a set of permutation matrices with
shape of
â„ntÃ—ntsuperscriptâ„superscriptð‘›ð‘¡superscriptð‘›ð‘¡\mathbb{R}^{n^{t}\times
n^{t}}blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUPERSCRIPT
italic_t end_POSTSUPERSCRIPT Ã— italic_n start_POSTSUPERSCRIPT italic_t
end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT. Actually, we can directly obtain the
optimal solution Pâ‹†superscriptð‘ƒâ‹†P^{\star}italic_P start_POSTSUPERSCRIPT
â‹† end_POSTSUPERSCRIPT by Sinkhorn operation[cuturi2013sinkhorn].

| Pâ‹†=limÏ„â†’0+Sinkhornâ¢(Sâ¢Iâ¢MÏ„)superscriptð‘ƒâ‹†subscriptâ†’ðœsuperscript0Sinkhornð‘†ð¼ð‘€ðœP^{\star}=\lim\limits_{\tau\rightarrow 0^{+}}\text{Sinkhorn}(\frac{SIM}{\tau})italic_P start_POSTSUPERSCRIPT â‹† end_POSTSUPERSCRIPT = roman_lim start_POSTSUBSCRIPT italic_Ï„ â†’ 0 start_POSTSUPERSCRIPT + end_POSTSUPERSCRIPT end_POSTSUBSCRIPT Sinkhorn ( divide start_ARG italic_S italic_I italic_M end_ARG start_ARG italic_Ï„ end_ARG ) |  | (8)  
---|---|---|---  
  
where the operation of Sinkhorn is as follows:

| Sâ¢iâ¢nâ¢kâ¢hâ¢oâ¢râ¢nâ¢(ð—)=limkâ†’+âˆžSkâ¢(ð—),Skâ¢(ð—)=ð’©câ¢(ð’©râ¢(Skâˆ’1â¢(ð—)))formulae-sequenceð‘†ð‘–ð‘›ð‘˜â„Žð‘œð‘Ÿð‘›ð—subscriptâ†’ð‘˜superscriptð‘†ð‘˜ð—superscriptð‘†ð‘˜ð—subscriptð’©ð‘subscriptð’©ð‘Ÿsuperscriptð‘†ð‘˜1ð—Sinkhorn(\mathbf{X})=\lim\limits_{k\rightarrow+\infty}S^{k}(\mathbf{X}),S^{k}(% \mathbf{X})=\mathcal{N}_{c}(\mathcal{N}_{r}(S^{k-1}(\mathbf{X})))italic_S italic_i italic_n italic_k italic_h italic_o italic_r italic_n ( bold_X ) = roman_lim start_POSTSUBSCRIPT italic_k â†’ + âˆž end_POSTSUBSCRIPT italic_S start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT ( bold_X ) , italic_S start_POSTSUPERSCRIPT italic_k end_POSTSUPERSCRIPT ( bold_X ) = caligraphic_N start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT ( caligraphic_N start_POSTSUBSCRIPT italic_r end_POSTSUBSCRIPT ( italic_S start_POSTSUPERSCRIPT italic_k - 1 end_POSTSUPERSCRIPT ( bold_X ) ) ) |  | (9)  
---|---|---|---  
  
where S0â¢(ð—)=eâ¢xâ¢pâ¢(ð—)superscriptð‘†0ð—ð‘’ð‘¥ð‘ð—S^{0}(\mathbf{X})=exp(\mathbf{X})italic_S start_POSTSUPERSCRIPT 0 end_POSTSUPERSCRIPT ( bold_X ) = italic_e italic_x italic_p ( bold_X ), ð’©râ¢(ð—)=XâŠ˜(ð—ðŸntâ¢ðŸntâŠ¤)subscriptð’©ð‘Ÿð—âŠ˜ð‘‹subscriptð—ðŸsuperscriptð‘›ð‘¡superscriptsubscript1superscriptð‘›ð‘¡top\mathcal{N}_{r}(\mathbf{X})=X\oslash(\mathbf{X}\mathbf{1}_{n^{t}}\mathbf{1}_{n% ^{t}}^{\top})caligraphic_N start_POSTSUBSCRIPT italic_r end_POSTSUBSCRIPT ( bold_X ) = italic_X âŠ˜ ( bold_X1 start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUBSCRIPT bold_1 start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT ) and ð’©câ¢(ð—)=XâŠ˜(ðŸntâ¢ðŸntâŠ¤â¢ð—)subscriptð’©ð‘ð—âŠ˜ð‘‹subscript1superscriptð‘›ð‘¡superscriptsubscript1superscriptð‘›ð‘¡topð—\mathcal{N}_{c}(\mathbf{X})=X\oslash(\mathbf{1}_{n^{t}}\mathbf{1}_{n^{t}}^{% \top}\mathbf{X})caligraphic_N start_POSTSUBSCRIPT italic_c end_POSTSUBSCRIPT ( bold_X ) = italic_X âŠ˜ ( bold_1 start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUBSCRIPT bold_1 start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUBSCRIPT start_POSTSUPERSCRIPT âŠ¤ end_POSTSUPERSCRIPT bold_X ) are the row and column-wise normalization operators of a matrix, âŠ˜âŠ˜\oslashâŠ˜ denotes the element-wise division, ðŸntsubscript1superscriptð‘›ð‘¡\mathbf{1}_{n^{t}}bold_1 start_POSTSUBSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUBSCRIPT is a column vector of ones. Though we can only obtain an approximate solution with a small kð‘˜kitalic_k in practice, we empirically found that the approximate solution is enough to obtain a good alignment performance. Considering that the assumption of nt=|ð’¯s|=|ð’¯t|superscriptð‘›ð‘¡subscriptð’¯ð‘ subscriptð’¯ð‘¡n^{t}=|\mathcal{T}_{s}|=|\mathcal{T}_{t}|italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT = | caligraphic_T start_POSTSUBSCRIPT italic_s end_POSTSUBSCRIPT | = | caligraphic_T start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT | is easily violated, a naive reduction is to pad the similarity matrix with zeros such that its shape becomes â„ntÃ—ntsuperscriptâ„superscriptð‘›ð‘¡superscriptð‘›ð‘¡\mathbb{R}^{n^{t}\times n^{t}}blackboard_R start_POSTSUPERSCRIPT italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT Ã— italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT end_POSTSUPERSCRIPT where nt=mâ¢aâ¢xâ¢(n1t,n2t)superscriptð‘›ð‘¡ð‘šð‘Žð‘¥subscriptsuperscriptð‘›ð‘¡1subscriptsuperscriptð‘›ð‘¡2n^{t}=max(n^{t}_{1},n^{t}_{2})italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT = italic_m italic_a italic_x ( italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 1 end_POSTSUBSCRIPT , italic_n start_POSTSUPERSCRIPT italic_t end_POSTSUPERSCRIPT start_POSTSUBSCRIPT 2 end_POSTSUBSCRIPT ).

##  Appendix 0.D Datasets

We list the statistics of all datasets used in the experiments in Table 1.

Table 1: Statistics for datasets.

Datasets | Entity | Relation | Triple  
---|---|---|---  
DBPZH-EN | Chinese | 19388 | 1701 | 70414  
English | 19572 | 1323 | 95142  
DBPJA-EN | Japaense | 19814 | 1299 | 77214  
English | 19780 | 1153 | 93484  
DBPFR-EN | French | 19661 | 903 | 105998  
English | 19993 | 1208 | 115722  
SRPRSFR-EN | French | 15000 | 177 | 33532  
English | 15000 | 221 | 36508  
SRPRSDE-EN | German | 15000 | 120 | 37377  
English | 15000 | 222 | 38363  
  
##  Appendix 0.E Evaluation Metric

We utilize cosine similarity to calculate the similarity between two entities
and employ H@k and MRR as metrics to evaluate all the methods. H@k describes
the fraction of truly aligned target entities that appear in the first
kð‘˜kitalic_k entities of the sorted rank list:

| Hâ¢@â¢k=1|St|â¢âˆ‘i=1|St|ð•€â¢[râ¢aâ¢nâ¢kiâ‰¤k]ð»@ð‘˜1subscriptð‘†ð‘¡superscriptsubscriptð‘–1subscriptð‘†ð‘¡ð•€delimited-[]ð‘Ÿð‘Žð‘›subscriptð‘˜ð‘–ð‘˜H@k=\frac{1}{|S_{t}|}\sum_{i=1}^{|S_{t}|}\mathbb{I}[rank_{i}\leq k]italic_H @ italic_k = divide start_ARG 1 end_ARG start_ARG | italic_S start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT | end_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT | italic_S start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT | end_POSTSUPERSCRIPT blackboard_I [ italic_r italic_a italic_n italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT â‰¤ italic_k ] |  | (10)  
---|---|---|---  
  
where râ¢aâ¢nâ¢kið‘Ÿð‘Žð‘›subscriptð‘˜ð‘–rank_{i}italic_r italic_a italic_n
italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT refers to the rank
position of the first correct mapping for the ið‘–iitalic_i-th query entities
and ð•€=1ð•€1\mathbb{I}=1blackboard_I = 1 if
râ¢aâ¢nâ¢kiâ‰¤kð‘Ÿð‘Žð‘›subscriptð‘˜ð‘–ð‘˜rank_{i}\leq kitalic_r italic_a
italic_n italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT â‰¤ italic_k
and 00 otherwise. Stsubscriptð‘†ð‘¡S_{t}italic_S start_POSTSUBSCRIPT italic_t
end_POSTSUBSCRIPT refers to the testing alignment set. MRR (Mean Reciprocal
Ranking) is a statistical measure for evaluating many algorithms that produce
a list of possible responses to a sample of queries, ordered by the
probability of correctness. In the field of EA, the reciprocal rank of a query
entity (i.e., an entity from the source KG) response is the multiplicative
inverse of the rank of the first correct alignment entity in the target KG.
MRR is the average of the reciprocal ranks of results for a sample of
candidate alignment entities:

| Mâ¢Râ¢R=1|St|â¢âˆ‘i=1|St|1râ¢aâ¢nâ¢kið‘€ð‘…ð‘…1subscriptð‘†ð‘¡superscriptsubscriptð‘–1subscriptð‘†ð‘¡1ð‘Ÿð‘Žð‘›subscriptð‘˜ð‘–MRR=\frac{1}{|S_{t}|}\sum_{i=1}^{|S_{t}|}\frac{1}{rank_{i}}italic_M italic_R italic_R = divide start_ARG 1 end_ARG start_ARG | italic_S start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT | end_ARG âˆ‘ start_POSTSUBSCRIPT italic_i = 1 end_POSTSUBSCRIPT start_POSTSUPERSCRIPT | italic_S start_POSTSUBSCRIPT italic_t end_POSTSUBSCRIPT | end_POSTSUPERSCRIPT divide start_ARG 1 end_ARG start_ARG italic_r italic_a italic_n italic_k start_POSTSUBSCRIPT italic_i end_POSTSUBSCRIPT end_ARG |  | (11)  
---|---|---|---  
  